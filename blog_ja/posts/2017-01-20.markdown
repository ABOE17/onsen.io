---
author: atsushi
date: 2017-01-20
id: introducing-monaca-ci
title: "Monacaで継続的インテグレーションを実現するMonaca CIの紹介"
tags: monaca, ci
product: monaca
category: 技術情報
---

CI（継続的インテグレーション）という言葉が聞かれるようになって数年経ちました。最近ではWebサービスの開発はもちろん、アプリ開発においてもコードのプッシュをフックしてビルドやテスト、さらにアプリをビルドしてテスターに配布といった具合に自動化されるようになっています。

今回は新しくMonaca IDEに追加されたMonaca CIを使った継続的インテグレーションの方法について紹介します。

![](/blog/content/images/2017/Jan/monaca-ci-7.png)

## 継続的インテグレーションとは？

そもそもCIとは、開発の終盤でよくあるフローのユニットテストや結合テスト、さらにビルドやデプロイ、そしてユーザ自身によるテストなど手間のかかる作業を自動化していくという施策です。それによって開発者はより開発に専念することができ、プロジェクトがよりスムーズに、速く進むようになります。

Monacaは元々デバッガーを使うことで開発と実機テストのサイクルを短くできますが、さらにテスターやリリースビルドなども素早く行えるようになります。

## Monaca CIのセットアップ

それでは早速Monaca CIを試します。まず注意点として、対象になるプロジェクトはGitHubリポジトリで管理されている必要があります。そのため、まずはGitHub連携を行ってください。

![](/blog/content/images/2017/Jan/monaca-ci-6.png)

そして今回は既存のリポジトリからデータを取り込みます。

![](/blog/content/images/2017/Jan/monaca-ci-5.png)

次に設定メニューの継続的インテグレーションを選択します。

![](/blog/content/images/2017/Jan/monaca-ci-3.png)

ここにはJSONを入力する欄があります。例えば次のように入力します。

```
[
  {
    "task_name": "Default",
    "branch": "/develop/",
    "platform": [
      "ios",
      "android"
    ],
    "build": [
      "debug"
    ],
    "deploy": [
      {
        "type": "DeployGate",
        "alias": "ALIAS_NAME",
        "default": {
          "release_note": "This is a beta test for insider testing."
        },
        "ios": {
          "disable_notify": "yes"
        }
      }
    ]
  }
]
```

ここでCI対象としてdevelopブランチとしています。これでGitHubのdevelopブランチが更新されるとMonaca CIが動くようになります。さらに対象となるプラットフォームはiOSおよびAndroidで、ビルドはデバッグ（debugとreleaseを指定できます）のみとします。これは開発版としてまとまったものをdevelopブランチに集約する形にしている時に便利な方法です。リリース時はmasterブランチを対象としますが、それは手動で行えば良いでしょう。

さらに単にビルドして終わりでは勿体ないので、デプロイサービスとも連携しています。今回はDeployGateと連携しています。MonacaではDeployGateの他、HockeyAppとも連携可能です。これでビルドが成功した際に、アプリがデプロイサービスに自動的にアップロードされるようになります。

なお、この設定は複数指定できますので、developブランチの時の設定とmasterブランチの設定といった具合に複数指定しておくこともできます。その他、[JSONフォーマットの詳細はドキュメントを参考](https://docs.monaca.io/ja/manual/monaca_ci/overview/#json-settings-configuration)にしてください。

## Monaca CIの使い方

後は実際の開発ですが、ちょっとコードをプッシュする度にデプロイがかかってしまうのは問題があります。[Monaca CIはBasicやPersonalプランの場合月10回、Gold/Platinumプランでも月30回までの制限があります](https://ja.monaca.io/ci.html)。developブランチに頻繁にプッシュしていたらあっという間に上限に達してしまいます。

そこで、普段の更新はさらに別なブランチを使って行います。その結果がまとまった段階でdevelopブランチにマージするようにすれば、開発のイテレーションごとに2、3回の利用で済むでしょう。

実際にプッシュを行うと自動的にビルドタスクが追加されます。

![](/blog/content/images/2017/Jan/monaca-ci-2.png)

なお、注意点ですが、iOSでの初回のビルド、およびiOS/Androidのリリースビルドだけは手動で行っておく必要があります。iOSではプロビジョニングプロファイル、Androidではキーストアの入力が必要になるからです。

ビルドが完了すると、ステータスがfinishになります。

![](/blog/content/images/2017/Jan/monaca-ci-8.png)

CIに合わせてデプロイサービスと連携させておけば、自動的にアプリがアップロードされ、テスターの方へ通知が飛ぶようになります。コードのプッシュからテスターへの配布までが一貫して完了できます。

![](/blog/content/images/2017/Jan/monaca-ci-9.png)

----

Monaca CIを使うことで多人数でのアプリ開発時におけるビルド、配布問題がスマートに解決できるようになります。GitHubを使うことでバージョン管理もできますし、ぜひGitHubとMonaca CI、そしてデプロイサービスと組み合わせた今風の開発スタイルを取り入れてください。

[Monaca CIでCordovaのビルドとデプロイを自動化 | Monaca](https://ja.monaca.io/ci.html)
