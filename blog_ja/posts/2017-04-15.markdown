---
author: atsushi
date: 2017-05-15
id: monaca-with-rakuten-book-api
title: "Monacaでマッシュアップ。楽天ブックスAPIを使ってみる"
product: monaca
tags: monaca,onsenui,web api
category: 技術情報
---

Web APIを使うとスマートフォンアプリで提供できるサービスの幅が広がります。翻訳や天気予報、画像変換など、今は様々な機能がWeb APIとして提供されています。それらを組み合わせるだけで魅力的なアプリが作れることでしょう。

今回は[楽天ブックス書籍検索API](https://webservice.rakuten.co.jp/api/booksbooksearch/)を使って書籍検索アプリを作ってみます。

## アプリの概要

今回作成するアプリは入力した文字に合わせて楽天ブックスを検索して、その検索結果を一覧表示します。

![福福鯛](/blog/content/images/2017/Apr/monaca-rakuten-2.png)

そして検索結果をタップすると、その書籍の詳細情報を表示します。

![福福鯛](/blog/content/images/2017/Apr/monaca-rakuten-1.png)

では作っていきます。

## 楽天ウェブサービスでアプリケーション登録

楽天ウェブサービスではアプリIDを発行して、そのアプリIDを使ってWeb APIにアクセスします。このキーは複数作成できますが、漏洩すると他のユーザがなりすましてWeb APIを使えてしまいますので取り扱いは注意してください。

## アプリの開発

ではアプリの開発をはじめていきます。今回はOnsen UI V2 JS Navigationをベースにしています。今回のように画面を行き来する場合はこちらを参考にすると良いでしょう。

### 画面の作成

まずは画面を作成します。画面は一覧画面と詳細画面の二種類があります。行き来する操作があるので ons-navigation を使います。

```
<ons-navigator id="navigator" page="list.html"></ons-navigator>
```

#### 一覧画面

一覧画面は次のようになります。検索する文字列を入力する ons-input を用意しておきます。検索結果は div#books 以下に表示されます。

```
<ons-template id="list.html">
  <ons-page id="list-page">
    <ons-toolbar>
      <div class="center">
        楽天ブックス検索
      </div>
    </ons-toolbar>

    <div class="content" style="text-align: center">
      <div class="center" style="margin-bottom: 0.5em;">
        <ons-input id="search" modifier="underbar" placeholder="書籍名" float></ons-input>
      </div>
      <ons-list>
        <div id="books">
        </div>
      </ons-list>
    </div>
  </ons-page>
</ons-template>
```

#### 詳細画面

詳細画面は次のようになります。今回は書籍の画像とタイトル、説明を表示します。楽天ブックスAPIではもっとたくさんの情報が返ってきますので、カスタマイズしてみてください。

```
<ons-template id="detail.html">
  <ons-page id="detail-page">
    <ons-toolbar>
      <div class="left"><ons-back-button>戻る</ons-back-button></div>
      <div class="center shop-name">書籍詳細</div>
    </ons-toolbar>

    <div class="content" id="book-info" style="text-align: center">
      <img src="" id="book-image" />
      <ons-list class="book-info-list">
        <ons-list-header>タイトル</ons-list-header>
        <ons-list-item><span id="book-title"></span></ons-list-item>
        <ons-list-header>説明</ons-list-header>
        <ons-list-item id="book-caption"></ons-list-item>
      </ons-list>
    </div>
  </ons-page>
</ons-template>
```

### JavaScriptの実装

次にJavaScriptの実装について紹介します。主な機能は次の通りです。

1. 入力された文字列で楽天ブックスAPIを使って検索
2. 返ってきたデータを一覧表示
3. 一覧をタップしたら、その書籍の詳細情報を表示

では進めていきましょう。まずは全体のコードをコメントで紹介します。楽天APIのIDは自分のものを入力してください。

```
// 楽天APIのID
var api_key = "YOUR_API_ID";

// 検索結果の書籍一覧を入れます
var books = [];

// 画面が切り替わる度に呼ばれます
document.addEventListener('init', function(event) {
  // 最初の画面を表示した時の処理
  if (page == "list-page") {
    // レストラン取得ボタンを押した時の処理
        // 検索文字がなければ終了
        // 検索実行するURL
        // Ajax実行
          // 処理が成功した場合
          
          // 処理が失敗した場合
    
    // 書籍名をタップした時のイベント
      // 書籍データを特定
      // 画面を移動
  }
  
  // 詳細画面を表示した時の処理
  if (page == "detail-page") {
    // 書籍データを表示
  }
});
```

#### 入力された文字列で楽天ブックスAPIを使って検索

まず一覧画面で検索を行う処理です。テキストボックスで文字列があるかどうかを判定します。

```
// レストラン取得ボタンを押した時の処理
$("#search").on("change", (e) => {
  // 検索文字がなければ終了
  var search = e.target.value;
  if (search == "") return;
  
}
```

検索文字があれば、楽天ブックスAPIを呼びます。URLは次のようになります。URLはもっとカスタマイズができます。[楽天ウェブサービス: 楽天ブックス書籍検索API(version:2013-05-22) | API一覧](https://webservice.rakuten.co.jp/api/booksbooksearch/)を参考にしてください。書籍のジャンルは001として、書籍に限定しています。

```
// 検索実行するURL
var url = `https://app.rakuten.co.jp/services/api/BooksBook/Search/20130522?applicationId=${api_id}&title=${encodeURI(search)}&booksGenreId=001&sort=%2BitemPrice`;
```

そしてURLを呼び出します。今回はMonaca IDEでも動くようにJSONPを使っています。アプリだけの場合はJSONも使えます。

```
// Ajax実行
$.ajax({
  type: 'GET',
  dataType: "jsonp",
  url: url
}).done((results) => {
    
}).fail((err) => {
  // 処理が失敗した場合
  alert("エラー！");
});
```

処理成功した場合は結果を一覧に追加します。書籍はタイトルが長い場合があるので、50文字を超える場合は「...」で区切るようにしています。

```
// 処理が成功した場合
books = results.Items;
for (var i = 0; i < books.length; i++) {
  var book = books[i].Item;
  // リストに追加
  var title = book.title;
  if (title.length > 50) {
    title = book.title.slice(0, 49) + "...";
  }
  $("#books").append(`<ons-list-item modifier="chevron" class="book" tappable>
    <div class="left">
      <img src="${book.mediumImageUrl}" />
    </div>
    <div class="center">
      <span data-book-id="${i}">${title}</span></ons-list-item>
    </div>
  `);
}
```

#### 書籍をタップして画面遷移

次に一覧の中から書籍をタップした時に画面遷移するようにします。これは次のように実装します。pushPageする際に、書籍データを引き継ぎます。

```
$(document).on("tap", ".book span", (e) => {
  // 書籍データを特定
  var index = $(e.target).data("book-id");
  var book = books[index].Item;
  
  // 画面を移動
  var nav = document.querySelector('#navigator');
  nav.pushPage('detail.html', {data: {book: book}});
});
```

### 書籍の詳細を表示

最後に画面遷移した後の詳細画面を表示します。今回は書籍の画像、書籍名、概要を表示します。

```
// 詳細画面を表示した時の処理
if (page == "detail-page") {
  // 書籍データを表示
  var book = event.target.data.book;
  $("#book-image").attr("src", book.largeImageUrl);
  $("#book-title").text(book.title);
  $("#book-caption").text(book.itemCaption);
}
```

JavaScriptコード全体では次のようになります。

```
// 楽天APIのID
var api_id = "YOUR_API_ID";

// 検索結果の書籍一覧を入れます
var books = [];

// 画面が切り替わる度に呼ばれます
document.addEventListener('init', function(event) {
  var page = event.target.id;
  
  // 最初の画面を表示した時の処理
  if (page == "list-page") {
    // レストラン取得ボタンを押した時の処理
    $("#search").on("change", (e) => {
        // 検索文字がなければ終了
        var search = e.target.value;
        if (search == "") return;
        
        // 検索実行するURL
        var url = `https://app.rakuten.co.jp/services/api/BooksBook/Search/20130522?applicationId=${api_id}&title=${encodeURI(search)}&booksGenreId=001&sort=%2BitemPrice`;
        // Ajax実行
        $.ajax({
          type: 'GET',
          dataType: "jsonp",
          url: url
        }).done((results) => {
          
          // 処理が成功した場合
          books = results.Items;
          for (var i = 0; i < books.length; i++) {
            var book = books[i].Item;
            // リストに追加
            var title = book.title;
            if (title.length > 50) {
              title = book.title.slice(0, 49) + "...";
            }
            $("#books").append(`<ons-list-item modifier="chevron" class="book" tappable>
              <div class="left">
                <img src="${book.mediumImageUrl}" />
              </div>
              <div class="center">
                <span data-book-id="${i}">${title}</span></ons-list-item>
              </div>
            `);
          }
        }).fail((err) => {
          // 処理が失敗した場合
          alert("エラー！");
        });
    });
    
    // 書籍名をタップした時のイベント
    $(document).on("tap", ".book span", (e) => {
      // 書籍データを特定
      var index = $(e.target).data("book-id");
      var book = books[index].Item;
      
      // 画面を移動
      var nav = document.querySelector('#navigator');
      nav.pushPage('detail.html', {data: {book: book}});
    });
  }
  
  // 詳細画面を表示した時の処理
  if (page == "detail-page") {
    // 書籍データを表示
    var book = event.target.data.book;
    $("#book-image").attr("src", book.largeImageUrl);
    $("#book-title").text(book.title);
    $("#book-caption").text(book.itemCaption);
  }
});
```

----

楽天ウェブサービスのAPIを使えば楽天市場や書籍、ホテルなど様々なデータが取得できます。アフィリエイトとも絡められるので、便利なアプリをお小遣い稼ぎに使うこともできるでしょう。

今回のコードは[moongift/monaca-with-rakuten-api](https://github.com/moongift/monaca-with-rakuten-api)にアップロードしてあります。実装時の参考にしてください。
