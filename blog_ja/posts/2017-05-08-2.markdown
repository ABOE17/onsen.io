---
author: naoki
date: 2017-05-08
id: onsenui-recent-updates-may-2017
title: "Onsen UI 2.2.6 までのアップデート内容と iOS での安定性向上について"
tags: Onsen UI,Web Components,Custom Elements
product: onsen-ui
category: 技術情報
# Open Graph protocol (OGP) 用の情報を設定
og:
  # og:image を設定
  image: https://onsen.io/blog/content/images/2017/May/CustomElementsStatus.png
  twitter:
    # Twitter Card の種類を設定: summary, summary_large_image
    card: summary_large_image
---

2017/03/14 に [Onsen UI 2.2.0 をリリース](https://onsen.io/blog/220-release/)してから約2ヶ月が経ちました。
Onsen UI は[皆さんからのご意見](https://github.com/OnsenUI/OnsenUI/issues)を元に継続的に改善を行っています。
現時点での最新版は 2.2.6 です。

最近の主なアップデートについてご紹介します。

<!-- more -->

### iOS での安定性が飛躍的に向上しました (2.2.3)

Onsen UI は Custom Elements という技術を使っています。
しかしこの Custom Elements は、[Android では良好にサポートされている一方で、iOS ではあまりよくサポートされていませんでした](https://caniuse.com/#feat=custom-elementsv1)。
そのため、Onsen UI を iOS で安定的に動作させることは技術的に困難でした。

しかし、今年の2月に Custom Elements の開発者達によって[その状況が改善され](https://github.com/webcomponents/custom-elements/issues/34)、
結果として Onsen UI の iOS での安定性が飛躍的に向上しました。
特に AngularJS などの JS フレームワークと併用した際の安定性が向上しています。

Onsen UI 2.2.3 未満をお使いの方は最新版へのバージョンアップをご検討ください。

### ons-splitter にアニメーションを追加しました (2.2.5)

Onsen UI にはスライドメニューや画面分割を提供する `ons-splitter` タグが用意されています。
その `ons-splitter` において、今までは `overlay` アニメーションのみを提供してきましたが、
Onsen UI 2.2.5 にて `push` アニメーションと `reveal` アニメーションを新たに追加しました。

<table>
    <tr>
        <th>アニメーション名</th>
        <th>説明</th>
    </tr>
    <tr>
        <td>`overlay` （または `default`）</td>
        <td>サイドページがコンテンツページに覆いかぶさるように表示されます。</td>
    </tr>
    <tr>
        <td>`push`</td>
        <td>サイドページがコンテンツページを押し出します。</td>
    </tr>
    <tr>
        <td>`reveal`</td>
        <td>コンテンツページがスライドして奥のサイドページが現れます。</td>
    </tr>
</table>

<p data-height="512" data-theme-id="light" data-slug-hash="zwPQwb" data-default-tab="html,result" data-user="asial-matagawa" data-embed-version="2" data-pen-title="Onsen UI 2.2.5 - New animations of ons-splitter" class="codepen">See the Pen <a href="https://codepen.io/asial-matagawa/pen/zwPQwb/">Onsen UI 2.2.5 - New animations of ons-splitter</a> by Naoki Matagawa (<a href="http://codepen.io/asial-matagawa">@asial-matagawa</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

### バージョンアップ方法

#### (1) 直接ダウンロードの場合

[こちら](https://github.com/OnsenUI/OnsenUI-dist/releases) から最新版の zip ファイルをダウンロードしてご利用ください。

#### (2) CDN ([unpkg](https://unpkg.com/)) をご利用の場合

最新版を利用する場合は以下のコードをご利用ください。

```html
<link ref="stylesheet" href="https://unpkg.com/onsenui/css/onsen-css-components.css">
<link ref="stylesheet" href="https://unpkg.com/onsenui/css/onsenui.css">
<script src="https://unpkg.com/onsenui/js/onsenui.js"></script>
```

バージョンを固定する場合は以下のコードをご利用ください。

```html
<link ref="stylesheet" href="https://unpkg.com/onsenui@2.2.6/css/onsen-css-components.css">
<link ref="stylesheet" href="https://unpkg.com/onsenui@2.2.6/css/onsenui.css">
<script src="https://unpkg.com/onsenui@2.2.6/js/onsenui.js"></script>
```

#### (3) [Monaca](https://monaca.io) をご利用の場合

`JS/CSS コンポーネントの追加` 画面から `onsenui` を検索して追加してください。

似た名前のコンポーネントとして `Onsen UI (Monaca Version)` がありますが、
これは `onsenui` コンポーネントと `angular` コンポーネントから Monaca に必要なファイルのみを抽出したものです。
`Onsen UI (Monaca Version)` コンポーネントは不定期に更新されるため、最新版の Onsen UI が含まれているとは限りません。
最新版の Onsen UI をお求めの方は `onsenui` コンポーネントをご利用ください。

#### (4) npm をご利用の場合

```sh
npm update onsenui@latest --save
```

#### (5) Yarn をご利用の場合

```sh
yarn upgrade onsenui@latest
```

`angular2-onsenui`, `react-onsenui`, `vue-onsenui` をご利用の方はそちらも併せて最新版にバージョンアップしてください。


### iOS での安定性向上の背景

[Web Components](https://www.w3.org/standards/techs/components) が注目を集め始めていることを考慮し、
Web Components に興味をお持ちの方のために、今回の件についてもう少し詳しくお話します。

今回の iOS での安定性向上は Custom Elements v1 の polyfill の改善に由来するものです。
Custom Elements v1 は Android の場合「Chrome 54 以上」または「Android System WebView 54 以上」、iOS の場合 iOS 10.3 以上（の Safari または UIWebView）でしか利用できないため、
Onsen UI は Custom Elements v1 の polyfill を利用しています。この polyfill によって古いブラウザでも `ons-*` 要素が動作するようになっています。

![](https://onsen.io/blog/content/images/2017/May/CustomElementsStatus.png)

Custom Elements v1 の polyfill としては2017年5月現在以下の2つが開発されています。

 - [@webcomponents/custom-elements](https://github.com/webcomponents/custom-elements) (by [webcomponents.org](https://www.webcomponents.org/))
 - [document-register-element](https://github.com/WebReflection/document-register-element) (by [WebReflection](https://www.webreflection.co.uk/))

2017年1月の時点ではどちらの polyfill も、パフォーマンス上の理由から[カスタム要素のライフサイクルコールバック（custom element reactions）](https://developers.google.com/web/fundamentals/getting-started/primers/customelements#reactions)を `Element#appendChild` や `Element#setAttribute` に対して非同期的に呼び出していました。つまり、`ons-*` 要素を `body` 要素下に追加した際に行うべき処理をすぐには行わず、数ミリ秒遅らせてしまっていたということです。本来ライフサイクルコールバックはそれらに対して同期的に呼ばれるべきで、[W3C](https://www.w3.org/TR/custom-elements/) や [WHATWG](https://html.spec.whatwg.org/multipage/scripting.html#custom-elements) にて規定されている Custom Elements v1 の正式な仕様においてもそのように書かれています。Onsen UI にとってはこの仕様との不一致が致命的でした。Onsen UI はライフサイクルコールバックが同期的に呼ばれることを前提としたコードを多数持つためです。

![](https://onsen.io/blog/content/images/2017/May/CustomElementsV1PolyfillStatus_Before.png)

そんな中、今年の2月、`@webcomponents/custom-elements` は `1.0.0-rc.2` にてライフサイクルコールバックを同期的に呼び出すよう仕様変更を行いました。これにより、仕様により良く準拠した Custom Elements v1 用 polyfill が生まれました。そこで早速 polyfill を `@webcomponents/custom-elements@1.0.0-rc.2` に差し替えたものが Onsen UI 2.2.3 です。
これにより、今までどうしても直せなかった iOS での不具合が一挙になくなり、iOS でのテストケース通過率が 58 % から 99 % に上昇しました。

![](https://onsen.io/blog/content/images/2017/May/CustomElementsV1PolyfillStatus_After.png)

Web Components が話題となる一方でその実例が少ないことに疑問を感じた方はいらっしゃらないでしょうか？その背景にはこういった polyfill の事情などがあります。

しかし、polyfill の問題は過渡期の問題にすぎません。ブラウザの機能拡充により jQuery 無しでも強力な機能が使えるようになったのと同じように、2019-2021 年頃には polyfill 無しで Custom Elements v1 や Shadow DOM v1 を利用できる時代が訪れます。

Onsen UI は Web 標準の将来的動向を見据えつつ今後も改善を続けていく所存です。
もし私たちの思想に共感いただけましたら、是非 GitHub スターにてご支援ください（皆様のおかげで、もうすぐ ★5000 に到達します）。

<!-- Place this tag where you want the button to render. -->
<a class="github-button" href="https://github.com/OnsenUI/OnsenUI" data-size="large" data-show-count="true" aria-label="Star OnsenUI/OnsenUI on GitHub">Star</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async defer src="https://buttons.github.io/buttons.js"></script>
