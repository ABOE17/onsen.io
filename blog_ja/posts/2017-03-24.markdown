---
author: atsushi
date: 2017-03-23
id: cordovaug-10
title: "第10回Apache Cordovaユーザ会参加レポート"
product: monaca
tags: cordova, usergroup
category: イベント
---

3月22日、[Sony City Osakiにて第10回目のApache Cordova勉強会が開催されました](https://cordova.connpass.com/event/52255/)。今回は初のスポンサード付き勉強会とのことで、ソニーさんが場所と懇親会の提供をしていただいているとのことです。

こちらはそのレポートになります。

## Vue.jsことはじめ by アシアル（株） 田中 正裕さん

![](/blog/content/images/2017/Mar/cordovaug-10-1.jpg)

Vue.jsは新フレームワーク御三家（Angular2、React、Vue2）の一つです。SPA業界では良く名前が出てくるフレームワークですが、まだ国内にあまり情報がないかと思います。

どんなフレームワークかを一言で言うと「開発がしやすてライトウェイト」です。他のフレームワークに比べると取っつきやすいかと思います。去年の9月にVirtualDOM対応版のバージョン2がリリースしました。

Angular2はTypeScript限定であったり、ReactのJSXといった記法に比べてVue.jsはES5や2015でも使えます（TypeScriptもサポートされています）。そういった点が敷居が低い点です。また、Vue.jsはビューに特化しているので軽量です。開発体制として、Angular2はGoogle、ReactはFacebookがサポートしていますが、VueはEvan Youさんという個人が行っています。とは言え、中国で特に使われているようで、コミットも多いです。

![](/blog/content/images/2017/Mar/cordovaug-10-2.jpg)

Hello Worldは次のようなコードになります。index.htmlの中にHTMLタグを書くだけです。コンポーネントの定義も一つのオブジェクトでできます。

Angular2に比べるとその違いが分かるかと思います。Angular2だと色々読み込み、それぞれのファイルがやっていることも把握していないといけないでしょう。Vue.jsは設定なしでいきなり使えます。

他のフレームワークと異なり、コンポーネントの定義はオブジェクトとなっています。クラスを定義する必要がなく、見慣れた構文で処理できます。従来のオブジェクトなので、ミックスインができたり、拡張も用意です。柔軟性が高いと言えます。

小さなWebアプリであれば、とりあえず<script>タグを書いてCDNからインクルードすればそこそこ書けます。もちろんファイル数やページ数が増えてきたらビルド処理を行った方が良いですが、使い始めの敷居が低いでしょう。

テンプレートがHTMLなのでデザイナーの方にも分かりやすいです。JSXは敷居が高いんじゃないでしょうか。

なお、コンポーネントの定義もできます。この場合はWebpackを使ってビルドする必要があります。一つのファイル（.vueファイル）にテンプレート、スタイル、スクリプトを定義できます。

周辺ライブラリを紹介します。VuexはFluxの実装です。Vue-routerはVueの公式ルーターモジュールですが、Cordovaアプリ開発では使わないかも知れません。Webサイト開発では便利です。

モバイル向けとしては、当社が開発しているOnsen UIにて絶賛開発対応中です。他有名なものとしてはQuaser Frameworkがあります。これはコンポーネントなどの種類が豊富です。さらにWeex Frameworkがあります。これはReact NativeのVue.js版で、Vue.jsを使ってネイティブアプリの開発ができます。

Cordovaとの組み合わせについては情報は少ないけれど、問題なく使えます。ぜひ使ってみてください。

日本語のドキュメントもできていて、小さいながらも日本語コミュニティもあります。手軽にVirtual DOMに対応したライブラリを探しているならぜひ使ってみて欲しいです。

## WEBエンジニアの可能性を広げるJINS MEMEのアプリ開発 by （株）ジェイアイエヌ システム企画室　リーダー 佐藤 拓磨 さん

今回はJINSのプロダクト、MEMEを紹介します。世界初の自分を見るアイウェアです。目は口ほどにものを言うという慣用句があるくらい、瞬きや目の動きで心理状態や体の状態が分かります。

眼電位がコア技術で、東北大学の川島隆太先生と一緒に研究開発しています。具体的には三点式眼電位センサー（EOG）を備えています。眼が動くと電位差が発生し、その電位差を鼻パットとブリッジで読み取る仕組みです。これは元々医療世界では知られていたものですが、昔は専用の器具を使って測定しないといけませんでした。また、従来の四点式から三点式に変更し、MEMEという形にしました。EOGで取れるデータとしては上下左右の眼球の動きと瞬きの強度になります。

![](/blog/content/images/2017/Mar/cordovaug-10-3.jpg)

さらにMEMEでは加速度、角速度の6軸センサーがあります。例えば垂直加速度によって走り方のデータ化ができますので体幹を鍛えるのに使えます。

MEMEの特徴は頭につけることです。他のデバイスに比べると体軸が正確に取れたり、XYZ方向の加速度が正確に取れます。他にも姿勢角（前後方向、横方向、水平回転方向）がとれます。データがすべてMEMEに入っていて、BLEを使ってスマホに送ります。

![](/blog/content/images/2017/Mar/cordovaug-10-4.jpg)

この収集したデータはSDKを通して開発者に開放しています。生データからMEMEのアルゴリズムを通して分かりやすい形にしてSDKでデータを提供します。[GitHubなどにドキュメント、サンプルコードがあります](https://jins-meme.github.io)のでぜひ見てください。

MEMEはテクノロジーの塊ではありますが、何よりも普通の眼鏡であることを大事にしています。下の写真は一例で、95年のMITで研究されていたウェアラブルデバイスです。当時からあまり変わっていないことが分かると思いますが、生活には馴染みません。これが課題です。MEMEではアウディのカーデザイナーと一緒にデザイン設計をしており、一般的な眼鏡として普段から使える形に仕上がっています。

![](/blog/content/images/2017/Mar/cordovaug-10-5.jpg)

利用するシチュエーションとして三つほど取り上げます。ドライブ、フィットネス、オフィスです。瞬きや視線の移動を取れるので、ドライブ中の眠気度合いを判定しマッピングする覚醒値マップです。フィットネス分野では体の体軸を可視化する試みがあります。オフィスでは脳の万歩計というキーワードで作業中の集中度を可視化しています。

![](/blog/content/images/2017/Mar/cordovaug-10-6.jpg)

他にも無呼吸症候群、糖尿病、パーキンソン病などでは独特な目の動きをすることが知られており、それをMEMEを使って事前に検知できるんじゃないだろうかと研究中です。他にもWith ALSという団体と一緒に活動しています。ALSは[筋萎縮性側索硬化症](https://ja.wikipedia.org/wiki/%E7%AD%8B%E8%90%8E%E7%B8%AE%E6%80%A7%E5%81%B4%E7%B4%A2%E7%A1%AC%E5%8C%96%E7%97%87)という病気で、次第に体が動かせなくなっていきます。しかし眼球は動かせると言うことが知られています。そこでMEMEを使うことで様々なデバイスを動かせるソリューション開発を目的としたプロジェクトになります。

最後にJINS MEME SDK for Monacaを紹介します。もちろんCordovaでも使えます。これまでのSDKはiOS/Android向けだけでしたが、このプラグインによってHTML5でもウェアラブルアプリが開発できます。開発入門ドキュメントもあります。使い方としてはアプリID、アプリシークレットをWebサイトで取得して記述するだけです。ぜひ使ってみてください。

## Cordova を使って本気で商用ハイブリッドアプリケーション開発をやってみた by ソニーネットワークコミュニケーションズ株式会社 CSA1-2 緒方 信さん

![](/blog/content/images/2017/Mar/cordovaug-10-7.jpg)

まず最初にプロジェクトの概要を紹介します。ePaperを使った新しいデジタルガジェットで好きな写真を加工してウォッチフェイスにできます。そのクライアントアプリ開発を通じて感じた経験をお話しします。

今回特に大事にしたのが「他のアプリとの差別化を図るメインUI」です。例えばウォッチフェイスの一覧では弧を描く感じのスクロールであったり、アニメーションを工夫しています。これもCordova上で開発されています。

![](/blog/content/images/2017/Mar/cordovaug-10-8.jpg)

商用ハイブリッドアプリとしての宿命ですが、利用者に「これはブラウザベースだな」と思われたら負けだと思っています。ユーザの期待値は常にネイティブアプリにありますので、変な動きをしたらダメです。容赦なく低い評価になってしまいます。そのためには商用アプリとして成立するためには何をすべきかを最初に定義しておく必要があります。

今回はまずネイティブアプリ開発では当たり前、とのギャップをなくすことを定義しました。とは言えハイブリッドアプリの方がコストがかかってしまったら本末転倒です。また、作っておしまいではなく妥協なく商品力を追求しつつ、保守まで見据えた秩序の確立も必要と考えました。

開発環境としてはCordova 6.1.1を採用しています。言語はTypeScript/SASSで、対応OSはAndroid 5+/iOS 9+となっています。TypeScriptは型指定もできるのでC/C++/Java経験エンジニアにとっては取っつきやすく、コンパイルも苦になりません。クラスもサポートしているのでオブジェクト指向設計のノウハウが活かしやすいのもメリットです。

次にフレームワークの選定があります。通常のアプリでは OS - 言語（Java/Swiftなど） - SDK/UIKit - アプリといった階層に分かれています。対してハイブリッドアプリではSDKやUIKitに相当する部分がありません。どういう風に画面を作ればいいのか、手続きを踏めば良いのかが提示されておらず、いきなり開発者に委ねられます。そのためフレームワークを使って開発フローを決めなければなりません。

その時問題になるのがJavaScript界隈のHOTな状況です。シンプルなものからフルスタックまで幅広くフレームワークが存在し、さらに半年ごとに新しいものが登場します。今回のように限られた時間とリソースの中で楽しい商品を供給しようと考えた時、私たちはjQuery Mobile + Backbone.js + i18nextという組み合わせを選ぶに至りました。理由としてはオリジナルUIを実装しやすいこと、開発チームがすでに慣れていたこと、拡張性などが挙げられます。商品開発時には枯れた技術を採用するのが良いかと思います。

![](/blog/content/images/2017/Mar/cordovaug-10-9.jpg)

今回のナレッジとして紹介できるのが画面遷移です。今回はブラウザの履歴とページスタックを連動させる形にしています。具体的にはBackbone.RouterオブジェクトとjQuery mobileのchangePageを使っています。これによってAndroidのハードウェアのバックキーイベントでもブラウザの履歴を辿れば画面遷移が可能です。さらにサブフローと呼ぶ、フローの分岐にも対応し、フローが終了するとその区間の履歴を破棄できるようにしています。

![](/blog/content/images/2017/Mar/cordovaug-10-10.jpg)

今回のアプリの対応言語は日、米、中になります。アプリ開発については一人でも進められますが、ローカライズは困難です。すべての言語を問題なく使いこなせる人はいないでしょう。そこで翻訳についてはマスターデータをExcelで管理し、そこからi18next用のJSONを生成するスクリプトを用意しました。

アプリの差別化につながるUIについてはデザイナーがこわだる部分になります。と同時にプラットフォームごとのガイドラインにも準拠しなければなりません。今回は設定画面など差別化を生みづらい部分の画面についてはiOS/Androidそれぞれに対応するデザインスタイルシートを用意しています。htmlタグについたクラスでデザインが各プラットフォーム向けに変化できるようにしています。このスタイルシートファイルは1.2万行くらいありますが、205ms未満でレンダリング完了できるくらい高速になっています。

![](/blog/content/images/2017/Mar/cordovaug-10-11.jpg)

JavaScriptでは非同期処理が一般的です。ハイブリッドアプリ開発においてもネットワーク処理やネイティブとJavaScriptを連携させる処理については非同期で行われます。この手の処理としてはPromiseを使うのが一般的です。Promiseは便利なのですが、処理を途中でキャンセルしたい時があります。多くは画面を切り替えるタイミングなど、ユーザのアクションによって起こります。今回はそうしたPromiseを管理できる管理用ライブラリを開発しました。複数の非同期処理を平行して処理したり、キャンセルできます。

もう一つ開発したのに [cordova-plugin-cdp-nativebridge](https://github.com/sony/cordova-plugin-cdp-nativebridge) があります。これはクラス定義とJavaScriptレイヤ、ネイティブレイヤを書くだけで対応するメソッドが呼び出せるというものです。これによって敢えてCordovaプラグインを開発することなく、ネイティブのコードを呼び出せます。例えばスマートフォン内の写真一覧を取得したり、ステータスバーのテキストカラーを変更、DateTimePickerのフォーカス解除イベントを取得するのに使っています。ぜひ使ってみてください。

![](/blog/content/images/2017/Mar/cordovaug-10-13.jpg)

今回のプロジェクトを解析した結果ですが、TypeScriptが2.3万行、SASSが6,027行、HTMLは1,072行となっています。使ったオープンソース・ソフトウェアは34種類、プラグインが16、JavaScriptライブラリは18となっています。さらにメンテナンス容易性指数はOSSよりも良い傾向が出ています。バグ見積もり、可読性はソース規模に対してずれていない結果となっています。今回紹介した作戦が功を奏したかは分かりませんが、間違ってはいなかったかなと考えています。

最後にまとめです。ハイブリッドアプリ開発はちゃんと準備して望めば結果はついてくると感じています。技術面で詰まったことはありませんでした。なので、マルチプラットフォーム対応するなら十分に選択肢の一つになると思います。コンシューマ向けアプリ開発はソフトウェアエンジニアにとっては花形だと思います。今回の情報が皆さんのお役に立てば幸いです。

------

セッションの後はその場で懇親会が開催されました。多くの方が残っており、熱心に会話されていました。

![](/blog/content/images/2017/Mar/cordovaug-10-14.jpg)

今後も定期的に開催されていくとのことなので、ハイブリッドアプリ開発を行っている方はぜひご参加ください。