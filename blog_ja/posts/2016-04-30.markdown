---
author: atsushi
date: 2016-04-30
id: angularjs-15
title: "AngularJS 1.5の特徴と相違点"
product: onsen-ui
tags: AngularJS,Onsen-UI,JavaScript
category: 技術情報
---

今回はAngularJS1.5についての記事です。AngularJS1.5のバージョン名は[ennoblement-facilitation](http://angularjs.blogspot.jp/2016/02/angular-150-ennoblement-facilitation.html)（直訳すると「高尚にすることを容易にする」）と、今までの1.x系と2.x系の橋渡しとしての意味合いが非常に強いバーションです。

今回の記事ではそんなAngularJS1.5の概要、それからAngularJS2が今後どのように進化していくのかを紹介します。

<!-- more -->

## AngularJS1.5の概要

AngularJS1.5は[2016年2月に正式リリースされたバージョン](http://angularjs.blogspot.jp/2016/02/angular-150-ennoblement-facilitation.html)です。

AngularJS1.5では主に以下のような特徴が挙げられます。

* コンポーネントディレクティブを作成する新たなAPIを導入
 * これまで使われていたmodule.directiveの代わりに、module.componentヘルパーメソッドを利用してコンポーネントディレクティブを定義することができるように改善されました。これはAngularJS2では[React.js](https://facebook.github.io/react/)同様、コンポーネントベースでのアプリケーション実装が推奨されているためです
* [ES6](http://www.ecmascript.org/)クラスのサポートを強化
 * $injectorでコントローラーとしてネイティブの[ES6](http://www.ecmascript.org/)クラスをインスタンス化ができるように改善されました。これは[Babel](https://babeljs.io/)などのトランスパイラの充実、Node.jsのES6のサポートなど、ブラウザ、サーバサイド共に[ES6](http://www.ecmascript.org/)を利用できる環境が整備されたなどが理由
* マルチスロットのトランスクルージョン、デフォルトのトランスクルージョンコンテンツ設定、片方向のバインディング設定などの機能の追加
* 文字列・配列にプラスして、ディレクティブとコンポーネントのプロパティを要求するためのオブジェクトが指定可能に改善
* 双方向データバインディングの廃止
 * Angular1.xで特徴的だったデータとUIを互いに結びつける双方向データバインディングは廃止
* DOM変更を単一のコンテナスワップとしてアニメーションで切り替える新たなディレクトリ[ngAnimateSwap](https://docs.angularjs.org/api/ngAnimate/directive/ngAnimateSwap)の追加
* キャンセル可能なアクションをサポートする[ngResource](https://docs.angularjs.org/api/ngResource)の機能の追加
 
この中で大きなポイントは、一番最初のコンポーネントディレクティブを作成する新たなAPIを導入でしょう。そこでこちらの機能について以下で詳しく見ていきたいと思います。

### コンポーネントディレクティブを作成する新たなAPIを導入について

Angular2.0では[React.js](https://facebook.github.io/react/)のようにコンポーネント志向のフレームワークとなります。データやロジックをカプセル化した[コンポーネント](https://docs.angularjs.org/guide/component)を定義し、組み合わせることでアプリケーションを構築するイメージです。 
これまで、独自要素を作成する際は、先にも触れたように[コンポーネントディレクティブ](https://docs.angularjs.org/guide/directive)を利用していました。しかし今回のバージンアップにより、module.component を利用することでより短く独自要素を追加することができます。

[こちら](https://toddmotto.com/exploring-the-angular-1-5-component-method/)を参考にすると、記載の変更は以下の通りになります。

```
// ディレクティブ仕様時
module.directive(name, fn);

// コンポーネント仕様時
module.component(name, options);
```

たとえば `<my-widget></my-widget>` という独自要素を作りたいとした場合、module.componentを使ったコードは以下のようになります([こちら](http://angularjs.blogspot.jp/2015/11/angularjs-15-beta2-and-14-releases.html)より引用)。

```
var myApp = angular.module("MyApplication", [])
myApp.component("my-widget", {
  templateUrl: "my-widget.html",
  controller: "MyWidgetController",
  bindings: {
    title: "="
  }
});
```

[コンポーネント](https://docs.angularjs.org/guide/component)を使うことにより、[ディレクティブ](https://docs.angularjs.org/guide/directive)を使用した場合に比べて、構文がやや単純化にできるというメリットがありますが、[ディレクティブ](https://docs.angularjs.org/guide/directive)では使用できていたlinkプロパティが設定できないというデメリットも生じます。そのため、既存システムを[ディレクティブ](https://docs.angularjs.org/guide/directive)をなくすことは難しいかもしれませんが、新規での作成の場合は、ぜひ[ディレクティブ](https://docs.angularjs.org/guide/directive)を使わずに、[コンポーネント](https://docs.angularjs.org/guide/component)を使用するようにしてください。

## AngularJS 2での変更点

さて、AngularJS1.5は従来の1.x系と今後の2.x系の橋渡しとしての意味合いが強い説明しました。それでは、AngularJS 2.xが1.xと比べ、どのように変更されていくのでしょうか。

[こちら](https://angular.io/features.html)のサイトによるとクロスプラットフォーム対応で、スピード感のあるパフォーマンスを発揮し、開発がしやすく生産性の高いものだと言っています。

そのために、[$scope](https://docs.angularjs.org/guide/scope)、[Contoroller](https://docs.angularjs.org/guide/controller)、[angular.module](https://docs.angularjs.org/guide/module)、[jqlite](https://docs.angularjs.org/api/ng/function/angular.element)、[DirectivedefinitionObject](https://docs.angularjs.org/api/ng/service/$compile)は廃止されます。

そして、ブラウザ・サーバサイド共に環境が整備されたとの理由から[ES6](http://www.ecmascript.org/)クラスのサポートを強化し、コンポーネントベースでのアプリケーション開発のためにコンポーネントディレクティブを作成する新たなAPIが導入されました。

これにより、よりモバイルおよびデスクトップアプリでも同様の快適さで高いパフォーマンスを発揮できるようになります。

## まとめ

今回はAngularJS1.5がバージョンアップに伴いどのように変更されたかを見ていきました。1.5系で、AngularJS2.x系の特徴である、処理速度・パフォーマンスの向上、よりシンプルにわかりやすい記述での開発、クロスプラットフォームでの使用へと、より近づいたと言っていいでしょう。

旧バージョンを使ったプロジェクトは、まずは[こちら](https://docs.angularjs.org/guide/migration)に記載のガイドに基づいて、1.5へとマイグレーションすることを強くおすすめします。
