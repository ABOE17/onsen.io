---
author: fran
date: 2015-06-25
id: onsen-ui-router-app
title: "Tutorial: Onsen UI with ui-router"
tags: tutorial, angular, onsen ui
---

![Onsen UI Theme Customization](/blog/content/images/2015/Jun/onsen-ui-router.png)

[AngularUI Router](http://angular-ui.github.io/*ui-router*/site/#/api/ui.router) is perhaps one of the most used modules out there for AngularJS that allows you to organize the parts of your interface into a state machine. Onsen UI doesn't use URL routing but navigates from one page to another programmatically using the custom elements. However, since in *ui-router* we can define state transitions and not only URL routes we are able to combine Onsen UI and *ui-router* in the same app. Learn here how to do it.

<!-- more -->

## Routing in Onsen UI

Onsen UI uses its own route system and was not meant to be used with an external router, but definitely it is compatible with a router such as *ui-router*. Due to this reason we have to mention that there is not only one way to integrate Onsen UI with *ui-router*. Here we will explain a basic solution to combine them both that is likely to be enough in most cases. However, if you already have some experience with *ui-router* probably you can find a way that fits your needs better.

In this tutorial, we will combine three different Onsen UI patterns in order to make it useful for everyone. The main element of our app will be the Tabbar pattern and it will have two child tabs: a Navigator in the first one (MasterDetail) and a Sliding Menu in the second. In addition, since this routing is based on states we will be able to make a transition to a deep route in the Navigator from, for example, the main page of the Sliding Menu.

As usual, all the code of this example is [available to download on Github](https://github.com/frankdiox/OnsenUI-router). You can check here the final result as well before explaining how it is done:

<iframe style="background-image: url('/blog/content/images/2015/Feb/nexus5-1.png'); padding: 65px 9px 58px 11px;  display:block; margin:auto;margin-top:30px; border:none;" src="https://frankdiox.github.io/OnsenUI-router/" width="359" height="640" scrolling="no" class="lazy-hidden"></iframe>

Looks like a normal Onsen UI app but it really uses *ui-router* for the state transitions behind the scenes. And the good news is that it is not hard at all once you understand the basic rules.

### The layout

In this example we include all the dependencies from CDNs but you can download them locally with [Bower](http://bower.io) or directly from their web pages. We will have two main states for the two tabs called "navigator" and "sliding". The first one will have a child state called "navigator.master" and a grandchild state called "navigator.master.detail". Similarly, "sliding" state will have three childs, one per sub-state: "sliding.main", "sliding.page1" and "sliding.page2". After setting up our `index.html` with the needed dependencies we include the main elements of our app in the body:

```html
<ons-tabbar var="myTabbar" animation="none">
  <ons-tab ui-sref="navigator.master">
    <ons-icon icon="ion-home"></ons-icon>
    <span style="font-size: 14px">MasterDetail</span>
  </ons-tab>
  <ons-tab ui-sref="sliding.main">
    <ons-icon icon="ion-star"></ons-icon>
    <span style="font-size: 14px">SlidingMenu</span>
  </ons-tab>
</ons-tabbar>

<ons-template id="html/tab1.html">
  <ons-navigator title="Navigator" var="myNavigator">
  </ons-navigator>
</ons-template>

<ons-template id="html/tab2.html">
  <ons-sliding-menu menu-page="html/menu.html" side="left" var="myMenu"
                  type="reveal" max-slide-distance="260px" swipeable="true">
  </ons-sliding-menu>
</ons-template>
```

Here we have a Tabbar as the parent element of our project and two templates with a Navigator and a SlidingMenu. Notice that we are not setting the main page of any element, not even telling the Tabbar that the Navigator and the SlidingMenu are its childs yet. We will connect them later using *ui-router*.

<div style="border-left: thick double #787878; padding-left: 8px; color: #888888"> <strong>Note:</strong> This example tries to show how to do everything with *ui-router*. However, you may want to keep using Onsen UI attributes such as Navigator's `page` or SlidingMenu's `main-page` to link views instead of doing it manually with *ui-router*.</div>

The `ui-sref` attribute substitute the normal `page` attribute in an Onsen UI tab. It does not work exactly in the same way since `ui-sref` just links to a different state and not to the page itself, but it will do the trick. We will show how to define those states soon.

Now we can create all the HTML pages we want to use in the corresponding folder. Just remember to dont use any function like `myNavigator.pushPage( … )`, `myMenu.setMainPage( … )` or `myTabbar.setActiveTab( … )`. Use *ui-router* statements and the name of the states that we mentioned before instead. For example, let's see how to do it in `master.html` (the list part of MasterDetail example):

```html
<ons-page>
  <ons-toolbar>
    <div class="center">Simple Navigation</div>
  </ons-toolbar>
  <ons-list ng-controller="MasterController">
    <ons-list-item modifier="chevron" class="item" ng-repeat="item in items"
                  ui-sref="navigator.master.detail({index: $index})">
    <ons-row>
      <ons-col width="60px">
        <div class="item-thum"></div>
      </ons-col>
      <ons-col>
        <header>
          <span class="item-title">{{item.title}}</span>
          <span class="item-label">{{item.label}}</span>
        </header>
        <p class="item-desc">{{item.desc}}</p>
      </ons-col>
    </ons-row>
    </ons-list-item>
  </ons-list>
</ons-page>
```

As you can see there, we have a normal Onsen UI page with its own AngularJS controller (in `js/controllers.js`). The only difference is that, instead of pushing a page with `ng-click="myNavigator.pushPage('detail.html', {index: $index})"`, we pass the index parameter to a *ui-router* state: `ui-sref="navigator.master.detail({index: $index})"`. The rest of the pages are not more complex than this one, so you can check the code on Github.

Apart from that, we have to be careful if we need an `<ons-back-button>` in our pages since we cannot change its inner behavior. Instead, we can just use the back button style manually and point it to the state where we want to move with `ui-sref`. Usually it will be `ui-sref="^"` since we want to move to the parent state:

```html
<style>
  .ons-back-button__icon {
    vertical-align: top;
    font-size: 36px;
    margin-left: 8px;
    margin-right: 2px;
    width: 16px;
    display: inline-block;
    padding-top: 1px;
  }
</style>

<ons-toolbar-button class="toolbar-button--quiet" ui-sref="^">
  <ons-icon class="ion-ios-arrow-back ons-back-button__icon"></ons-icon>
  Back
</ons-toolbar-button>
```

### The states

Let's check now how to configure *ui-router* to make it work together with Onsen UI:

```javascript
var app = angular.module('myApp', ['onsen', 'ui.router']);

app.config(function($stateProvider, $urlRouterProvider) {

  $urlRouterProvider.otherwise('/master');

  // States …

});
```

With `$urlRouterProvider.otherwise('/master');` we establish a default route for our app. Therefore, when we try to input an inexistent URL/state the app will show the MasterDetail example. This also works as the index/landing page since we will not define any state for the route `/`.

Finally, we have the most awaited part, the *ui-router* states for Onsen UI pages:

```javascript
$stateProvider

  // Tab 1 - MasterDetail example - Navigator init
  .state('navigator', {
    abstract: true,
    // url: '/navigator', // Optional url prefix
    resolve: {
      loaded: function($rootScope) {
        $rootScope.myTabbar.setActiveTab(0);
        return $rootScope.myTabbar.loadPage('html/tab1.html');
      }
    }
  })

  // Tab 1 - MasterDetail example - List of items
  .state('navigator.master', {
    parent: 'navigator',
    url: '/master',
    onEnter: ['$rootScope', function($rootScope) {
      $rootScope.myNavigator.resetToPage('html/master.html');
    }]
  })

  // Tab 1 - MasterDetail example - Item details
  .state('navigator.master.detail', {
    parent: 'navigator.master',
    url: '/detail/:index',
    onEnter: ['$rootScope','$stateParams', function($rootScope,$stateParams) {
      $rootScope.myNavigator.pushPage('html/detail.html', {'index': $stateParams.index});
    }],
    onExit: function($rootScope) {
      $rootScope.myNavigator.popPage();
    }
  })
```

Those are the states for the MasterDetail example. The very first state is called "navigator" but notice that it is an abstract state. It only provides some functionality and an optional URL prefix. In this state we are setting up the actual Navigator and linking it to the first tab of our Tabbar. The *ui-router*'s `resolve` property will wait until everything is finished so we ensure that the state won't change without a working Navigator. The truth is that we could combine "navigator" and "navigator.master" states together, but it is more readable in this way.

In the next states we have to play with `onEnter` and `onExit` properties in order to update the Navigator with `resetToPage()`, `pushPage()` and `popPage()`. As mentioned before, we can also pass parameters to states by using URLs like `'/master/detail/:index'` and the `$stateParams` service.

Similarly, the states for Sliding Menu will be as follows:

```javascript
  // Tab 2 - SlidingMenu example - SlidingMenu init
  .state('sliding', {
    abstract: true,
    // url: '/sliding', // Optional url prefix
    resolve: {
      loaded: function($rootScope) {
        $rootScope.myTabbar.setActiveTab(1);
        return $rootScope.myTabbar.loadPage('html/tab2.html');
      }
    }
  })

  // Tab 2 - SlidingMenu example - Landing page
  .state('sliding.main', {
    parent: 'sliding',
    url: '/main',
    onEnter: ['$rootScope', function($rootScope) {
      $rootScope.myMenu.setMainPage('html/main.html', {closeMenu: true});
    }]
  })

  // Tab 2 - SlidingMenu example - Example page 1
  .state('sliding.page1', {
    parent: 'sliding',
    url: '/page1',
    onEnter: ['$rootScope', function($rootScope) {
      $rootScope.myMenu.setMainPage('html/page1.html', {closeMenu: true});
    }]
  })

  // Tab 2 - SlidingMenu example - Example page 2
  .state('sliding.page2', {
    parent: 'sliding',
    url: '/page2',
    onEnter: ['$rootScope', function($rootScope) {
      $rootScope.myMenu.setMainPage('html/page2.html', {closeMenu: true});
    }]
  })
;
```

The first "sliding" state is similar to "navigator" state. It simply sets up the SlidingMenu as an abstract state. This time "main", "page1" and "page2" will be all siblings and direct childs of the Sliding Menu. Now we just need to map every `ui-sref` to `myMenu.setMainPage( … )`, and we use `onEnter` property again for this purpose. It would be also possible to have a "dynamic state" that receives the page name as a parameter (with `$stateParams`) and moves to it with `setMainPage( 'page' )` so we don't need a new state for every simple page that we have.

## Conclusion

As mentioned before, this was just one way to integrate Onsen UI with *ui-router*. Have you found this post useful or do you have any suggestion related to *ui-router* and Onsen UI? Please leave your impressions in the comments. Since *ui-router* is a great module and we would like to support it better, some updates to Onsen UI could come in next versions related to this topic. Stay tuned!

