---
author: patrick
date: 2016-07-15
id: "angular-2-components-release"
title: "Real time Chat App with OnsenUI and Horizon! ðŸš€"
category: announcement
tags: angular 2, components, onsenui, beta
---

![Onsen UI for Angular 2](/blog/content/images/2016/Jun/keyvisual_angular_2_20160621.png)

A lot of modern apps like Twitter or Facebook work in real time: They update themselves when new information is available without the user pulling to refresh. With modern real time database like [RethinkDB](http://rethinkdb.com) and the Javascript Framework [Horizon](http://horizon.io/) this task is as easy as writing any other Javascript Application. In this tutorial we will build a simple chat app with MobX and the React Components for OnsenUI.


<!-- more -->

The entire source code of the app is available at [Github](https://github.com/philolo1/Horizon-MobX-OnsenUI). Let us first understand how we actually want

## What is RethinkDB, Horizon.js?

RethinkDB is a real time database. The difference to a traditional database is the ability to listen to database changes. This makes real time updates very easy. Horizon is a javascript framework that makes it easier to interact with rethinkdb. You can install horizon by

```
$ npm install -g horizon
```

To start a simple horizon server in development mode type the following command:

```
$ hz serve --dev
```

In development mode there is no user authentication and no security rule. For this tutorial we are not going to deal with authentication, if you are interested to learn about it, please check the [documentation](http://horizon.io/docs/auth/).

To start horizon in our application we will need to just use the connect function

```
import Horizon from '@horizon/client';
const horizon = Horizon();


horizon.onReady(() => {
  console.log('horizon is ready');

});

console.log('connect horizon');
horizon.connect();
```

For the chat app we will create two tables, one for the rooms which contains just the room names with their ids, and a message that will contain the roomid the message and the user name.

To create a room and messages we can write some simple functions:

```js
createRoom: (roomName) => {
  horizon('chatRooms').store({ name: roomName })
}

createMessage: (authorName, roomID, message) => {
  horizon('messages').store({
    author: authorName,
    date: new Date(),
    message: message,
    roomID: roomID
  });
}
```

The function createRoom creates a simple room with the provided room name and `createMessage` creates a messag for the room. The interesting part is how we can listen to changes of the database. We want to get all the messages from one room ordered by their date:

```
horizon('messages').findAll({roomID: roomID}).order('date').watch().subscribe((data) => {
  // update messages here
});
```

The nice part about this is, that the function in subscribe will be called everytime the data is updated. In react we could just update the state and have updated data with almost no code.

Amazingly, this is almost all the backend code we will need for our App! Now lets start building using MobX and the React Components for OnsenUI.










## We love your feedback

