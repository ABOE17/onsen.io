---
author: andreas
date: 2016-03-08
id: react-onsen-ui-preview
title: "Preview of React Components for Onsen UI 2.0"
category: development
tags: onsen ui, react
---

![React Onsen UI](/blog/content/images/2015/Sep/react_onsenui.png)

React has gotten immensely popular in the last couple of years. I don't know how many times we have been asked if Onsen UI can be used with React or when we are going to add support for React. When we first announced Onsen UI 2.0 we promised that it will ship with React support and I am happy to say that we will fulfill that promise.

We have developed a collection of React components for Onsen UI 2.0. In this article we will take a look at some of them and show how they are used.

<!-- more -->

Onsen UI 1.x was built on top of Angular. The Angular dependency made it hard for us to develop React components for Onsen UI 1.x since Angular and React don't play well together, not to mention that the developer would be forced to load two libraries just to be able to use the components. With Onsen UI 2.0 this is not an issue anymore since the core library has been reimplemented in pure JavaScript as [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components).

The demos in this article are available [here](http://argelius.github.io/react-onsenui-demos/www/index.html). In case you missed it we released [automatic styling](https://onsen.io/blog/auto-style-app-onsen/) in the latest beta. The demos use the latest development version so they will be automatically styled based on the platform. To see it in action you can open DevTools in Chrome and change to an Android device. If you reload the page the components will automatically switch to Material Design.

### React

[React](https://facebook.github.io/react/) is a JavaScript library that is used to create reusable components. It is *reactive* in the sense that the components will update when the data changes. Unlike Angular it is not a full-fledged frontend framework but instead only provides APIs to create components. This gives the developer a lot of freedom in choosing the rest of the technologies used in an app.

Since React is easy to use with other technologies there is a large ecosystem of libraries and tools. You can get routing using the [React router](https://github.com/reactjs/react-router) library and state management with [Redux](https://github.com/reactjs/redux).

To learn more about React, please refer to the [documentation](https://facebook.github.io/react/docs/getting-started.html).

### Not just a wrapper

The React extension for Onsen UI 2.0 is not just a simple wrapper. The Web Components in Onsen UI 2.0 are created using the [Custom Elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements) API. We use this API to create new HTML tags and give them functionality. The behavior of the elements is controlled by setting the HTML attributes and calling methods attached to the elements.

Of course we could create React components that just wrap these elements and expose these methods. However, we don't believe this is a good idea since a lot of the methods don't fit into the philosophy of React. We want to make the APIs that the extension provides to make as much sense as possible for React developers.

We would love to know what you think about these components. You can try them out and play with them by cloning [this repository](https://github.com/argelius/react-onsenui-demos). If you think the interface is lacking or if you find some bugs, please let us know in our [forum](https://community.onsen.io/) or in the comments below.

This is a list of some of the components that have already been implemented:

* `OnsDialog`
Modal dialogs
* `OnsFab`
The [Floating action button](https://www.google.com/design/spec/components/buttons-floating-action-button.html) from Material Design
* `OnsInput`
Input elements such as text inputs, checkboxes and radio buttons
* `OnsNavigator`
Stack based navigation
* `OnsPullHook`
A "pull to refresh" component
* `OnsSwitch`
Draggable toggle switch
* `OnsTabbar`
Tab based navigation

### OnsNavigator

People who are familiar with Onsen UI knows that we have an element called `<ons-navigator>` that provides stack based navigation. Using the methods `pushPage()` and `popPage()` the app transitions back and forth between views.

Traditionally one would have to use the `<ons-template>` element to define the content of a page before using the `pushPage()` method. However, React doesn't use templates so it wouldn't make sense for us to expose this kind of API in React. Instead we have taken a look at the [Navigator](https://facebook.github.io/react-native/docs/navigator.html) component in React Native. It provides a very powerful API that gives the developer a lot of freedom in managing their page stack.

Here is a simple example of the `OnsNavigator` component in action.

<p style="text-align: center">
  <iframe style="margin: 0 auto; box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);" width="320" height="480" src="http://argelius.github.io/react-onsenui-demos/www/navigator.html"></iframe>
</p>

The component has a method called `pushPage(route)` which pushes a `route` object to an internal stack. The `route` object can be anything. To render the `route` object into a view the OnsNavigator requires a `renderScene` function which returns the rendered view.

#### Methods

Right now the OnsNavigator has two methods:

* `pushPage(route, options)` - Push a `route` object to the stack and trigger a transition animation. The `options` object can be used to control the animation.
* `popPage(options)` - Pops the `route` object from the top of the stack and transitions to the previous view.

We will add additional methods to get more fine-grained control of the page stack.

#### Props

* `initialRoute` - Define the first `route` in the stack.
* `renderScene` - Function that takes two arguments:
```javascript
(route, navigator) => <MyComponent title={route.title} data={route.data} />
```

We will also add a prop that let's you initialize the page stack with more than one page.

#### Usage

This is the code that is used in the example above. In this code the `renderScene` function returns the page inline but you can of course create a component that renders the page to make the function smaller.

```javascript
var App = React.createClass({
  render: function() {
    return (
      <OnsNavigator
        initialRoute={{
          title: 'First page',
          content: 'This is the first page!',
          backButton: false
        }}
        renderScene={(route, navigator) =>
          <OnsPage>
            <OnsToolbar>
              <div className="left">
                {route.backButton ? <ons-back-button></ons-back-button> : null}
              </div>
              <div className="center">{route.title}</div>
            </OnsToolbar>

            <p>{route.content}</p>

            <p>
              <ons-button onClick={navigator.pushPage.bind(navigator, {
                title: 'Another page',
                content: 'This is another page!',
                backButton: true
              })}>
                Push another page
              </ons-button>
            </p>
            { route.backButton ? <p>
              <ons-button onClick={navigator.popPage.bind(navigator)}>
                Go back
              </ons-button>
            </p> : null}
          </OnsPage>
        }
      />
    );
  }
});
```

### OnsTabbar

Onsen UI provides a number of components for page navigation. In addition to the `<ons-navigator>` element there is an element called `<ons-tabbar>` which is used for tab based navigation. Just like the `<ons-navigator>` it is traditionally used in conjunction with `<ons-template>` so we decided to provide a special interface for React that doesn't rely on templates.

The demo below uses the OnsTabbar component to render the tabs:

<p style="text-align: center">
  <iframe style="margin: 0 auto; box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);" width="320" height="480" src="http://argelius.github.io/react-onsenui-demos/www/tabbar.html"></iframe>
</p>

Similar to the OnsNavigator this component also requires the developer to provide a function in order for it to work. In this case the function is called `renderTabs` and has the following structure:

```
(activeIndex, tabbar) => [
  {
    content: <Home />,
    tab: <OnsTab label="Home" />
  },
  {
    content: <Comments />,
    tab: <OnsTab label="Comments" />
  },
  ...
]
```

It needs to return an array of objects where each object has the following structure:

```javscript
{
  content: <SomeComponent />,
  tab: <OnsTab ... />
}
```

#### Methods

The OnsTabbar component provides methods to change the active tab and to get the current active tab index.

* `setActiveTab(index, options)` - Change the active tab to `index`. The `options` object can be used to select the transition animation.
* `getActiveTabIndex()` - Return the current active tab index.

#### Props

* `initialIndex` - Specify the tab that is opened initially.
* `renderTabs` - A function that returns an array of tabs and their content.

#### Usage

Code for the demo above:

```javascript
var MyPage = React.createClass({
  render: function() {
    return (
      <OnsPage>
        <OnsToolbar>
          <div className="center">{this.props.title}</div>
        </OnsToolbar>

        <p>
          {this.props.content}
        </p>
      </OnsPage>
    );
  },
});

var App = React.createClass({
  render: function() {
    return (
      <OnsTabbar
        initialIndex={1}
        renderTabs={(activeIndex, tabbar) => [
            {
              content: <MyPage title="Home" content="Home content" />,
              tab: <OnsTab label="Home" />
            },
            {
              content: <MyPage title="Comments" content="Comments content" />,
              tab: <OnsTab label="Comments" />
            }
          ]
        } />
    );
  }
});
```

### The components are composable

In complex apps there is often a need to combine tabs with stack based navigation. For example, you might want to use a navigator inside one of the tabs or in some cases you would want the tabbar to be one of the pages in the stack.

There is nothing stopping us from combining the OnsTabbar and the OnsNavigator component in the same app to enable more complex navigation. In the demo below we have one tab which is just a static page while the other tab contains a OnsNavigator component:

<p style="text-align: center">
  <iframe style="margin: 0 auto; box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);" width="320" height="480" src="http://argelius.github.io/react-onsenui-demos/www/both.html"></iframe>
</p>

To do this all we need to do is put the OnsNavigator inside the content of one of the tabs.

#### Code

The code for this demo is a bit longer but still pretty simple:

```javascript
var MyNavigator = React.createClass({
  render: function() {
    return (
      <OnsNavigator
        initialRoute={'first'}
        renderScene={(route, navigator) => {
          if (route === 'first') {
            return (
              <OnsPage>
                <p>Hello!</p>
                <ons-button onClick={navigator.pushPage.bind(navigator, 'second')}>Push</ons-button>
              </OnsPage>
            );
          }
          else {
            return (
              <OnsPage>
                <p>World!</p>
                <ons-button onClick={navigator.popPage.bind(navigator)}>Pop</ons-button>
              </OnsPage>
            );
          }
        }}
      />
    );
  }
});

var App = React.createClass({
  render: function() {
    return (
      <OnsTabbar
        initialIndex={1}
        renderTabs={(activeIndex, tabbar) => [
            {
              content: <OnsPage><p>Home</p></OnsPage>,
              tab: <OnsTab label="Home" />
            },
            {
              content: <OnsPage><MyNavigator /></OnsPage>,
              tab: <OnsTab label="Navigator"></OnsTab>
            }
          ]
        } />
    );
  }
});
```

### Conclusion

We're hope you are as excited as us about the React extension. As mentioned earlier we would like to get your feedback on the interface. Please share your thoughts in the comments or on the [forum](https://community.onsen.io/).

If you are an Angular 2 developer we are happy to say that we are developing components for Angular 2 as well. We will preview them as well in the coming weeks. Stay tuned!

If you like Onsen UI please leave us a star on [our GitHub page](https://github.com/OnsenUI/OnsenUI).
