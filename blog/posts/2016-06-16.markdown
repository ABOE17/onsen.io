---
author: ilia
date: 2016-06-14
id: "angular2-components-on-the-way"
title: "Onsen UI Angular 2 Components coming soon!"
category: announcement
tags: announcement, angular2, components, typescript, webpack, react, onsenui
---

![Onsen UI bindings](/blog/content/images/2016/Jun/angular2_release_completed_cycle.png)

Recently it may have looked like we've been focusing mainly on React, but we have also worked hard on bringing you components and directives for Angular 2. Next week they will be available through both `npm` and `monaca cli`.

Onsen 1.x was based on Angular 1, but with Onsen 2 we decided to take a different approach. We separated the core logic and styles, so that it can be used with any framework. We also started working on wrappers, so that it can be used in a more natural way in the most popular frameworks.

Vanilla JavaScript and Angular 1 have been supported for quite some time already. Recently we released [React Components](/react) and next week it's time for the long awaited Angular 2.

## Seamless integration between Angular 2 and Onsen UI

![Angular 2 and Onsen 2](/blog/content/images/2016/Jun/angular2_onsen.png)

We personally think that UI components should not be limited to a specific framework, but when used in one they should feel natural to use.

That is why when using Angular 2 Onsen UI components they will behave as if they were written entirely in Angular 2.

Using the directives will be as easy as:

```
import {ONS_DIRECTIVES} from 'angular2-onsenui';

@Component({
  directives: [ONS_DIRECTIVES],
  ...
})
```
And in the template you can use all of them naturally:

```
<ons-list>
  <ons-list-header>My Items</ons-list-header>
  <ons-list-item *ngFor="let item of items">
    {{item}}
  </ons-list-item>
</ons-list>
```

## But why Angular 2?
![Road to Angular 2](/blog/content/images/2016/Jun/road_to_angular.png)

Angular 1 was a big hit and a lot of people really liked some ideas which it brought to the table. One of the big downsides of Angular 1 was its performance. This issue has been addressed in the new version which is lightning fast.

Since it's a major version they also had the ability to improve the API in a way which would encourage the best practices. While in Angular 1 controllers, views, directives were all scattered now the components are self-sufficient entities.

Also for better or worse it seems that a large part of the community is heading towards using TypeScript in their projects. You can still use pure JavaScript (or Dart), so it's more of a matter preference rather than a requirement.

So if we try it out then what does TypeScript actually give us? Well in 3 words - types, decorators and autocomplete, at least when comparing to ES2015. While it may be more complex than that lets just leave it at that for now. In terms of Angular 2 the decorators (or annotations) are probably the most necessary feature, as they do increase the readability quite a bit.

As for module loaders - while in the [Angular 2 Tutorial](https://angular.io/docs/ts/latest/quickstart.html) they are using [System.JS](https://github.com/systemjs/systemjs), [webpack](https://webpack.github.io/) is also [supported](https://angular.io/docs/ts/latest/guide/webpack.html).

## So what does comes next?

Next week we will release all the things you need in order to quickly start developing your first Onsen UI Angular 2 app.
That includes:
 - Guides on how to get started
 - Documentation for all components and features
 - Command Line Interface to get you up and running as fast as possible
 - And of course the components themselves (as an `npm` package)

When we release we will look more in depth into what Angular 2 is actually giving us, as well as show you a simple app, so please look forward to it!
