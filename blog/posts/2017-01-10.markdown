---
author: keiji
date: 2017-01-10
id: monaca-file-transfer-plugin
title: "[Monaca] File Transfer Plugin"
product: monaca
tags: Monaca
category: monaca
---

You can now use Monaca File Transfer Plugin when uploading or downloading files with Monaca.
The File Transfer Plugin is included in Monaca's basic Cordova Plug-in and can be used at least with Basic plan.

# File Transfer Plugin's usage

First, you should enable the File Transfer Plugin from "Cordova Plugin Management". The File Transfer Plugin 
is used after the deviceready event.

```html
<script>
document.addEventListener("deviceready", onDeviceReady, false);
function onDeviceReady() {
    alert("File Transfer is now ready.");
}
</script>
```

# File Download

Here's the example of how to download images from Monaca project into temporary folder.

```html
<script>
    document.addEventListener("deviceready", onDeviceReady, false);
    function onDeviceReady() {

        // Source
        var uri = encodeURI("https://ja.monaca.io/img/index/img_1.jpg");
        // Target
        var fileURL = "cdvfile://localhost/temporary/img_1.jpg";

        // File download
        var fileTransfer = new FileTransfer();
        fileTransfer.download(
            uri,
            fileURL,
            function(fileSystem) {
                console.log("toURL=" + fileSystem.toURL());
                console.log("nativeURL=" + fileSystem.nativeURL);
                console.log("toInternalURL=" + fileSystem.toInternalURL());
            },
            function(error) {
                console.log("download error source " + error.source);
                console.log("download error target " + error.target);
                console.log("download error code " + error.code);
            },
            false,
            {}
        );

    }
</script>
```

The url set in download() must be encoded using encodeURI() function. Once the download is successful, you can retrieve the FileSystem of the downloaded file. With this, you are able to track down the download destination being set at the download.

When you set the value obtained by toInternalURL() to resolveLocalFileSystemURI, this will enable you to move or copy the downloaded files.

For information on copy or move file, you can refer to [Fileプラグインについて](https://ja.onsen.io/blog/monaca-file-plugin/).

# File Upload

Using the previous FileDownload example to perform image upload back to server as following:

```html
<script>
    document.addEventListener("deviceready", onDeviceReady, false);
    function onDeviceReady() {

        // Source
        var uri = encodeURI("https://ja.monaca.io/img/index/img_1.jpg");
        // Target
        var fileURL = "cdvfile://localhost/temporary/img_1.jpg";

        // File Download
        var fileTransfer = new FileTransfer();
        fileTransfer.download(
            uri,
            fileURL,
            function(fileSystem) {
                // File Upload
                uploadFile(fileSystem.toInternalURL());
            },
            function(error) {
                console.log("download error");
            },
            false,
            {}
        );

    }

    // File Upload
    function uploadFile(uploadFileURL) {
        var options = new FileUploadOptions();
        options.fileKey = "file";
        options.fileName = "img_1.jpg";
        options.mimeType = "image/jpeg";

        var params = {};
        params.value1 = "test";
        params.value2 = "param";

        options.params = params;

        var fileTransfer = new FileTransfer();
        fileTransfer.upload(uploadFileURL, encodeURI("http://server_domain/uploader.php"), onUploadSuccess, onUploadFail, options);
        function onUploadSuccess(result) {
            console.log("Code = " + result.responseCode);
            console.log("Response = " + result.response);
            console.log("Sent = " + result.bytesSent);
        }

        function onUploadFail(error) {
            console.log("An error has occurred: Code = " + error.code);
            console.log("upload error source " + error.source);
            console.log("upload error target " + error.target);
        }
    }
</script>
```

### Server-side script
```php:uploader.php
<?php
$uploaddir = '/uploads/';
$uploadfile = $uploaddir . basename($_FILES['file']['name']);

echo '<pre>';
if (move_uploaded_file($_FILES['file']['tmp_name'], $uploadfile)) {
    echo 'File is valid, and was successfully uploaded.\n';
} else {
    echo 'Possible file upload attack!\n';
}

echo 'Here is some more debugging info:';
print_r($_FILES);

echo '</pre>';

?>
```

File Transfer Plugin can be used for download and upload files. This could be helpful for application development.
