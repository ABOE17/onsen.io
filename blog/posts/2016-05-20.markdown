---
author: patrick
date: 2016-05-20
id: onsen-ui-environment-news
title: "Building Cordova apps with d with React Components for Onsen UI"
category: tutorial
tags: onsen ui, monaca cli, interactive tutorial
---

<!-- ![onsen_env](/blog/content/images/2016/May/onsenui_env.PNG) " -->

<!--
 -  INTRO: Add a basic description of Onsen UI and Monaca (for people who are visiting the site for the 1st time and don't know anything about it)
   - If you use TODO app > simplify it or describe some sections in detail, displaying the simplicity of development

TARGET AUDIENCE:
- Cordova users who are not familiar with React
- New coders looking for simple tools

Add screenshots (explanatory images)

Take care of keywords (SEO), but I can help you with edits at the end
-->

With Cordova it is easy to build functional hybrid apps for all the major mobile platforms, including Android, iOS and Windows phone. Making the apps look good, is a much harder tasks. With the help of the  [Monaca CLI](https://monaca.io/debugger.html) and [React Components for Onsen UI](https://onsen.io/v2/react.html) this now gets much easier. In this blog post we are going to look at some aspects of why it might be a good idea to use these technologies.

<!-- more -->


### What is React?

React is a library that help developers to structure and manage their Javascript applications. It is also highly performant. A React applications consists of components that have a so called render functions. Lets look at a small example:

```
var Example = React.createClass({
  render: function() {
    return (
       <div> Our first react example</div>
    );;
  }
});

ReactDOM.render(<Example />, document.getElementById('content'));

```

All this code does is to look at our `html` file and put the html `<div> Our first react example </div>` in the element with the id `content`. The syntax is called JSX and is an extension of Javascript that enables us to create React components and html elements in a more readable way.

What makes React Components very unique is that they have so called `properties` and `states`. Let us look at properties first. A property enables us to make the rendering of a component configurable. For example,  we could make the text dependent on a property:


```
var Example = React.createClass({
  render: function() {
    return (
       <div> {this.props.text} </div>
    );;
  }
});

ReactDOM.render(
  <div>
    <Example text='first'/>
    <Example text='secont'/>
  </div>,
  document.getElementById('content')
);

```
This will produce a simple html with two divs one containing 'first' and the other containt 'second'. These is nice for capsulating code, but the power of React relies in the state Managment. A state of an component is some information that could change over time. Imagine a simple counter component that contains text and a button. The text contains initially 0 and every time the button is pressed the counter is increased. The code is quite simple:

```
var Counter = React.createClass({
  getInitialState: function() {
    return {counter: 0};
  },
  increaseCounter: function() {
    this.setState({
      counter: this.state.counter + 1
    });
  },
  render: function() {
    return (
      <div>
        <div> {this.state.counter} </div>
        <button onClick={this.increaseCounter}> Add </button>
      </div>
    );
  }
});
```

Here is what the example looks like:

<iframe width="320" height="568" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);" src="https://philolo1.github.io/react-simple-counter/composition.html"></iframe>

Every time the state changes, React rerenders. This might sound like a slow process, but actually it is quite fast, since react uses the concepts of [Virtual DOM](https://facebook.github.io/react/docs/glossary.html). With this concept react is able to determine what changes have been made to the dom and rerender only what is necessary.

### What is Onsen UI
React is pretty great and fast and helps to organize the application, but it does not provide any UI components. That is where Onsen UI comes in. We have created many components that with a mobile feel like Navigation, Tabbar, Splitter (Sliding Menu) and tons of other componets. These components integrate flawlessly with React.

Lets look at a simple login Page:



For example to create a simple login Page:

```
<style>
  #login ons-input {
    margin-top: 10px;
    width: 100%;
  }
  #login ons-input[modifier~=material] {
    margin-top: 17px;
  }
  #login ons-button {
    margin-top: 7px;
  }
  #login .page__content {
    text-align: center;
    width: 90%;
    margin: 0 auto 0;
  }
</style>
```

```
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Page,
  Button,
  Toolbar,
  Icon,
  Input,
  ToolbarButton,
  Row
} from 'react-onsenui';

// load Onsen UI library
import ons from 'onsenui';

var LoginPage = React.createClass({
  getInitialState: function() {
    return {
      email: '',
      password: ''
    };
  },

  signIn: function() {
    ons.notification.alert({
      message: `You entered '${this.state.email}' & '${this.state.password}' `
    });
  },

  forgotPassword: function() {
    ons.notification.prompt({
      message: 'What is your email?',
      callback: function(email) {
        ons.notification.alert({
          message: 'The new password will be send to ' + email
        });
      }
    });
  },

  emailChange: function(event) {
    this.setState({
      email: event.target.value
    });
  },

  passwordChange: function(event) {
    this.setState({
      password: event.target.value
    });
  },

  render: function() {
    return (
       <div class="tile">
         <Page id="login"
           renderToolbar={() =>
             <Toolbar>
               <div className="center">Login</div>
               <div className="right">
                 <ToolbarButton onClick={this.signIn}>
                   <Icon icon={{default: 'ion-log-in', material: 'md-sign-in'}} />
                 </ToolbarButton>
               </div>
             </Toolbar>
             }>

           <Input value={this.state.email} onChange={this.emailChange} placeholder="Email" type="text" modifier="underbar" float />
           <Input value={this.state.password} onChange={this.passwordChange} placeholder="Password" type="password" modifier="underbar" float />
           <Button onClick={this.signIn} modifier="large">Sign In</Button>
           <Button onClick={this.forgotPassword} modifier="quiet">Forgot password?</Button>
          </Page>
        </div>
    );
  }
});

ReactDOM.render(<LoginPage />, document.getElementById('app'));
```

The result will look like this

<iframe src="http://philolo1.github.io/OnsenUI-React-Login-Sample-Screen/www/index.html' >
</iframe>


// Mention todo app?


### Monaca

To get started we first need to install the [Monaca CLI](https://monaca.io/debugger.html), which will be used to create/build and preview the project.

```
$ npm install -g monaca
```

Now we will  create a simple sample app by typing `monaca create sample` and choose react and the navigation example.

![cli steps](/blog/content/images/2016/May/cli_create.png)

To run the project you need to simply run:

```
$ cd sample;
$ monaca preview
```


// refrence to tutorial???

### Conclusion

React is a great framework and worth to know it. With Onsen UI and Monaca one can build a great framework. Give it a try and tell us about what you feel. We have a great community and


### Further resources

link to react
link to community


