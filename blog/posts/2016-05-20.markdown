---
author: patrick
date: 2016-05-20
id: onsen-ui-environment-news
title: "Building Cordova apps with with React Components for Onsen UI"
category: tutorial
tags: onsen ui, monaca cli, interactive tutorial
---

<!-- ![onsen_env](/blog/content/images/2016/May/onsenui_env.PNG) " -->

<!--
 -  INTRO: Add a basic description of Onsen UI and Monaca (for people who are visiting the site for the 1st time and don't know anything about it)
   - If you use TODO app > simplify it or describe some sections in detail, displaying the simplicity of development

TARGET AUDIENCE:
- Cordova users who are not familiar with React
- New coders looking for simple tools

Add screenshots (explanatory images)

Take care of keywords (SEO), but I can help you with edits at the end
-->

With Cordova it is easy to build functional hybrid apps for all the major mobile platforms, including Android, iOS and Windows Phone. However, making the apps look good, is a much harder tasks. Luckly, With the help of the [Monaca CLI](https://monaca.io/debugger.html) and [React Components for Onsen UI](https://onsen.io/v2/react.html) this now gets much easier. In this blog post we are going to look at some aspects of why it might be a good idea to use these technologies.

<!-- more -->


### What is React?

React is a library that help developers to structure and manage their Javascript applications. A React applications consists of components that have a so called render functions. Lets look at a small example:

```
var Example = React.createClass({
  render: function() {
    return (
       <div> Our first react example</div>
    );;
  }
});

ReactDOM.render(<Example />, document.getElementById('content'));

```

What this code does is that is searches for the element with the id `content` in our html tree and renders the React component inside it. In our example the component will render to `<div> Our first react example </div>`. React uses a special syntax syntax is called JSX. JSX is basically an extension of Javascript that enables us to create React components and html elements in a more readable way.

Every React component has so called *properties* and *states*. Let us look at properties first. A property enables us to make the rendering of a component configurable. For example,  we could make the text dependent on a property:

```
var Example = React.createClass({
  render: function() {
    return (
       <div> {this.props.text} </div>
    );
  }
});

ReactDOM.render(
  <div>
    <Example text='first'/>
    <Example text='secont'/>
  </div>,
  document.getElementById('content')
);

```
With this code, a `div` with two `div`'s will be rendered into the DOM. The first `div` will contain the text 'first' while the other `div` will contain the text 'second'. These properies make it easy to reuse components and save a lot of code.

What makes React so powerful is so so called `state`. One can think of the state as a class variable that influences the rendering: Every time the state changes, the component is rerenderd.

Lets have a look at an example. Imagine we want to build a simple counter component. This component should consist of a text and a button. The state of the application is the counter number. Initially it is 0 and every time the button is pressed, it is increased by one. Each time the button is pressed the counter is increased. The counter number will be displayed as the text. The corresponding code is quite simple:

```
var Counter = React.createClass({
  getInitialState: function() {
    return {counter: 0};
  },
  increaseCounter: function() {
    this.setState({
      counter: this.state.counter + 1
    });
  },
  render: function() {
    return (
      <div>
        <div> {this.state.counter} </div>
        <button onClick={this.increaseCounter}> Add </button>
      </div>
    );
  }
});
```

Here is what the example looks like:

<iframe width="320" height="60" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);" src="https://philolo1.github.io/react-simple-counter/"></iframe>

The fact that React rerenders every time the state changes, might sound like a slow process, but actually it is quite fast. This is because react does not rerender everything, but oly those elements which properties have changed. React uses the concepts of the so called [Virtual DOM](https://facebook.github.io/react/docs/glossary.html) and uses and [advanced diff algorithm ](http://calendar.perfplanet.com/2013/diff/) to determine which elements have changed. With this concept react is able to determine what changes have been made to the dom and rerender only what is necessary.

To learn more about React, we recommend to have a look at the [website] (https://facebook.github.io/react/).

### What is Onsen UI?
React is pretty great library to write structured and efficient code, but it does not provide any UI components. That is where Onsen UI comes in. We have created many components with a mobile feel like Navigation, Tabbar, Splitter (Sliding Menu) and tons of other componets. These components style [automatically depending on the platform](https://onsen.io/blog/auto-style-app-onsen/).  These components integrate flawlessly with React.

We will build a simple login app, that will look like this:


<div style="display: flex; justify-content: center;">
<iframe src="https://philolo1.github.io/frame-auto-style/?platform=ios&src=https://philolo1.github.io/OnsenUI-React-Login-Sample-Screen/www/index.html" scrolling="no" style="border: 0; width: 400px; height: 800px;"></iframe>
</div>

Lets first look at the Javascript/React code first:

```
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Page,
  Button,
  Toolbar,
  Icon,
  Input,
  ToolbarButton,
  Row
} from 'react-onsenui';

// load Onsen UI library
import ons from 'onsenui';

var LoginPage = React.createClass({
  getInitialState: function() {
    return {
      email: '',
      password: ''
    };
  },

  signIn: function() {
    ons.notification.alert({
      message: `You entered '${this.state.email}' & '${this.state.password}' `
    });
  },

  forgotPassword: function() {
    ons.notification.prompt({
      message: 'What is your email?',
      callback: function(email) {
        ons.notification.alert({
          message: 'The new password will be send to ' + email
        });
      }
    });
  },

  emailChange: function(event) {
    this.setState({
      email: event.target.value
    });
  },

  passwordChange: function(event) {
    this.setState({
      password: event.target.value
    });
  },

  render: function() {
    let toolbarButton;

    if (!ons.platform.isAndroid()) {
      toolbarButton = <ToolbarButton onClick={this.signIn}>
        <Icon icon={{default: 'ion-log-in'}} />
      </ToolbarButton>;
    }
    return (
       <div class="tile">
         <Page id="login"
           renderToolbar={() =>
             <Toolbar>
               <div className="center">Login</div>
               <div className="right">
                 {toolbarButton}
               </div>
             </Toolbar>
             }>

             <img id='logo' src='img/logo_react.png' />
             <div id='logoTitle'>
               <img src='img/logo_title.png' />
             </div>

           <Input value={this.state.email} onChange={this.emailChange} placeholder="Email" type="text" modifier="underbar" float />
           <Input value={this.state.password} onChange={this.passwordChange} placeholder="Password" type="password" modifier="underbar" float />
           <Button id='signIn' onClick={this.signIn} modifier="large">Sign In</Button>
           <Button id='forgetBtn'  onClick={this.forgotPassword} modifier="quiet">FORGOT PASSWORD?</Button>
          </Page>
        </div>
    );
  }
});

ReactDOM.render(<LoginPage />, document.getElementById('app'));
```

The page contains two input fields, one for the email and one for the password. In the internal state the password and email is saved. Furthermore, there is a login button. When the login button is clicked, the onClick property is called, which is bound to the classes signIn function. We use [ons.notification](https://onsen.io/v2/docs/js/ons.notification.html) to show a simple information dialog after showing the page.

To make the app look good, we add some CSS:

```css
<style>
    .text-input--material__label {
      color: #05c1e3;
    }
       .navigation-bar--material {
      background:  #05c1e3;
    }

    .navigation-bar--material  {
      color: '#05c1e3';
    }

    #logoTitle {
      margin-bottom: 20px;
    }

    #login ons-icon {
      color: #05c1e3;
    }

    #logo {
      margin-top: 28px;
    }
    #login ons-input {
      height: 42px;
      width: 100%;
    }

    #signIn {
      margin-top: 20px;
      background: #05c1e3;
    }

    #forgetBtn {
      color: #05c1e3;
      margin-top: 28px;
      font-size: 14px;
      line-height: 12px;
    }
    #login .page__content {
      text-align: center;
      width: 80%;
      margin: 0 auto 0;
    }
    .text-input--material:focus {
      background-image: -webkit-linear-gradient(#05c1e3, #05c1e3), -webkit-linear-gradient(bottom, transparent 1px, #afafaf 1px);
    }

</style>
```

And this is it. The app is ready and now only needs to be build build and published.
// Mention todo app?

### What is Monaca?

To help speeding up the bulid and publish process, the [Monaca CLI](https://monaca.io/debugger.html) can be used.  Monaca is a toolset that whole hybrid app development progress from setting up the the project to deploting the app on the phone.

To get started we first need to install the [Monaca CLI](https://monaca.io/debugger.html), which will be used to create/build and preview the corva project.

```
$ npm install -g monaca
```

Now we will create a simple sample app by typing `monaca create sample` and choose react and the navigation example.

![cli steps](/blog/content/images/2016/May/cli_create.png)

To run the project in the end we can simply run the following commands:

```
$ cd sample;
$ monaca preview
```

In additon to the monaca provides many other services and tools like a fully functional cloud IDE. Check out [the website](https://monaca.io).

### Conclusion

React is a great framework for building fast and structured Javascript applications. The usage of Onsen UI and Monaca can improve the experience of Cordova development. Give it a try and tell us about what you you thingk. We have a great [community](https://community.onsen.io/), that is eager to help you with all the questions you might have. Its also worth to check out our open source repo for [Onsen UI](https://github.com/OnsenUI/OnsenUI) and the [React Components](https://github.com/OnsenUI/react-onsenui).
