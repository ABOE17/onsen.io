---
author: andi
date: 2015-02-19
id: onsen-ui-google-maps-javascript-api-v3-angularjs-sample-application
title: "Creating Google Maps Sample App with AngularJS and Onsen UI"
---

![Onsen UI + Google Maps Intro](/blog/content/images/2015/Feb/Screen_Shot_2015_02_06_at_2_18_43_PM.png)

This sample application has the purpose of demonstrate how to combine elements of [Onsen UI](http://onsen.io/), a framework for creating hybrid HTML5 apps, [AngularJS](https://angularjs.org/), a JavaScript framework developed by [Google](https://www.google.com), and [Google Maps JavaScript API v3](https://developers.google.com/maps/documentation/javascript/).

This application has been developed using [Monaca](https://monaca.io/), a cloud based mobile app development environment that supports iOS/Android/Windows 8 hybrid apps in one source. The benefit of using [Monaca](https://monaca.io/) to develop this sample application is dictated by the fact that this product provides a native support for [Onsen UI](http://onsen.io/), default templates and user-friendly development environment that allow the programmer to skip the installation and configuration of the frameworks used in this project.

The features implemented in this application are quite simple: the purpose is not to create a large application with complicated features, but to create a template which can be extended in the future. That's why some elements, like the search bar and the settings page, have only been implemented without offering any real functionality but, at the same time, are ready to be associated with any behaviour the programmer wishes to implement.

<iframe style="background-image: url('http://s3.asial.co.jp/~ataru/my_image/nexus5.png'); padding: 65px 9px 58px 11px;  display:block; margin:auto;margin-top:30px; border:none;" src="http://andipavllo.github.io/Google-Maps-Onsen-UI-Sample/www/index.html"  width="359" height="640" scrolling="no"></iframe>

The implemented features are:

* Add Marker, via screen long press
* Delete single Marker, via screen press (on the Marker)
* Delete all Markers, via `<ons-button>`
* Calculate the distance (partial and total) between the Markers, via `<ons-button>`
* Menu, via `<ons-sliding-menu>`

The main interface consists of an `<ons-sliding-menu>` associated with two pages: `map.html` and `settings.html`. The first one will contain the map element and Onsen UI elements like `<ons-button>`. The user is free to navigate between these two pages using the sliding menu element.

You can try the app using the sample above, or directly from the browser by clicking [here](http://andipavllo.github.io/Google-Maps-Onsen-UI-Sample/www/index.html). The code is also available on GitHub at this [link](https://github.com/andipavllo/Google-Maps-Onsen-UI-Sample).

Except the HTML content illustrated above, the application contains other two key elements: `controller.js` and `style.css`.

###Controllers

The controllers contain the logic of the application. To build this app we need two controllers, one for the management of the `ons-sliding-menu` and one for the map interaction. Both controllers can be found in the file `controller.js`.

####SlidingMenuController

One of the biggest trouble of having a `ons-sliding-menu` element and a `Google Map` element is that both have an event associated with the scroll action, in this case the horizontal one. That's why is mandatory the creation of a controller to adapt the behaviour of the sliding menu swipe functionality to the current situation.
Adding a listener on the element that controls every time a `'postopen'` or `'postclose'` event is triggered is the way to fix this issue. The sliding menu swipe functionality is disabled by default, it will be enabled only after the menu is opened from a `ons-toolbar-button` click and will be available only until the menu is closed, via swipe or again via `ons-toolbar-button`. The listener is created after the first time the sliding menu has been opened.

####MapController

This controller contains all the logic related to the map object and the interactions with the Onsen UI elements.
The first step is the declaration of the Markers array, which will be used later, and of the map element. To initialize the map we had to use AngularJS's timer service `$timeout` and put a delay of **100ms** before the map's initialization. This step is necessary because AngularJS's controller initialization occur before the **DOM** is loaded.

After the map is loaded, is necessary to add a listener releated with the hard press event, which is associated with adding a new Marker. To implement this feature we have used the library [Hammer.JS](http://hammerjs.github.io/), which is natively included in Onsen UI.

After the map's initialization occurred, the user is free to perform the basic implemented features that were listed before. Each one of these features is associated with a method, more precisely `$scope.addOnClick()`, `$scope.deleteAllMarkers()` and  `$scope.calculateDistance()`. 

The first method, `$scope.addOnClick()`, is associated with the listener that was introduced above. First of all it takes the X and Y value of the hardclicked/hardpressed point on the screen and try to convert it in latitude and longitude coordinates. This step is necessary because the points displayed on **Google Maps** are encoded with this format. To perform this action, we use the function:

```
$scope.overlay.getProjection().fromContainerPixelToLatLng(point);
```

Is important to consider that the coordinates origin will start from the top-left point of the `div` when the map is contained, and not from the top-left of the device's screen. That's why, when we take the Y coordinate, we have to decrease is by `(-) 44px`, since 44px is the height of the `<ons-toolbar>` element which is situated on the top of the screen.
After the coordinates conversion, our marker is ready to be added in the markers array and to be displayed on the map.

At this point is necessary create a listener associated with the click/press event on one of the markers. If a marker will be pressed, a `ons.notification.confirm` element will appear, asking the user is he wants to delete the marker. Based with the user's choice, the relative action will be executed and an `ons.notification.alert` element will be displayed.

The method `$scope.deleteAllMarkers()` is very simple: it just scans the marker's array and deletes any marker from the map. At the end, it deletes all the elements from the array and initialize the index variable to it's initial value.

The last method is `$scope.calculateDistance()`, which calculates the distance from two or more markers in the map, using a formula that can easy be found on the web. To perform this operation we don't need to perform any conversion, as we did before, cause the coordinates are expressed with the same encoding elaborated by the formula.
After the elaboration is over, a `ons.notification.confirm` element will ask the user if he wants to see also the partial distances between the markers. The results of this choice will be again displayed with a `ons.notification.alert` element.

```
// controller.js

(function() {
    var app = angular.module('myApp', ['onsen']);
  
    //Sliding menu controller, swiping management
    app.controller('SlidingMenuController', function($scope){
      
        $scope.checkSlidingMenuStatus = function(){
          
            $scope.slidingMenu.on('postclose', function(){
                $scope.slidingMenu.setSwipeable(false);
            });
            $scope.slidingMenu.on('postopen', function(){
                $scope.slidingMenu.setSwipeable(true);
            });
        };
      
        $scope.checkSlidingMenuStatus();
    });

    //Map controller
    app.controller('MapController', function($scope, $timeout){
      
        $scope.map;
        $scope.markers = [];
        $scope.markerId = 1;
          
        //Map initialization  
        $timeout(function(){
      
            var latlng = new google.maps.LatLng(35.7042995, 139.7597564);
            var myOptions = {
                zoom: 8,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            $scope.map = new google.maps.Map(document.getElementById("map_canvas"), myOptions); 
            $scope.overlay = new google.maps.OverlayView();
            $scope.overlay.draw = function() {}; // empty function required
            $scope.overlay.setMap($scope.map);
            $scope.element = document.getElementById('map_canvas');
            $scope.hammertime = Hammer($scope.element).on("hold", function(event) {
                $scope.addOnClick(event);
            });
            
        },100);
    
        //Delete all Markers
        $scope.deleteAllMarkers = function(){
            
            if($scope.markers.length == 0){
                ons.notification.alert({
                    message: 'There are no markers to delete!!!'
                });
                return;
            }
            
            for (var i = 0; i < $scope.markers.length; i++) {
                            
                //Remove the marker from Map                  
                $scope.markers[i].setMap(null);
            }
            
            //Remove the marker from array.
            $scope.markers.length = 0;
            $scope.markerId = 0;
            
            ons.notification.alert({
                message: 'All Markers deleted.'
            });   
        };
    
        $scope.rad = function(x) {
            return x * Math.PI / 180;
        };
        
        //Calculate the distance between the Markers
        $scope.calculateDistance = function(){
            
            if($scope.markers.length < 2){
                ons.notification.alert({
                    message: 'Insert at least 2 markers!!!'
                });
            }
            else{
                var totalDistance = 0;
                var partialDistance = [];
                partialDistance.length = $scope.markers.length - 1;
                
                for(var i = 0; i < partialDistance.length; i++){
                    var p1 = $scope.markers[i];
                    var p2 = $scope.markers[i+1];
                    
                    var R = 6378137; // Earth’s mean radius in meter
                    var dLat = $scope.rad(p2.position.lat() - p1.position.lat());
                    var dLong = $scope.rad(p2.position.lng() - p1.position.lng());
                    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos($scope.rad(p1.position.lat())) * Math.cos($scope.rad(p2.position.lat())) *
                    Math.sin(dLong / 2) * Math.sin(dLong / 2);
                    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                    totalDistance += R * c / 1000; //distance in Km
                    partialDistance[i] = R * c / 1000;
                }
                
                
                ons.notification.confirm({
                    message: 'Do you want to see the partial distances?',
                    callback: function(idx) {
                        
                        ons.notification.alert({
                            message: "The total distance is " + totalDistance.toFixed(1) + " km"
                        });
                        
                        switch(idx) {
                            case 0:
                                
                                break;
                            case 1:
                                for (var i = (partialDistance.length - 1); i >= 0 ; i--) {
                                    
                                    ons.notification.alert({
                                        message: "The partial distance from point " + (i+1) + " to point " + (i+2) + " is " + partialDistance[i].toFixed(1) + " km"
                                    });
                                }
                                break;
                        }
                    }
                });
            }
        };
        
        //Add single Marker
        $scope.addOnClick = function(event) {
            var x = event.gesture.center.pageX;
            var y = event.gesture.center.pageY-44;
            var point = new google.maps.Point(x, y);
            console.log(x + " - " + y);
            var coordinates = $scope.overlay.getProjection().fromContainerPixelToLatLng(point);
            
            console.log(coordinates.lat + ", " + coordinates.lng);
            
            var marker = new google.maps.Marker({
                position: coordinates,
                map: $scope.map
            });
            
            marker.id = $scope.markerId;
            $scope.markerId++;
            $scope.markers.push(marker);
            
            $timeout(function(){
                //Creation of the listener associated to the Markers click
            google.maps.event.addListener(marker, "click", function (e) {
                ons.notification.confirm({
                    message: 'Do you want to delete the marker?',
                    callback: function(idx) {
                        switch(idx) {
                            case 0:
                                ons.notification.alert({
                                    message: 'You pressed "Cancel".'
                                });
                                break;
                            case 1:
                                for (var i = 0; i < $scope.markers.length; i++) {
                                    if ($scope.markers[i].id == marker.id) {
                                        //Remove the marker from Map                  
                                        $scope.markers[i].setMap(null);
                         
                                        //Remove the marker from array.
                                        $scope.markers.splice(i, 1);
                                    }
                                }
                                ons.notification.alert({
                                    message: 'Marker deleted.'
                                });
                                break;
                        }
                    }
                });
            });
            },1000);

            
        };
    });
})();

```

###CSS

Except the default **CSS sheet** provided by default by Onsen UI, it's necessary to define new style properties for the **DOM** elements. The content of the CSS can be found in `style.css`. The main purpose of this sheet is to dispose in a proper way the elements of the Google Maps JavaScript API v3 and of Onsen UI. A full fusion is not possible cause of the differences between the two products, that's why is necessary to define two layers in which display the different elements.

The lower layer will contain the Google Maps elements, like the map and the markers, meanwhile the upper layer will contain Onsen UI elements. This action has been performed mainly thanks to the `z-index `property: assigning a lower `z-index` value to the maps elements will push them in lower level then the Onsen UI elements, which have a higher value.

Is very important to specify the position of Onsen UI's elements correctly, as to not overlap them on Google Maps's ones. It's also very important to consider the resolution of the screen to position the elements correctly.
Also the element's size is very important, for example a `div` that is too big will overlay the map, making impossible any interaction with it.

```
#map_canvas {
    position: absolute; 
    width:100%; 
    height: 100%; 
    margin: 0; 
    padding: 0;   
    z-index: -1
}

.search-input-map{
    width:60%;
    z-index:1;
    margin-left: auto;
    margin-right:auto;
}

.par-search{
    margin-top:10%
}

.par-buttons{
    position: absolute; 
    text-align: center; 
    width:100%; 
    bottom:0px
}

.btn-delete{
    z-index:1
}

.btn-distance{
    z-index:1; margin-left: 5px;
}
```


###HTML

The application is organized in four pages: `index.html`, `menu.html`, `map.html` and `settings.html`(which will not be described). Each one of these pages is a combination of HTML, Onsen UI and AngularJS elements. The structure of the application is based on Onsen's Sliding Menu template that can be found as a premade template in [Monaca](https://monaca.io/). I chose this template cause it seemed to me the most appropriate one, but nothing prohibits to use another one that adapts better to your idea of organization of the DOM.

####index.html

This is, of course, the main page of the application, the one loaded by default. Just after the HTML opening tag, we can find `ng-app="myApp"`, the directive used to auto-bootstrap an AngularJS application. This directive designates the root element of the application and is typically placed near the root element of the page - e.g. on the `<body>` or `<html>` tags.

After the scripts and css sheets inclusion, we need to include a **Google Map Key Script** in our application, in order to be able to display the map content. To be honest, from the last version of [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/), a key is no more mandatory but is highly recommended in order to monitor your data usage and purchase additional data quota. You can find additional information about how to obtain a **free Google Maps API Key** at this [link](https://developers.google.com/maps/documentation/javascript/tutorial#api_key).

The tag to include, in order to display the map, is:

```
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js"></script>
```

At this point we can analyze the body content. As you can see, inside the body there is only an `<ons-sliding-menu>` element. It is the root of all the Onsen UI's elements in the application and is characterized by some attributes as `var="slidingMenu"`, which is used for the **two way data binding** inside AngularJS, `menu-page="menu.html"` which is the page that contains the HTML of the sliding menu, and `main-page="map.html"`, which is the main page displayed by default. Furthermore, the menu, as explained before, is set by default as unswipeable by the attribute `swipeable="false"`. 

```
<!DOCTYPE HTML>
<html ng-app="myApp">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
        <script src="components/loader.js"></script>
        <link rel="stylesheet" href="components/loader.css">
        <link rel="stylesheet" href="css/style.css">
        <script type="text/javascript"
            src="https://maps.googleapis.com/maps/api/js">
        </script>
        <script src="scripts/controller.js"></script>
    </head>
    <body>
        <ons-sliding-menu swipeable="false" var="slidingMenu" menu-page="menu.html" main-page="map.html" side="left" type="overlay" max-slide-distance="200px">
        </ons-sliding-menu>
    </body>
</html>

```

####menu.html

This page contains the auto generated code for the `<ons-sliding-menu>` element. Inside it we can find a `<ons-list`> with two `<ons-list-item>` which contain the redirect at `map.html` and `settings.html`. In case you want to add more pages inside the application, it's necessary to create new items to permit an easy navigation of the app content.

```
<ons-page style="background-color: white">
    <ons-list>
        <ons-list-item
            modifier="tappable" class="list__item__line-height"
            onclick="slidingMenu.setMainPage('map.html', {closeMenu: true})">
            <i class="fa fa-home fa-lg" style="color: #666"></i>
            &nbsp; Map
        </ons-list-item>
        <ons-list-item
            modifier="tappable" class="list__item__line-height"
            onclick="slidingMenu.setMainPage('settings.html', {closeMenu: true})">
            <i class="fa fa-gear fa-lg" style="color: #666"></i>
            &nbsp; Settings
        </ons-list-item>
    </ons-list>
</ons-page>
```

####map.html

This is probably the most important page of the application, the one that contains the map and most of the Onsen UI's elements. At the top of it we can find the declaration of the controller `ng-controller="MapController"`. Considering that the controller is declared on the root element, his visibility will be extended to each element of the page.

Immediately over it we can find a `<ons-toolbar>` element, which contains the title of the page and an `<ons-toolbar-button>` which is designed to open and close the sliding menu. For this reason, inside the `<ons-toolbar>` is placed another controller declaration, precisely `ng-controller="SlidingMenuController"`.

The rest of the code is the one that displays the map, the search bar and the two `<ons-button>`.

```
<ons-navigator ng-controller="MapController">
   <ons-page>
        <ons-toolbar fixed-style ng-controller="SlidingMenuController">
            <div class="left">
                <ons-toolbar-button ng-click="slidingMenu.toggleMenu()"><ons-icon icon="bars"></ons-icon></ons-toolbar-button>
            </div>
            <div class="center">Map</div>
        </ons-toolbar>
        
        <div id="map_canvas"></div>
        
        <p class="par-search">
            <input type="search" class="search-input search-input-map">
        </p>
        
        <p class="par-buttons">
            <ons-button  class="btn-delete" ng-click="deleteAllMarkers()">
                Delete all markers        
            </ons-button>
            <ons-button class="btn-distance" ng-click="calculateDistance()">
                Distance      
            </ons-button>
        </p>   
    </ons-page>
</ons-navigator>
```

###Conclusion

With this sample application you have seen how to create an application using Onsen UI, Google Maps JavaScript API v3 and AngularJS. You have now a basic layout to customize as you wish. Just remember that a lot of features are already provided by Google Maps API, so check about them before trying to implement by yourself.
