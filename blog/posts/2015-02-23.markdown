---
author: fran
date: 2015-02-23
id: developing-hybrid-mobile-apps-with-onsen-ui
title: "Developing hybrid mobile applications with Onsen UI"
category: tutorial
---

[Este artículo en español](http://frandiox.com/onsen-ui-aplicaciones-moviles-hibridas/)

Hybrid mobile applications have become trendy in the last years. Writing native applications could be hard for casual developers, those who don't know too much about programming and just want to make a simple app (or not so simple) as quickly as possible. It requires learning different programming languages (and different ways to interact with each device) for every platform where you want to deploy your application, although it certainly has some advantages: best possible performance, full access to the device hardware, etc.

<!-- more -->

![OnsenUI-HTML5-CSS3-JS](/blog/content/images/2015/Feb/logo_cuadrado.png)

On the other hand, hybrid applications relies in a set of technologies that won't change regardless the platform, the same as in web applications: **HTML, CSS and Javascript**. And since this set of technologies is so common on the Internet we will find unlimited resources and tutorials about how to implement this or that, anything we need. We could even use any common tool or framework for web development also for hybrid apps, such as jQuery or AngularJS, thus making the development process much simpler and faster. Although hybrid apps are usually not as efficient as native ones, the truth is that current smartphones are powerful enough to run most of the applications we could imagine without noticing any difference.

In this post we are going to develop an example hybrid application (Memo app) to show how to use [Onsen UI](https://onsen.io), a framework to build quick and fancy User Interfaces. I am going to use [Monaca IDE](https://monaca.io/) to develop this application (you can create a [fully functional free account here](https://monaca.mobi/en/register/start)) since it works pretty well with Onsen UI and [its debugger](https://monaca.io/debugger.html) is just awesome. You can check and fix your app from the IDE itself or from your phone  (mobile debugger is available in [Play Store](https://play.google.com/store/apps/details?id=mobi.monaca.debugger) and [App Store](https://itunes.apple.com/app/monaca/id550941371?mt=8) for free) in a few seconds. Plus, for those who are not advanced mobile developers, Monaca will ease most of the process of importing plugins, debugging and building the application. If you prefer to use something different it's totally fine, just remember to manually include the libraries that we are going to need.

## Developing with Onsen UI and AngularJS

![OnsenUI_logo](/blog/content/images/2015/Feb/onsen_logo2.png)

Onsen UI is a HTML5 framework to create modern and usable User Interfaces, so that we don't need to fight too much with the appearance of our application. It keeps the UI development simple while we can focus in the functionality of the application itself. Onsen UI is meant to be used along with [AngularJS](https://docs.angularjs.org/guide/introduction), but it is also possible to use [jQuery](https://jquery.com/) or any other framework. Here we will use AngularJS but will only describe the tricky parts in order to focus on Onsen UI.

The application we will make is a Memo App where we can store a list of tasks, classify them by category, modify and delete. To do this we are going to use the following Onsen UI components:

* `ons-navigator`
* `ons-toolbar`
* `ons-sliding-menu`
* `ons-list`
* `ons-carousel`
* `ons-template`
* `ons-popover`

You can learn how these components work together, so you can, for example, include an sliding-menu only inside one specific page and not in the others, or make every element of a list into a carousel. [Here you have the description of all Onsen UI components](https://onsen.io/v1/reference/javascript.html), as well as some [quick styles](http://components.onsen.io/patterns/) that you may want to take a look at.
<img style="float: right" src="/blog/content/images/2015/Feb/tree.png">

We will use Onsen UI 1.2.1 in this example. First, [if you are using Monaca](http://onsen.io/guide/getting_started.html#c05bd), create a Onsen UI minimum template project in the Dashboard and open it. AngularJS is already included in the default libraries, so there is no need to do anything else. If you don't use Monaca just follow [these instructions to install Cordova and Onsen UI](http://onsen.io/guide/getting_started.html#cad72) and include the necessary libraries.

Before starting, let's explain how do we use AngularJS in this application. In AngularJS we bind every page or main element of our application to a [controller](https://docs.angularjs.org/guide/controller) that will store the necessary variables and functions for the scope related to the bound page. For example, in order to list our current tasks in the main page we will need to store an array of tasks in the scope related to the main page, i.e. the main page controller. We can also have functions in this controller to modify our array of tasks, such as delete or complete functions. However, sometimes it would be better to split this functionality into different controllers because, for example, we address the involved functionality in different pages but still need to access to the same data (for instance, adding a new task).

Therefore, we will need a way to allow communication between our controllers. In the current approach we use a [service](https://docs.angularjs.org/guide/services) to manage all the storage of the task itself and common functionality, so that our controllers will call this service any time they need to access or modify the task list. Every task and task list are objects defined in *models/Memo.js*, and each task object contains the needed information for the task itself, including name, category, description, creation date and whether it is completed or not. This is just an example and is not meant to be the best approach, so you can change the model as you want. The model is not related to Onsen UI so we won't speak too much about it here, although you can have a look to the code on Github.

Enough details so far, let's get down to work.

## Coding a Memo Application

All the code of this application is [available to download on Github](https://github.com/frandiox/OnsenUI-Memo-App). It is recommended to check it out if you have any doubt while reading this post. You may also want to play a little bit with the application to understand how it works before getting hands dirty:

<iframe style="background-image: url('/blog/content/images/2015/Feb/nexus5-1.png'); padding: 65px 9px 58px 11px;  display:block; margin:auto;margin-top:30px; border:none;" src="https://frandiox.github.io/OnsenUI-Memo-App/"  width="359" height="640" scrolling="no"></iframe>

All of the style and design is easily customizable!

### Approach and code

#### First element and welcoming page

In Onsen UI we should have **only one main element** that will decide the [pattern](http://onsen.io/guide/overview.html#ManagingMultiplePages) of our application in order to manage several pages. We could use a sliding menu to change between pages, a tab bar and so on. We will use the most common one, the navigation pattern, what will allow us to have a parent-child relationship between pages (we have a stack of pages and we can navigate from one to another). Therefore, we write our ons-navigator as the main element in our `index.html`:

```
<ons-navigator var="myNavigator">
  <ons-page>
    <ons-toolbar fixed-style>
      <div class="center">Memo Onsen UI App Example</div>
    </ons-toolbar>
        <div style="margin: auto; width: 95%;">
          <div class="margins">
            <span style="color:#666"><ons-icon icon="fa-check-square-o" size="22em"></ons-icon></span>
          </div>
        </div>
    <ons-button modifier="large--cta" onclick="myNavigator.resetToPage('slidingmenu.html')">Start</ons-button>
  </ons-page>
</ons-navigator>
```

We declare the name of our navigator with `var=”myNavigator”`, so we can refer to it later on as a global variable. Inside the navigator we will display a welcoming page (with `ons-page`) where we show the title of the app with an `ons-toolbar`.

***Tip #1 &#x219d;*** 
Notice that, even if we specify `class=”center”` for the title, the real style behavior is determined by the OS where the application is run. On iOS it will be displayed in the center, but on Android i'ts left-aligned.. To fix the title in the center we have specify `fixed-style` in the `ons-toolbar`

We could display a welcoming image as well, but let's show a simple icon using `ons-icon` instead. Onsen UI allow to display icons from [Ionicons](http://ionicons.com/) and [Fontawesome](https://fortawesome.github.io/Font-Awesome/) just like part of the font, so it will be displayed in any device. Our last element in this welcoming page will be a start button that will take us to the actual application. We use an `ons-button` for that and choose one of the possible [modifiers](http://codepen.io/onsen/pen/hLayx) to change its appearance. When the user clicks on this button, the navigator will change the current page to the next one. We use the method `resetToPage( … )` (instead of `pushPage( … )`) just to remove all the previous pages from the stack and start from zero in the page we specify (`slidingmenu.html`). With this we will prevent to return to the welcoming page by pressing any *“back”* button.

#### Menu

Once we have our first element and our first page, let's make the next pages that will be displayed after the welcoming page. The next one will be the main page where we will see all the tasks that our application stores. However, since we want to have a sliding menu in this page, we need to declare this element as the parent of the main page, what means that we will call this sliding menu first. To do so, let's create a `slidingmenu.html` page containing our actual sliding menu. Onsen UI allows you to create a new HTML page inside the `index.html` itself by using **templates**, what is quite handy. It works exactly in the same way but, if our pages are small, we can have them all in the same place.

```
<!-- SLIDING MENU -->
<ons-template id="slidingmenu.html">
  <ons-page>
    <ons-sliding-menu var="slidingMenu" swipeable="false" menu-page="menu.html" main-page="memo.html"  side="left" type="overlay" max-slide-distance="200px">
    </ons-sliding-menu>
  </ons-page>
</ons-template>
```

Our `ons-sliding-menu` will take the content of the menu itself from `menu-page=”menu.html”`, and this sliding menu will be displayed over `main-page=”memo.html”`. We set `swipeable=”false”` to avoid a conflict of sliding with our future *carousel*, but you can change this in anyway you need.

Let's see now the content of our `menu.html`:

```
<!-- MENU -->
<ons-template id="menu.html">
  <ons-page fixed-style style="background-color: white">
    <ons-toolbar fixed-style>
      <div class="center">Categories</div>
      <div class="right" style="margin-top:5px"><ons-button modifier="quiet" ng-click="slidingMenu.closeMenu()"><ons-icon icon="fa-chevron-left" size="25px" fixed-width="false" style="color: #5087c3"></ons-icon></ons-back-button></div>
    </ons-toolbar>

        <!-- List of items -->
    <ons-list id="categoryList" ng-controller="categoryController">
```
Static `ons-list-item`:

      <ons-list-item
        modifier="tappable" class="list__item__line-height"
        ng-click="setViewRefresh('*'); slidingMenu.closeMenu();">
        <i class="ion-home fa-lg" style="color: #666"></i>
        &nbsp; All
        <span class="item-label">{{countAll}}</span>
      </ons-list-item>
      <ons-list-item
        modifier="tappable" class="list__item__line-height"
        ng-click="setViewRefresh('~'); slidingMenu.closeMenu();">
        <i class="ion-checkmark" style="color: #666"></i>
        &nbsp; Completed
        <span class="item-label">{{completedCount ? completedCount : 0}}</span>
      </ons-list-item>
      <ons-list-header>
        <div style="text-align: center;"><ons-icon icon="ion-minus-round"></ons-icon></div>
      </ons-list-header>
      <ons-list-item
        modifier="tappable" class="list__item__line-height"
        ng-click="setViewRefresh('=', ' '); slidingMenu.closeMenu();">
        <i class="ion-qr-scanner fa-lg" style="color: #666"></i>
        &nbsp; No category
        <span class="item-label">{{countCategories[' '] ? (countCategories[' '].total - countCategories[' '].completed) : 0}} ({{countCategories[' '] ? countCategories[' '].total : 0}})</span>
      </ons-list-item>

Dynamic `ons-list-item` (with AngularJS' `ng-repeat`):

```
      <ons-list-item
        modifier="tappable" class="list__item__line-height"
        ng-click="setViewRefresh('=', item); slidingMenu.closeMenu();" ng-repeat="item in categoryList">
        <i class="ion-folder fa-lg" style="color: #666"></i>
        &nbsp; {{item}}
        <span class="item-label">{{countCategories[item].total - countCategories[item].completed}} ({{countCategories[item].total}})</span>
      </ons-list-item>
    </ons-list>
  </ons-page>
</ons-template>
```


Once again we use an `ons-template`, so this page will be located in `index.html`. Inside the `ons-toolbar` we just set the title of the menu and include a button to close it. This menu will allow to choose a certain view of our tasks based on task's category, and this category list will be accessed from `ng-controller="categoryController"`. There are 3 static views over the tasks: show all of them, show only the completed tasks and show the ones without a specified category. Of course, this is just an example, you can change them or even delete them without problem.

After these static views we define a repeatable `ons-list-item` (by using AngularJS' `ng-repeat` in the last `ons-item-list` in this code) that will iterate over our category list and display every category in the menu. Since we also want to display the number of tasks that each category has, we need to have that information in our `categoryController` as well. For instance, we have a counter variable called `countAll` that stores the total number of tasks in the memo app. Since this variable is stored in a service (`memoService`) and can be modified by several controllers (for example, when a task is created or deleted), we need to set a listener to this variable in `categoryController`, so that AngularJS will update its value automatically to the view everytime it is modified:

```
$scope.$watch(function() {
  return memoService.countRawMemo();
}, function(newValue) {
  $scope.countAll = newValue;
}, true);
```

Changes in the view will be held in `categoryController`'s method `setViewRefresh(...)`.

#### Main page

So far so good, let's look at the content of the main page, `memo.html`, where the actual task list will be displayed:

```
<ons-page ng-controller="memoController">
  <ons-toolbar fixed-style ng-controller="slidingMenuController">
    <div class="left"><ons-toolbar-button ng-click="slidingMenu.openMenu(); checkSlidingMenuStatus();"><ons-icon icon="bars"></ons-icon></ons-toolbar-button></div>
    <div class="center">My tasks</div>
    <div class="right">
      <ons-button modifier="quiet" onclick="myNavigator.pushPage('additem.html')">
          New <ons-icon icon="fa-plus-circle "></ons-icon>
      </ons-button>
    </div>
  </ons-toolbar>
```
Lists of carousel tasks:
```
  <p style="text-align: center; color: #999; font-size: 14px;">{{category_label}}</p>
  <div class="list-action-item" ng-hide="countFiltered">Nothing found</div>
  <ons-list>
    <ons-list-item modifier="tappable" ng-repeat="item in filteredMemo track by $index">
      <ons-carousel var="{{'carousel.id' + $index}}" swipeable style="height: 72px; width: 100%;" initial-index="1" auto-scroll>
```
For every task, level 0 of the carousel with 3 different actions (buttons):
```
        <ons-carousel-item class="list-action-menu">
          <!-- ACTIONS -->
          <div class="main-container">
            <div class="fixer-container">
              <div class="blockInline">
                <ons-button ng-click="deleteItem($index); carousel['id'+$index].setActiveCarouselItemIndex(1);">
                  Delete
                  <ons-icon icon="ion-trash-a"></ons-icon>
                </ons-button>
              </div>
              <div class="blockInline">
                <ons-button ng-click="carousel['id'+$index].setActiveCarouselItemIndex(1); completeItem($index);" ng-hide="item.completed">
                  Complete
                  <ons-icon icon="ion-checkmark-round"></ons-icon>
                </ons-button>
              </div>
              <div class="blockInline">
                <ons-button ng-click="setSelected($index); myNavigator.pushPage('itemdetails.html');">
                  Details
                  <ons-icon icon="ion-clipboard"></ons-icon>
                </ons-button>
              </div>
            </div>
          </div>
        </ons-carousel-item>
```
For every task, level 1 of the carousel with the basic information:
```
        <ons-carousel-item class="list-action-item" ng-click="setSelected($index); myNavigator.pushPage('itemdetails.html');">
          <div class="name">
            {{item.name}} <span class="desc"><ons-icon icon="ion-checkmark-round" ng-show="item.completed"></ons-icon></span>
          </div>
          <div class="desc">
            {{item.date.getFullYear() + "/" + (item.date.getMonth() + 1) + "/" + item.date.getDate()}}
          </div>
        </ons-carousel-item>
      </ons-carousel>
    </ons-list-item>
    </ons-list>
</ons-page>
```

Since this is a big and important page, it is preferable to set it in **its own file** instead of using `ons-template` inside `index.html`. In general, we will only include there relatively small things like the *sliding menu* and the *popover*. Either way, once again we use an `ons-toolbar` to set the title and a link to a new page (`additems.html`, explained later), but also a button to open the *sliding menu*.

***Tip #2 &#x219d;***
Here we have a little trick to make the ***sliding menu*** swipeable only when it's open and not when it's closed, so it doesn't conflict with the *carousels*. We prepare two events to change the behavior of the sliding menu like this:
```
myApp.controller('slidingMenuController', function($scope){
   $scope.slidingMenu.on('postclose', function(){ $scope.slidingMenu.setSwipeable(false); });
   $scope.slidingMenu.on('postopen', function(){ $scope.slidingMenu.setSwipeable(true); });
});
```

Besides, we will show a message in case there is no task displayed with the current view by using `ng-hide`. And finally, the bulk of this page, the dynamic `ons-list` where each item is an `ons-carousel`. We use `ng-repeat` to iterate over the task list that `memoController` provides, and each of these items will be defined as a `ons-carousel` of two levels where the level 1 will be a summary of the task and the level 0 (to go from 1 to 0 we have to swipe to the right) will contain buttons to perform actions over the selected item.

***Tip #3 &#x219d;***<img style="float: right" src="/blog/content/images/2015/Feb/memoApp_buttons_centered_2.png">
The buttons in the level 0 of a carousel are displayed vertically and horizontally centered no matter how many there are. <br><br> This is a **CSS** trick:


<table>
  <tr>
    <td style="padding-left: 30px; border-right:1pt solid Lavender ;">.main-container</td>
    <td style="padding-left: 30px; border-right:1pt solid Lavender ;">.fixer-container</td>
    <td style="padding-left: 30px;">.blockInline</td>
  </tr >
  <tr>
    <td style="padding-left: 50px; border-right:1pt solid Lavender  ;">
        float: left;<br>
        position: relative;<br>
        left: 50%;<br>
    </td>
    <td style="padding-left: 50px; border-right:1pt solid Lavender  ;">
        float: left;<br>
        position: relative;<br>
        left: -50%;<br>
    </td>
    <td style="padding-left: 50px;">
        margin-left: 3px;<br>
        margin-right: 3px;<br>
        display: inline;<br>
        position: relative;<br>
        top: 50%;<br>
        transform: translateY(-50%);<br>
    </td>
  </tr>
</table>

We can delete it by just triggering a function in our `memoController` that removes this item from the task list, modify it in a similar way, or mark it as completed. For the complete action, in addition to trigger the corresponding function behind the scenes (to check a task as completed in our objects), we want to make it fancy and **restore the corresponding carousel** to its level 1 (the task summary) and show an icon to know that it is now completed:

***Tip #4 &#x219d;***
In order to ***restore a carousel*** to its original position we need to dynamically set a distinct name for every carousel in our list, so we can refer to it later on and change its level. <br>`var="{{'carousel.id' + $index}}"` does exactly the trick, naming every new item as *carousel.idX*, where *X* is the item's index in the `ons-list`. Notice that if we name these items in a static way, i.e. `var=”myCarousel”`, every item in `ng-repeat` will overwrite the previous one, so in the end only the last one will be accessible by that name. In order to call the function `setActiveCarouselItemIndex(1)` over the clicked item we need to use bracket notation instead of dot notation: `carousel['id'+$index].setActiveCarouselItemIndex(1);`

#### Show details & Modify task

Let's address now to the show-details/modify task action. We have a new page for it, `itemdetails.html`, with its own controller:

```
<ons-page ng-controller="detailsController">
  <ons-toolbar fixed-style>
    <div class="left"><ons-back-button>Back</ons-back-button></div>
    <div class="center"> Task details </div>
        <div class="right">
      <ons-button modifier="quiet" ng-click="modifyItem();">
      Save <ons-icon icon="ion-checkmark"></ons-icon>
      </ons-button>
        </div>
  </ons-toolbar>
  <div style="text-align: center">
    <br />
    <ons-list id="itemList">
      <ons-list-item class="item">
        <ons-row>
          <ons-col width="60px">
            <div class="item-thum"></div>
          </ons-col>
          <ons-col>
            <header>
              <span id="item-name" class="item-name"><input type="text" ng-model="item_name" placeholder="Name" class="text-input text-input--transparent" style="margin-top:8px; width: 100%;"></span>
              <span id="item-category" class="item-name"><input type="text" ng-model="item_category" placeholder="Category" class="text-input text-input--transparent" style="margin-top:8px; width: 100%;"></span>
              <span id="item-description" class="item-name"><textarea type="text" ng-model="item_description" placeholder="Description"  class="textarea textarea--transparent" style="margin-top:8px; width: 100%;"></span>
            </header>
          </ons-col>
        </ons-row>
      </ons-list-item>
    </ons-list>
  </div>
</ons-page>
```

This new page is called from the main page by `myNavigator.pushPage( … )`, what basically adds a new page to the stack in our `ons-navigator`. Later on we can come back to the previous page in the stack by using `myNavigator.popPage()` or an `ons-back-button`.

In this page we display all the content of a specified task inside HTML inputs, so in addition to see the content we can modify it. It is necessary to bind every input to an `ng-model`, so we can access to the new values from the controller. For instance, the name of a task is bound to `ng-model=”item_name”`, so we can access it with `$scope.item_name` from `detailsController`.

#### Add new task and popOver

<img style="float: right" src="/blog/content/images/2015/Feb/memoApp_popover.png">Finally, the page to add a new task to the list is called `additem.html`, and is the simplest one. Exactly like the previous page, we bind the HTML inputs to `ng-model`'s, and in our `addItemController` we just add the new task to the task list in `memoService` after checking that all the inputs are valid. In the case that, for example, the name input is empty, we want to alert the user about it and avoid creating a new task. To do that we create an `ons-popover` in our `index.html`:

```
<!-- POPOVER -->
<ons-template id="popover.html">
  <ons-popover direction="up down" cancelable>
    <div style="text-align: center; opacity: 0.5;">
      <p>Name input is empty!</p>
      <p><small>Enter a name for your task to create or modify it.</small></p>
    </div>
  </ons-popover>
</ons-template>
```

Quite simple. And now we need to display it from our controllers (`addItemController` and `detailsController`, when saving a modification):

```
ons.createPopover('popover.html').then(function(popover) {
  $scope.popover = popover;
});
$scope.popover.show('#item-name');
```

This last line will show the popover right on the HTML element `'#item-name'`, we just need to control when to display it (only when the input is empty).

### Final notes

Since this application is just an example of Onsen UI and AngularJS it does not support persistent data with *window.localStorage*, *Web SQL*, *IndexedDB*,  or anything else, though it is possible to implement it. Instead, we add some example data when the app starts, so we can test it easily.

## Conclusion

We have reviewed so far how to build a not-so-trivial hybrid mobile application with a quite fancy User Interface using Onsen UI as well as several tips that could become handy in some situations. AngularJS is not compulsory but recommended since it works very well with OnsenUI and makes things a lot easier. As mentioned before, [all of this code is on Github](https://github.com/frandiox/OnsenUI-Memo-App), so you can change it and try any new feature that comes to your mind.

And that's pretty much it, hybrid mobile applications are certainly worth a try, especially because tools like Onsen UI keep everything simple. If any doubt comes up, don't hesitate to ask anything in the comments or on Stack Overflow under the tag [`onsen-ui`](http://stackoverflow.com/questions/tagged/onsen-ui). More tutorials will be coming soon!
