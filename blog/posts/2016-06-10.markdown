---
author: andreas
date: 2016-06-10
id: "react-redux-devtools-with-time-travel"
title: "Time Travel in React Redux apps using the Redux DevTools"
category: tutorial
tags: tutorial, webpack, react, time-travel, redux, onsenui
---

![Time Travel with the Redux DevTools](/blog/content/images/2016/Jun/time_travel_redux_devtools.png)

In the [previous article](/blog/react-state-management-redux-store/) we showed how to create a simple drawing application with React and manage the state of the app with a Redux store. Now we will talk about how to integrate the [Redux DevTools](https://github.com/gaearon/redux-devtools) to enable easy debugging and time travel.

The Redux DevTools records all dispatched actions and the state of the Redux store at every point in time. This makes it possible to inspect the state and travel back in time to a previous application state without reloading the page or restarting the app.

<!-- more -->

There are two ways to integrate the Redux DevTools with your app. The DevTools are actually a React component so you can embed it in your React app. Another way to use them is by installing the [Chrome extension](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en). We will take a look at both options in this post.

Using the Redux DevTools in conjunction with [React Hot Loader](https://github.com/gaearon/react-hot-loader) makes for very powerful debugging. We have already discussed hot reloading in a [previous article](/blog/react-webpack-hot-loader-onsenui/).


If you are not yet familiar with Redux, please take a look at Patrick's [great article](http://localhost:3000/blog/building-a-calculator-app-with-redux-and-onsenui/) where he builds a calculator app using Redux and vanilla JavaScript.

In the next few days we will release another article which describes how to create a more complex app using React with Redux and the [Onsen UI React Components](https://onsen.io/react). The example is a weather forecast application. The code for that application can be found [here](https://github.com/argelius/react-onsenui-redux-weather). You can also try out the [demo](http://argelius.github.io/react-onsenui-redux-weather/demo.html).

## The Redux DevTools

In the app below the Redux DevTools are embedded on the right side. The app is a very simple grid where you can toggle the cells by clicking them. Please feel free to play around with it.

<iframe style="width: 100%; height: 350px" src="https://argelius.github.io/react-redux-timetravel/"></iframe>

### How to time travel

The DevTools make time travel debugging very easy. When you fire upp the app you can see the initial state under the `@@INIT` header:

![Initial state of the app](/blog/content/images/2016/Jun/redux_devtools_initial_state.png)

As we can see the state object tree has three keys: `width`, `height` and `cells`. The `width` and `height` parameters are the dimensions of the grid and `cells` is an array of 1s and 0s that describe the current image. The initial state is a smiley face.

If you click on one of the cells the `TOGGLE_CELL` action will be dispatched and the state will be updated. If you try toggling one of the pixels you will see something like this in the DevTools:

![Redux DevTools after an action has been dispatched](/blog/content/images/2016/Jun/redux_devtools_dispatch_action.png)

The DevTools display the dispatched action:

```javascript
{
  type: 'TOGGLE_CELL',
  x: 3,
  y: 6
}
```

By recording all the dispatched actions we can easily create automated tests and it also makes it easy to reproduce bugs since the tester can record all the actions leading up to the bug and send it to the developer.

To go back to the previous state you can cancel the `TOGGLE_CELL` action. This is done by clicking on the action in the DevTools.

![Redux DevTools after an action has been canceled](/blog/content/images/2016/Jun/redux_devtools_cancel_action.png)

We have now returned to the previous state which happens to be the initial state in this case. If you dispatch several actions you don't need to cancel the actions from the bottom and up, it's actually possible to cancel an action in the middle of the list. Redux will rebuild the state given the new list of actions.

The animation below shows the time travel in action:

![Redux DevTools time travel animation](/blog/content/images/2016/Jun/react_redux_devtools_time_travel.gif)

## Embedding the Redux DevTools

Now we will take a look at how to embed the Redux DevTools in an application. As mentioned earlier the DevTools is a React component.

The DevTools is very modular and there are several different *monitors* available to debug and visualize the Redux store state. In this example we will use the following monitors:

* [`DockMonitor`](https://github.com/gaearon/redux-devtools-dock-monitor) - A resizable and moveable dock.
* [`LogMonitor`](https://github.com/gaearon/redux-devtools-log-monitor) - A log of states and actions which allows changing the history to enable time travel.

Take a look at [this page](https://github.com/gaearon/redux-devtools#custom-monitors) for a list of other available monitors. It is of course also possible to create custom monitors to suite your own needs.

So before we get started we need to install some packages. I assume that you already have a React project with a Redux store. Otherwise, please take a look at [this article](/blog/react-state-management-redux-store/).

```
npm install --save-dev redux-devtools redux-devtools-{log,dock}-monitor
```

To create the `DevTools` component the `createDevTools` function is used. We put the component in a different file so we can import it only if it's needed. This is important because you probably don't want the DevTools running in a production environment.

### DevTools container

```javascript
import React from 'react';
import {createDevTools} from 'redux-devtools';
import LogMonitor from 'redux-devtools-log-monitor';
import DockMonitor from 'redux-devtools-dock-monitor';

/**
 * Create the DevTools component and export it.
 */
export default createDevTools(
  <DockMonitor
    toggleVisibilityKey='ctrl-h'
    changePositionKey='ctrl-q'
    defaultIsVisible={true}
  >
    <LogMonitor theme='tomorrow' />
  </DockMonitor>
);
```

I put this file in `./containers/DevTools.js` so it can be imported from the main program.

#### DevTools store enhancer

To hook up the DevTools component with your Redux store you need to use the `DevTools.instrument()` function that returns a *store enhancer*. A store enhancer can be passed to the `createStore` function to, as the name implies, enhance the Redux store.

```javascript
import {crateStore} from 'redux';
import DevTools from './containers/DevTool';
import rootReducer from './reducers';

const initialState = {
	...
};

const store = createStore(
	rootReducer,
	initialState,
	DevTools.instrument()
);
```

A lot of times you also want to use some middleware or other enhancer at the same time as the `DevTools` component. In that case you can use the `compose()` function from the core Redux library.

```javascript
import {createStore, compose} from 'redux';

...

const store = createStore(
	rootReducer,
	initialState,
	compose(
		applyMiddleware(logger),
		DevTools.instrument()
	)
);
```

### Main program

```
import React from 'react';
import {render} from 'react-dom';
import {Provider} from 'react-redux';
import {createStore, applyMiddleware, compose} from 'redux';
import createLogger from 'redux-logger';

import rootReducer from './reducers';
import App from './components/App';

/**
 * Import the DevTools container.
 */
import DevTools from './containers/DevTools';

const logger = createLogger();
const initialState = {};

let store;

if (process.env.NODE_ENV === 'production') {
  store = createStore(rootReducer, initialState);
}
else {
  /**
   * Only use the DevTools component
   * when in development.
   */
  const enhancer = compose(
    applyMiddleware(logger),
    DevTools.instrument()
  );

  store = createStore(rootReducer, initialState, enhancer);
}

const rootElement = document.getElementById('root');

render(
  <Provider store={store}>
    <div>
      <App />
      /**
       * Embed the DevTools component only
       * when in development.
       */
      {
        process.env.NODE_ENV !== 'production'
          ? <DevTools />
          : null
       }
    </div>
  </Provider>,
  rootElement
);
```

## Using the Redux DevTools Chrome Extension
