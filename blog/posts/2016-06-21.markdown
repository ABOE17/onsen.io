---
author: patrick
date: 2016-06-13
id: "react-redux-devtools-with-time-travel"
title: "Building performant fast with mobx"
category: tutorial
tags: tutorial, react, mobx, webpack, react, redux, onsenui
---

![Time Travel with the Redux DevTools](/blog/content/images/2016/Jun/time_travel_redux_devtools.png)

In [recent posts](TODO) we spoke a lot about developing React applications with [Redux](TODO): It enables the users to make a greatly testable and structured applications. However, writing a Redux applications produces a lot of boilerplate. One framework alternative is [MobX](Todo), which solves this problem by doing autmations using observables.

<!-- more -->

In this tutorial we are going to build a simple stop watch app step by step. The source code is available on [GitHub](TODO). Our endproduct will look like this.

[Frame](TODO)

# Why MobX

The main author of MobX puts its best in this tweet:

![Quote MobX](/blog/content/images/2016/Jun/mobx_quote.png)

So basically MobX is a library that should make your life as a developer a little bit more easy. So how does MobX work? The main idea are observable: In the application one marks variables as observable and defines in a function called `autorun` what the observables have changed.

# Counter Example

Lets look at a simple counter example. We assume we  have a simple html page like this:

```
 <div>
    <p> Counter : <span id='counter'></span>
    <br />
    <button onclick='plusClick();'> + </button>
    <button onClick='minusClick();'> - </button>
  </div>
```

The idea is to display in the span `0` at the beginning and increase/decrease the counter when the corresponding button is pressed. Here is the JavaScript code:

```
import {autorun, observable} from 'mobx';

let CounterStore = observable({
  counter: 0,
});

const render = () => {
  document.getElementById('counter').innerHTML = CounterStore.counter;
};

autorun(render);

window.plusClick = () => {
  CounterStore.counter++;
};

window.minusClick = () => {
  CounterStore.counter--;
};
```

The code is simple: We save our counter in a Object called `CounterStore` and make it observable. We implement the render function so that it updates our display and tell mobX that when the observables change, it should run this function. The result can be seen here:

[GitHub](TODO)

The source code can be found at this [Github repo](https://github.com/philolo1/mobx-counter).

# Implementation of a stop watch 

Now that we have learned the basics of MobX, lets have a look how to use it with react. First of all we  will need to install the binding for react called `mobx-react`. These bindings work with `decorators`, an es7 feature. You can read more about them [here](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.4hmxfx5y4).

In the following example we are going to use the `strict mode`. The mobX react binding consists of the following contexts:

* observables
* computed: This are variables can be derived from the observable state. For example contains the first name and the last name of a person, the computed value could be their full name.
* actions: Actions will be used to group the code. Mainly we want to change the state only in actions.

```
import {observable, computed, action} from 'mobx';
import {v4} from 'node-uuid';
import moment from 'moment';
import format from 'format-number-with-string';

export class Timer {
  @observable milliseconds;
  @observable savedMilliseconds;

  constructor(initialMilliseconds = 0) {
    this.milliseconds = initialMilliseconds;
    this.savedMilliseconds = 0;
    this.id = v4();
  }

  @action saveTime() {
    this.savedMilliseconds += this.milliseconds;
    this.milliseconds = 0;
  }

  @action reset() {
    this.milliseconds = this.savedMilliseconds = 0;
  }

  @computed get totalMilliSeconds() {
    return this.milliseconds + this.savedMilliseconds;
  }

  @computed get display() {
    const tenMilliSeconds = parseInt(this.totalMilliSeconds / 10, 10);

    const seconds = parseInt(tenMilliSeconds / 100, 10);
    const minutes = parseInt(seconds / 60, 10);

    return `${minutes} : ${format(seconds % 60, '00')} :  ${format(tenMilliSeconds % 100, '00')}`;
  }
}
```

```
export class TimerStore {

  @observable isRunning;
  @observable timer;
  @observable startTime;

  @observable laps;

  constructor() {
    this.isRunning = false;
    this.timer = new Timer();
    this.laps = [];
  }

  @computed get mainDisplay() {
    return this.timer.display;
  }

  @computed get hasStarted() {
    return this.timer.totalMilliSeconds !== 0;
  }

  @action measure() {
    if (!this.isRunning) return;

    this.timer.milliseconds = moment().diff(this.startTime);

    setTimeout(() => this.measure(), 10);
  }

  @action startTimer() {
    if (this.isRunning) return;
    this.isRunning = true;
    this.startTime = moment();
    this.measure();
  }

  @computed get length() {
    return this.laps.length;
  }

  @computed get lapTime() {
    return this.laps.map((el) => el.totalMilliSeconds)
      .reduce((x, y) => x + y, 0);
  }

  @action lapTimer() {
    this.laps.push(new Timer(this.timer.totalMilliSeconds - this.lapTime));
  }

  @computed get lapData() {
    const data = [];
    for (let i = 0; i < this.laps.length; i++) {
      data.push({
        lap: this.laps[i],
        text: `Lap ${i + 1}`,
      });
    }
    return data.reverse();
  }

  @action stopTimer() {
    this.timer.saveTime();
    this.isRunning = false;
  }

  @action resetTimer() {
    this.timer.reset();
    this.laps = [];
    this.isRunning = false;
  }

}
```

```
import React from 'react';
import ReactDOM from 'react-dom';
import Main from './main';

import {TimerStore} from './TimerStore';
import {useStrict} from 'mobx';

useStrict(true);

const timerStore = new TimerStore();

ReactDOM.render(
  <Main
    timerStore={timerStore}
  />,
document.getElementById('app')
);

```

```
/**
 * In this file, we create a React component
 * which incorporates components providedby material-ui.
 */

import React from 'react';
import {observer} from 'mobx-react';

const TimerDisplay = ({timer, text}) => {
  return (
    <div
      style={{
        borderBottom: '1px solid #d9dae0',
        display: 'flex',
      }}
    >
      <div
        style={{fontSize: 30,
          fontFamily: 'AvenirNext-UltraLight',
          color: '#7f8083',
          padding: 20,
          flex: 1,
        }}
      >
        {text}
      </div>
      <div
        style={{fontSize: 30,
          padding: 20,
          fontFamily: 'AvenirNext-UltraLight',
          color: '#7f8083',
        }}
      >
        {timer.display}
      </div>
    </div>
  );
};

const ButtonStyle = {
  fontFamily: 'AvenirNext-UltraLight',
  fontSize: 20,
  width: 72,
  height: 72,
  margin: 24,
  padding: 0,
  cursor: 'pointer',
  letterSpacing: 1,
  border: 0,
  borderRadius: '50%',
  outline: 'none',
  background: 'white',
};

const Main = observer(({timerStore}) => {
  let firstButton;
  let secondButton;

  if (!timerStore.isRunning) {
    secondButton = (
      <button
        style={{...ButtonStyle, color: '#4bd761'}}
        onClick={() => timerStore.startTimer()}
      >
        start
      </button>
    );

    firstButton = (
      <button
        style={ButtonStyle}
        onClick={() => timerStore.resetTimer()}
      >
        reset
      </button>
    );

    if (!timerStore.hasStarted) {
      firstButton = null;
    }
  } else {
    secondButton = (
      <button
        style={{...ButtonStyle, color: '#fd3d2a'}}
        onClick={() => timerStore.stopTimer()}
      >
        stop
      </button>
    );

    firstButton = (
      <button
        style={ButtonStyle}
        onClick={() => timerStore.lapTimer()}
      >
        lap
      </button>
    );
  }

  return (
    <div style={{fontSize: 30}}>
      <div
        style={{
          background: 'white',
          height: 120,
          fontSize: 60,
          fontFamily: 'AvenirNext-UltraLight',
          border: 'solid #cecfd0',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'}}
      >
        {timerStore.mainDisplay}
      </div>
      <div>
        <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>
          {firstButton}
          {secondButton}
        </div>
        <div>
          {timerStore.lapData.map((el) =>
            <TimerDisplay
              key={el.lap.id}
              timer={el.lap}
              text={el.text}
            />
            )}
        </div>
      </div>
    </div>
  );
});

export default Main;
```

# Further references
https://www.youtube.com/watch?v=XGwuM_u7UeQ
