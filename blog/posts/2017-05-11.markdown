---
author: naoki
date: 2017-05-11
id: onsenui-recent-updates-may-2017
title: "Onsen UI 2.2.6: recent updates and iOS stability improvement"
product: onsen
category: announcement
tags: onsen ui, web components, custom elements
# Open Graph protocol metadata
og:
  # Set og:image
  image: https://onsen.io/blog/content/images/2017/May/CustomElementsStatus.png
  twitter:
    # Set type of Twitter Card: summary, summary_large_image
    card: summary_large_image
---

<!--2017/03/14 に [Onsen UI 2.2.0 をリリース](https://onsen.io/blog/220-release/)してから約2ヶ月が経ちました。-->
You may recall that 2 months ago (March 14) [we released Onsen UI 2.2.0](https://onsen.io/blog/220-release/).
<!--Onsen UI は[皆さんからのご意見](https://github.com/OnsenUI/OnsenUI/issues)を元に継続的に改善を行っています。-->
Since then we have continuously worked hard to improve Onsen UI according to the feedback we've been receiving (e.g. [GitHub issues](https://github.com/OnsenUI/OnsenUI/issues)).
<!--現時点での最新版は 2.2.6 です。-->
That effort culminated in the latest version, 2.2.6.

<!--最近の主なアップデートについてご紹介します。-->
In this post we'd like to explain what the most recent updates of Onsen UI are all about.

<!-- more -->

<!--### iOS での安定性が飛躍的に向上しました (2.2.3)-->
### Stability on iOS has been significantly improved (2.2.3)

<!--Onsen UI は Custom Elements という技術を使っています。-->
<!--しかしこの Custom Elements は、[Android では良好にサポートされている一方で、iOS ではあまりよくサポートされていませんでした](https://caniuse.com/#feat=custom-elementsv1)。-->
In case you are not familiar with it yet, Onsen UI uses a technology called [Custom Elements](https://www.w3.org/TR/custom-elements/) which, although well-supported by Android, was lacking a bit in iOS.
<!--そのため、Onsen UI を iOS で安定的に動作させることは技術的に困難でした。-->
For that reason it could at times prove to be not as 100% safe and stable as you're accustomed to by now.

<!--しかし、今年の2月に Custom Elements の開発者達によって[その状況が改善され](https://github.com/webcomponents/custom-elements/issues/34)、-->
However, good news! The Custom Elements' developers managed to [solve this situation](https://github.com/webcomponents/custom-elements/issues/34) last February.
<!--結果として Onsen UI の iOS での安定性が飛躍的に向上しました。-->
<!--特に AngularJS などの JS フレームワークと併用した際の安定性が向上しています。-->
As a result, the stability of Onsen UI has been even more improved, especially when used together with frameworks such as AngularJS. A more detailed technical explanation on this matter is provided further down this article.


<!--Onsen UI 2.2.3 未満をお使いの方は最新版へのバージョンアップをご検討ください。-->
If you are using Onsen UI 2.2.2 or older, please consider updating it to the latest version. The update methods are the same as you're used to. If you are using `angular2-onsenui`, `react-onsenui` or `vue-onsenui`, please do not forget to update them to their latest version as well. And of course let us know if you run into any kind of trouble.

<!--### ons-splitter にアニメーションを追加しました (2.2.5)-->
### New animations for `ons-splitter` (2.2.5)

<!--Onsen UI にはスライドメニューや画面分割を提供する `ons-splitter` タグが用意されています。-->
<!--その `ons-splitter` において、今までは `overlay` アニメーションのみを提供してきましたが、-->
<!--Onsen UI 2.2.5 にて `push` アニメーションと `reveal` アニメーションを新たに追加しました。-->
Onsen UI provides sliding side menus and screen splitters through the `ons-splitter` element.
Before we were providing only an `overlay` animation but since Onsen UI 2.2.5 `push` and `reveal` animations are also available.

<table>
    <tr>
        <th>Animation name</th>
        <th>Detail</th>
    </tr>
    <tr>
        <td>`overlay` (`default`)</td>
        <td>Side page overlays content page.</td>
    </tr>
    <tr>
        <td>`push`</td>
        <td>Side page pushes content page.</td>
    </tr>
    <tr>
        <td>`reveal`</td>
        <td>Content page is slided and then side page is revealed.</td>
    </tr>
</table>

<p data-height="512" data-theme-id="light" data-slug-hash="zwPQwb" data-default-tab="html,result" data-user="asial-matagawa" data-embed-version="2" data-pen-title="Onsen UI 2.2.5 - New animations of ons-splitter" class="codepen">See the Pen <a href="https://codepen.io/asial-matagawa/pen/zwPQwb/">Onsen UI 2.2.5 - New animations of ons-splitter</a> by Naoki Matagawa (<a href="http://codepen.io/asial-matagawa">@asial-matagawa</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<!--### iOS での安定性向上の背景-->
### Background of the improvements on iOS

<!--[Web Components](https://www.w3.org/standards/techs/components) が注目を集め始めていることを考慮し、-->
<!--Web Components に興味をお持ちの方のために、今回の件についてもう少し詳しくお話します。-->
Following the increasing attention given to Web Components, we would like to give more detailed information for Web Components enthusiasts.

<!--今回の iOS での安定性向上は Custom Elements v1 の polyfill の改善に由来するものです。-->
The stability improvement of Onsen UI on iOS is a consequence of the improvement of the Custom Elements v1 polyfill.
<!--Custom Elements v1 は Android の場合「Chrome 54 以上」または「Android System WebView 54 以上」、iOS の場合 iOS 10.3 以上（の Safari または UIWebView）でしか利用できないため、-->
Custom Elements v1 can be used in Chrome 54+ or Android System WebView 54+ in the case of Android, and can be used in Safari / UIWebView of iOS 10.3 in the case of iOS.
<!--Onsen UI は Custom Elements v1 の polyfill を利用しています。この polyfill によって古いブラウザでも `ons-*` 要素が動作するようになっています。-->
Onsen UI is using a polyfill for Custom Elements v1 which enables even old browsers to work with `ons-*` elements.

![](/blog/content/images/2017/May/CustomElementsStatus.png)

<!--Custom Elements v1 の polyfill としては2017年5月現在以下の2つが開発されています。-->
As of May 2017, the following 2 packages have been developed as polyfills for Custom Elements v1:

- [@webcomponents/custom-elements](https://github.com/webcomponents/custom-elements) (by [webcomponents.org](https://www.webcomponents.org/))
- [document-register-element](https://github.com/WebReflection/document-register-element) (by [WebReflection](https://www.webreflection.co.uk/))

<!--2017年1月の時点ではどちらの polyfill も、パフォーマンス上の理由から[カスタム要素のライフサイクルコールバック（custom element reactions）](https://developers.google.com/web/fundamentals/getting-started/primers/customelements#reactions)を `Element#appendChild` や `Element#setAttribute` に対して非同期的に呼び出していました。つまり、`ons-*` 要素を `body` 要素下に追加した際に行うべき処理をすぐには行わず、数ミリ秒遅らせてしまっていたということです。本来ライフサイクルコールバックはそれらに対して同期的に呼ばれるべきで、[W3C](https://www.w3.org/TR/custom-elements/) や [WHATWG](https://html.spec.whatwg.org/multipage/scripting.html#custom-elements) にて規定されている Custom Elements v1 の正式な仕様においてもそのように書かれています。Onsen UI にとってはこの仕様との不一致が致命的でした。Onsen UI はライフサイクルコールバックが同期的に呼ばれることを前提としたコードを多数持つためです。-->
Back in Janually both of the polyfills **asynchronously** called lifecycle callbacks of custom elements (called [custom element reactions]((https://developers.google.com/web/fundamentals/getting-started/primers/customelements#reactions)) against `Element#appendChild` and `Element#setAttribute` for performance reasons.
This means they were delaying the process by a few milliseconds after the moment an `ons-*` element was appended under the `body` element.
Originally the lifecycle callbacks should be called **synchronously** and in fact that is strictly described in the official specification of Custom Elements v1 by [W3C](https://www.w3.org/TR/custom-elements/) and [WHATWG](https://html.spec.whatwg.org/multipage/scripting.html#custom-elements).

![](/blog/content/images/2017/May/CustomElementsV1PolyfillStatus_Before.png)

<!--そんな中、今年の2月、`@webcomponents/custom-elements` は `1.0.0-rc.2` にてライフサイクルコールバックを同期的に呼び出すよう仕様変更を行いました。これにより、仕様により良く準拠した Custom Elements v1 用 polyfill が生まれました。そこで早速 polyfill を `@webcomponents/custom-elements@1.0.0-rc.2` に差し替えたものが Onsen UI 2.2.3 です。-->
<!--これにより、今までどうしても直せなかった iOS での不具合が一挙になくなり、iOS でのテストケース通過率が 58 % から 99 % に上昇しました。-->
Hence in February `@webcomponents/custom-elements` made a change in `1.0.0-rc.2` so that the lifecycle callbacks were instead called **synchronously**.
Thanks to this change a polyfill for Custom Elements v1 which correctly matches the specification was released.
We have immediately adopted `@webcomponents/custom-elements@1.0.0-rc.2` and launched it with Onsen UI version 2.2.3.
After the update many issues on iOS which were hard to fix thus far were all solved and the test case passing rate was increased from 58% to 99%.

![](/blog/content/images/2017/May/CustomElementsV1PolyfillStatus_After.png)

<!--Web Components が話題となる一方でその実例が少ないことに疑問を感じた方はいらっしゃらないでしょうか？その背景にはこういった polyfill の事情などがあります。-->
Have you ever wondered why Web Components are rarely used even when they are gradually getting more attention?
That's actually due to circumstances such as this, related to polyfills in the background.

<!--しかし、polyfill の問題は過渡期の問題にすぎません。ブラウザの機能拡充により jQuery 無しでも強力な機能が使えるようになったのと同じように、2019-2021 年頃には polyfill 無しで Custom Elements v1 や Shadow DOM v1 を利用できる時代が訪れます。-->
Nevertheless the problem of polyfills is a transition-period problem.
As soon as we're able to use powerful features without jQuery (thanks to recent browser updates),
we will be able to use Custom Elements v1, Shadow DOM v1 and other modern features without polyfills. At most by 2019-2021 it will be a certainty.

<!--Onsen UI は Web 標準の将来的動向を見据えつつ今後も改善を続けていく所存です。-->
<!--もし私たちの思想に共感いただけましたら、是非 GitHub スターにてご支援ください（皆様のおかげで、もうすぐ ★5000 に到達します）。-->
We will continuously improve Onsen UI while looking ahead to the future of Web standards.
If you sympathize with our philosophy, we would be glad if you give a GitHub star to our `OnsenUI` repository (thanks to your support, we expect to reach ⭐️ x 5000 soon).

<!-- Place this tag where you want the button to render. -->
<a class="github-button" href="https://github.com/OnsenUI/OnsenUI" data-size="large" data-show-count="true" aria-label="Star OnsenUI/OnsenUI on GitHub">Star</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async defer src="https://buttons.github.io/buttons.js"></script>
