---
author: onsen
date: 2014-03-06
id: onsen-ui-tutorial-angularjs-essentials-for-using-onsen-ui-part-3
title: "Onsen UI-Tutorial: AngularJS Essentials for Using Onsen UI Part 3"
---
Part 3: Services

We are going to make an app with Onsen UI using AngularJS services.

<!-- more -->

First, let's learn the basics of services.

When you are using AngularJS and defining all sorts of data and functions in a controller, the controller gets bloated very quickly, often causing source code to be tangled and unstructured. However, there is a way to keep controllers slim and fit. That is to have them focused on managing and processing only view-related data, and export other data or processing to [services](http://code.angularjs.org/1.2.14/docs/guide/dev_guide.services.creating_services) to share with other controllers. Controllers can access data or functions stored in services via [dependency injection (DI)](http://docs.angularjs.org/guide/di).


There are several ways to register services, but the two most common methods are "service() function" and "factory() function". We will use factory() function in this example. Let's look at the sample below:

You may find it a little complicated at first, but you will get comfortable as you practice a couple of times with overwriting services and start to understand how they work.

	<!DOCTYPE html>
	<html ng-app="myApp">
 
  	<head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.12/angular.min.js"></script>
    <script>
      
      //Define a Module
      var myApp = angular.module('myApp', []);
      
      //Register Services to myApp Module.
      myApp.factory('MenuService', function(){
        
        var menu = [
          "Hamburger",
          "Curry",
          "Stew",
          "Stake"
        ]
        
        return{
          
          getMenu : function(){
            return menu;
          },
          
          addMenu : function(yourMenu){
            menu.push(yourMenu);
          },
 
          removeMenu : function(){
            menu.splice(0,1);
          }
 
        }
      });
      
      myApp.controller('ManageCtrl', function($scope, MenuService){
 
          $scope.menuName = "";
 
          $scope.addMenu = function(){
            if($scope.menuName !== ""){
              MenuService.addMenu($scope.menuName);
            }
          }
 
          $scope.removeMenu = function(){
            MenuService.removeMenu();
          }
 
      });
 
      myApp.controller('ListCtrl', function($scope, MenuService){
 
        $scope.myMenu = MenuService.getMenu();
 
      });      
 
    </script>
  	</head>
 
  	<body>
    <h1>Share Data and Methods between Controllers with Service.</h1>
    <div ng-controller="ManageCtrl" style="background:#FFFFCC;">
        <h2>[secondCtrl Controller]</h2>
      <h3>Add Menu</h3>
      <input type="text" ng-model="menuName">
    <button ng-click="addMenu()">AddMenu</button>
      <h3>removeMenu</h3>
    <button ng-click="removeMenu()">removeMenu</button><br/><br/>
    </div>
 
    <div ng-controller="ListCtrl"style="background:#CCFF66;">
      	 <h2>[indexCtrl Controller]</h2>
      	 <h3>Menu</h3>
   		 <ul>
      <li ng-repeat='items in myMenu track by $index'>{{items}}</li>
   		 </ul>
    	</div>
 
  	</body>
	</html>

After defining the myApp module, the "MenuService" service is registered underneath it. The MenuService has the following data and functions:

* menu:  menu data [array]
* getMenu() :  function to get menu
* addMenu() :  function to add new menu
* removeMenu() :  function to remove menu


		var myApp = angular.module('myApp', []);
 
        myApp.factory('MenuService', function(){
          
          var menu = [
            "Hamburger",
            "Curry",
            "Stew",
            "Stake"
          ]
          
          return{
            
           getMenu : function(){
              return menu;
            },
            
           addMenu : function(yourMenu){
              menu.push(yourMenu);
            },
   
           removeMenu : function(){
              menu.splice(0,1);
            }
   
          }
      	});

Next, let's look at the controller. The two controllers, ManageCtrl and ListCtrl, are defined. The MenuService parameters are passed to each controller as the parameter of each function other than $scope. This is how you can have the controllers share data and functions stored in the service. We injected only one service in this example, but you can inject multiple services to a controller. Also, you can inject services to directives.

	myApp.controller('ManageCtrl', function($scope, MenuService){
 
          $scope.menuName = "";
 
          $scope.addMenu = function(){
            if($scope.menuName !== ""){
              MenuService.addMenu($scope.menuName);
            }
          }
 
          $scope.removeMenu = function(){
            MenuService.removeMenu();
          }
 
      });
 
      myApp.controller('ListCtrl', function($scope, MenuService){
 
        $scope.myMenu = MenuService.getMenu();
 
      });

Let's look inside ListCtrl first.

	myApp.controller('ListCtrl', function($scope, MenuService){
 
        $scope.myMenu = MenuService.getMenu();
 
      });
      
This calls the injected MenuService function, and stores data inside of its own scope ($scope). This will reflect the data of MenuService within the view. Let's look at the corresponding html:

	<div ng-controller="ListCtrl"style="background:#CCFF66;">
      <h2>[indexCtrl Controller]</h2>
      <h3>Menu</h3>
    <ul>
      <li ng-repeat='items in myMenu track by $index'>{{items}}</li>
    </ul>
    </div>

What's important here is only this part below:

	<li ng-repeat='items in myMenu track by $index'>{{items}}</li>
    
[The ng-repeat directive](http://docs.angularjs.org/api/ng/directive/ngRepeat) is used to loop arrays or objects as many times as the number of elements.

This ng-repeat='items in myMenu' means that it stores **myMenu**, or **$scope.myMenu**, every time in the items, and loops as many times as there are total elements. If the $scope.myMenu is the array that contains following data:

* Udon
* Soba
* Sushi
* Sukiyaki

By ng-repeat='items in myMenu':

	<li ng-repeat='items in myMenu track by $index'>{{items}}</li>

The above code is expanded to the HTML element below:

	<li>Udon</li>
	<li>Soba</li>
	<li>Sushi</li>
	<li>Sukiyaki</li>

*This example omits classes that are automatically added by AngularJS. [The track by $index](http://docs.angularjs.org/error/ngRepeat/dupes) is an option to permit duplicate keys within ng-repeat.

This is how the menu stored in the MenuService service will be displayed as a list in the view.

Next, let's look at ManageCtrl.

	myApp.controller('ManageCtrl', function($scope, MenuService){
 
          $scope.menuName = "";
 
          $scope.addMenu = function(){
            if($scope.menuName !== ""){
              MenuService.addMenu($scope.menuName);
            }
          }
 
          $scope.removeMenu = function(){
            MenuService.removeMenu();
          }
 
      });

Similarly, MenuService is also injected to ManageCtrl. This ManageCtrl controller shares data with the ListCtrl controller via MenuService.

The ManageCtrl controller has two functions, addMenu() and removeMenu(). Both functions call the function of the MenuService service.

The menu that is added or removed by these functions will be immediately reflected in the ListCtrl model. Also, the view changes according to the current menu data.

This is how you can share data and functions between controllers.

### Making an HTML5 mobile app using AngularJS services.

This is a simple to-do app made with Onsen UI. It uses AngularJS services internally.

***If Onsen UI does not work properly, try using the latest version of a Webkit browser like Google Chrome or Safari. This is because Onsen UI framework is built for mobile apps such as Android, iOS and Windows. We are using version 1.0 of Onsen UI for this app.**

<iframe style="background-image: url('http://s3.asial.co.jp/~ataru/my_image/iPhone5.png'); padding: 119px 30px 119px 34px;  display:block; margin:auto; border:none;" src="https://s3.asial.co.jp/~ataru/blog20140209/onsen_ui_minimum/index.html"  width="321" height="569" scrolling="no"></iframe>

You can download the source code from here:

[Download](http://s3.asial.co.jp/~ataru/blog20140209/onsen_ui_minimum.zip)

Congratulations! You have completed the trilogy of the AngularJS essentials tutorial. Thank you for reading, and enjoy using Onsen UI!
