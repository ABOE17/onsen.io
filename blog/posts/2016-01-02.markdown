---
author: moongift
date: 2016-01-02
id: try-out-javascript-es6-using-babel
title: "Try out JavaScript ES6 using Babel"
category: monaca
tags: javascript, ES6, Babel
---

ECMAScript 2015 Commonly referred to as "ES6" is the current version of the ECMAScript Language Specification standard,
though it will take sometime to be supported in current browser.
This blog post will introduce how to use Babel, a JavaScript transpiler, for those who want to try out ES6 in advance.
<!-- 2015年6月17日に標準仕様として発行された ECMAScript6 通称“ ES6 ”ですが、脚光を浴びているものの実際のブラウザが対応するには時間がかかると思います。そのような状況の中、トランスパイラの一つである Babel で一足先にES6（ECMAScript6）を体感したいと思います。 -->

<!-- more -->

![Babel](/blog/content/images/2016/Jan/babel.png)

### Babel transpiles ES6 to ES5
<!-- ES6からES5へトランスパイラするBabel -->

Traspiler is a specific term for taking source code written in one language and transforming into another language.
So in this case, Babel is tool to transform ES6 to ES5.
<!--
トランスパイラとはコード変換ツールの意味として利用されています。Babelは現行のES5へ、ES6のコードを変換する（トランスパイルする）ツールです。Babelはランタイムライブラリとちがって、実行時のオーバーヘッドがありません。また、トランスパイル後の変換コードが比較的読みやすいという評判です。 では見ていきましょう！ -->

※ In this blog post, we are not discussing differences between ES6 and ES5, rather we will focus on how to use Babel.
<!-- 本記事では、Babelの利用だけに留め、ES6とES5の構文の違いや、ライブラリの説明は行いません。 -->


### Setting Up Babel

#### Installation

Babel requires Node.js and npm installed on your system. If you do not have them, install them beforehand.
Installation can be simply done running following code in a command line:
<!-- BabelはNode.jsで動作します。Babelを使うためにはNode.jsとnpmがインストールされている事が前提となりますので、予め用意しておいて下さい。インストールはglobalオプションを付けて、コマンドラインより実行します。 -->

```
$ npm install -g babel
```

Now we can run Babel like:
<!-- Babelはコマンドプロンプトなどで次のように実行します。 -->

```
$ babel script.js
```

#### Linting ES6

Let's install ESlint and babel-eslint altogether.
<!-- eslintとbabel-eslintを利用すると、コード整形が可能です。一緒にインストールしておきましょう。 -->

```
$ npm install -g eslint babel-eslint
```

You can now run ESlint in a command line.
<!-- こちらもコマンドラインで次のように実行します。 -->

```
$ eslint script.js
```

You can configure some rules in a `.eslintrc` file under your root directory.
<!-- eslintには、ルールを予めセットアップできます。ユーザのルート直下に次のファイルを設置して下さい -->

```
.eslintrc

{
  "parser": "babel-eslint",
  "rules": {
    "strict": 0
  }
}
```

There are lot more rules can be found in a [List of available rules - ESLint - Pluggable JavaScript linter](http://eslint.org/docs/rules/).
<!--
上記は最低限のルールですのでを参照しながらルールをブラッシュアップしていくと良いでしょう。 -->


#### Using Babel
<!-- Babelの実行の様子 -->

Let's see how Babel works in a simple sample code.
<!-- 実際に簡単なソースコードで変換される様子を見てみましょう。 -->

ES6 code: `sample.js`.
<!-- ES6のコード: sample.js -->

```
var odds = evens.map(v => v + 1);
var nums = evens.map((v, i) => v + i);
```

ES5 code transpiled by Babel.
<!-- BabelによりES5にトランスパイルされたコード -->

```
$ babel sample.js

// Expression bodies
"use strict";

var odds = evens.map(function (v) {
    return v + 1;
});
var nums = evens.map(function (v, i) {
    return v + i;
});
```

#### Try it out - Babel
<!-- BabelのサイトでES6を体験 -->

Babel has a [Try it out](https://babeljs.io/repl/) page for you to check their conversion in real-time.
See how it's actually converting and get the hang of it for later development.
<!--
Babelでは[Try it out](https://babeljs.io/repl/)として、実際に変換される様子をリアルタイムに確認できるサイトが用意されています。どのようなにES5に変換されるのかを検証することが可能ですので、その後のコード作成に役立つことでしょう。 -->

![babel try it out](/blog/content/images/2016/Jan/babel-try-it-out.png)


#### Use Babel in Build Tools
<!-- BuildツールでBabelを利用する -->

In an actual development, we use JS build tools generally.
Let's take a look at how to combine Gulp with Babel for example.
First, we will install Gulp and Babel module for Gulp.
<!-- 実際の開発プロジェクトにおいては、ビルドツールを利用するのが一般的と思います。ここではGulpで変換してみます。まずは、Gulp本体とGulp用のBabelモジュールをインストールします。 -->

```
$ npm install --save-dev gulp
$ npm install --save-dev gulp-babel
```

Following gulp code demonstrates how to compile all JS files in a src/js directory into ES5 JS files and output to a dist/js directory.
<!-- 次のコードは、src/jsディレクトリにある全てのjsファイルを、dist/jsディレクトリに配備するサンプルです。 -->

```
var gulp = require("gulp");
var babel = require("gulp-babel");

gulp.task("default", function () {
    return gulp.src("src/js/*.js")
        .pipe(babel())
        .pipe(gulp.dest("dist/js"));
});
```

References to other build tools are available in a [Babel Setup](https://babeljs.io/docs/setup/) page.
<!-- に他のビルドツールの利用方法がありますので、参考にして下さい。 -->


#### Using in a browser
<!-- ブラウザでの利用 -->

When you use converted code from Babel in a browser, you will need a babel-polyfill. This babel-polyfill is a library that gives ability to use new functionality of ES6 for ES5.
This polyfill is not included in initially so we will install babel-core package in the project.
<!-- ブラウザで、Babelで変換したコードを利用する場合、ポリフィルが必要になります。ポリフィルとはES6の新しい機能などを利用するためのES5向けのライブラリです。変換だけでは、ポリフィルは含まれないので、babel-coreパッケージをプロジェクトにインストールする必要があります。 -->

```
$ npm install --save-dev babel-core
```

After installation, place browser-polyfill.js before ES5 script.
<!-- インストール後は、パッケージにあるbrowser-polyfill.jsを、変換されたES5のスクリプトより前に設定します。 -->

Example HTML polyfill:
<!-- HTMLへのポリフィル設定サンプル -->

```
<body>

... HTMLコード ...

<script src="node_modules/babel-core/browser-polyfill.min.js"></script>
<script src="dist/js/main.js"></script>
</body>
```

### ES6 Ready IDEs
<!-- ES6対応のIDEなど -->

Here are some list of IDEs that support ES6 syntax as of 08/25/2015.
<!-- 2015/08/25の現時点で確認出来たES6対応のIDEやエディタをご紹介します。 -->


#### IntelliJ IDEA 14

IntelliJ IDEA14をお使いであれば、構文レベルでES6サポートしています。

Preferences＞Languages&Frameworks＞JavaScript の画面で、

Scriptバージョンを設定することで、コードフォーマットなどに対応できるようになります。姉妹製品のWebStormなども同様な対応となっています。

![IntelliJ IDEA ES6 Support](/blog/content/images/2016/Jan/IDEA-ES6-support.png)

また、プラグインの[intellij-es67](https://github.com/casser/intellij-es67)を入れることも検討して下さい。plugin の browse repositoriesから、「javascript.next support plugin」で検索出来ます。


#### Atom

Atom, an open source editor, has a [language-babel](https://atom.io/packages/language-babel) plugin that supports syntax highlighting for ES6 and JSX.
<!-- Atomエディタでは、[language-babel](https://atom.io/packages/language-babel)プラグインで、ES6やJSXコードのシンタックスのハイライトを行います。 -->


#### Sublime Text

Sublime Text, usually compared to Atom, also has a plugin for syntax support.
<!-- Atomとよく比較される定番のエディタです。 Sublime Textでは、シンタックスをサポートするプラグインがあります。 -->

You can find [Babel - Packages - Package Control](https://packagecontrol.io/packages/Babel) from Package Control.
<!-- Package Controlから[Babel - Packages - Package Control](https://packagecontrol.io/packages/Babel)をインストールします。 -->


#### Visual Studio Code

Visual Studio Code is a cross-platform editor from Microsoft.
Their release in June comes with support for ES6 syntax highlighting.
<!-- Microsoftからリリースされた、マルチプラットフォームで動くエディタです。ES6がサポートされていますので、シンタックスなども可能です。 -->

[Visual Studio Code](https://code.visualstudio.com/)


### Conclusion

Growing the popularity of transpilers, such as Babel, suggests that many of the developers are eager to use ES6.
Many of the functionality can be implemented in ES6 already as we know that Babel transpiles into current ES5.

At the same time, there are things we need to consider. For example, it might cause compatibility errors with your existing libraries or testing.
Let's say, in the near future, even though all browsers support ES6, there will be some browser differences like exhaustive Internet Explorer or multi browser support.

For those reasons, all we could say is that we have no choice but rely on transpilers for now.

<!-- 現在Babelに限らず、ES6界隈でこのようなトランスパイラが発達するのは、やはり開発側において早くES6への対応を希望しているからと言えます。
Babelのトランスパイルは現行のES5として変換されますので、多くの機能はすでにES6で開発できると思ってよいでしょう。
ただし既存ライブラリや、テスト方法に支障が出る可能性も考慮する必要があります。


今後、ブラウザがES6に全て対応したとしても、各ブラウザの挙動が微妙に違う可能性も出てくるでしょう。数年前までIE対応やマルチブラウザ対応で悩まされたのと同じような状況にならないことを切に願いたいところです。
そのため、Babelなどの変換ツールに頼らざるを得ない状況は続くと思われます。


全てのブラウザがES6に対応してから始めるより、ぜひ今からES6を使い始めましょう！ -->
