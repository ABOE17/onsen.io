---
author: onsen
date: 2014-03-05
id: onsen-ui-tutorial-angularjs-essentials-for-using-onsen-ui-part-2
title: "Onsen UI-Tutorial: AngularJS Essentials for Using Onsen UI Part 2"
---
Part 2: Click Events and DOM Manipulation

We are going to learn how to add click events within apps developed with Onsen UI. This blog entry is in response to frequently asked questions from users who are familiar with jQuery but not with AngularJS.

We are going to register click events to buttons, and dynamically change CSS classes of HTML elements.

<!-- more -->

### index.html

    <!DOCTYPE html>
    <html>
    
    <head>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.11/angular.min.js"></script>
    <link rel="stylesheet" href="style.css" />
    <script src="app.js"></script>
    </head>
    
    <body ng-app="myApp">
    <div ng-controller="clickCtrl">
    <span ng-class="dynamic">Onsen UI</span><br/>
    <button ng-click="changeToRed()">Red</button>
    <button ng-click="changeToGreen()">Green</button>
    <button ng-click="changeToBlue()">Blue</button>    
    </div>
    </body>
    
    </html>
    
### app.js

	var myApp = angular.module('myApp', []);
 
	myApp.controller('clickCtrl', function($scope){
    
    $scope.dynamic = "red";
 
    $scope.changeToRed = function(){
      $scope.dynamic = "red";      
    }
    
    $scope.changeToGreen = function(){
      $scope.dynamic = "green";
    }
    
    $scope.changeToBlue = function(){
      $scope.dynamic = "blue";      
    }
    
	});

### style.css

    .red{
      color:#FF0000;
    }
     
    .green{
      color:#00FF00;
    }
     
    .blue{
      color:#0000FF;
    }
     
    button{
      display:inline-block;
    }


Let's analyze the code. This is inside the body tag of index.html.

      <body ng-app="myApp">
      <div ng-controller="clickCtrl">
        <span ng-class="dynamic">Onsen UI</span><br/>
        <button ng-click="changeToRed()">Red</button>
        <button ng-click="changeToGreen()">Green</button>
        <button ng-click="changeToBlue()">Blue</button>    
      </div>
  	</body>
    
The "myApp" module is set in the body tag. Then underneath, the "clickCtrl" controller is set in the div element.


You can see here that the "ng-class" attribute is specified in the span element. The value specified by [the ng-class element](http://docs.angularjs.org/api/ng/directive/ngClass) is data-bound to the controller's model. This will allow us to control CSS classes that are added to the element specified by the ng-class from the controller side.

In this example, the "dynamic" value is specified by the ng-class.

	<span ng-class="dynamic">Onsen UI</span><br/>

Next, let's look at clickCtrl.

	myApp.controller('clickCtrl', function($scope){
    
    $scope.dynamic = "red";
 
    $scope.changeToRed = function(){
      $scope.dynamic = "red";      
    }
    
    $scope.changeToGreen = function(){
      $scope.dynamic = "green";
    }
    
    $scope.changeToBlue = function(){
      $scope.dynamic = "blue";      
    }
    
The clickCtrl controller is located within the myApp module. Inside clickCtrl, **$scope.dynamic = "red";** is inserted. This code sets "dynamic" to "red" when launching Onsen UI for the first time.

The "red" CSS class is in style.css. Let's look inside style.css:

	.red{
  	color:#FF0000;
	}

The CSS class is defined to set the text color to red (#FF0000). This is why the text color of "Onsen UI" is red when launched the first time.

By using the ng-class like this, you have the flexibility to control CSS classes that are applied to the view from the controller side.

Let's look at the next element in index.html . The "ng-click" attribute is added to the button element:

	<button ng-click="changeToGreen()">Green</button>

This ng-click attribute value is also data-bound to M (the model) of the controller. The following function runs when the ToGreen() function presses the button where ng-click is added.

	$scope.changeToGreen = function(){
      $scope.dynamic = "green";
    }

Because the $scope.dynamic value is changed to a different CSS class name inside this button, a different CSS class is applied to the span element every time a different button is pressed, changing the text colors.

This is how you can register click events in AngularJS.

### Using jQuery in Onsen UI apps.

Compared with jQuery, AngularJS less frequently directly manipulates the DOM. This is probably because development of both was based on different concepts. However, jQuery methods can sometimes be more convenient to implement.

AngularJS incorporates jQLite, which is a compatible subset of jQuery. You can get DOM elements with [the angular.element() function](http://docs.angularjs.org/api/ng/function/angular.element). If jQuery is loaded, it overwrites these functions.

If you want to use both AngularJS and jQuery, load jQuery first, and then load AngularJS. The following example calls the jQuery function in the controller.

Since DOM manipulation from within a controller is generally not recommended, you are better off using directives instead, once you get used to this procedure. 

index.html

	<!DOCTYPE html>
    <html ng-app="myApp">
     
      <head>
      <link rel="stylesheet" href="style.css">
        <script data-require="jquery@*" data-semver="2.0.3" src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
        <script data-require="angular.js@*" data-semver="1.2.12" src="http://code.angularjs.org/1.2.12/angular.js"></script>
        <script>
          var myApp = angular.module('myApp', []);
     
          myApp.controller('jQueryCtrl', function($scope){
              $(function(){
                
                $('#jquery').html('Manipulated by jQuery');
                $scope.attacheAnimation = function(){
                  $('#jquery').addClass('right')
                }
                
              });
          });
          
          myApp.controller('jQLiteCtrl', function($scope){
              $(function(){
                
                angular.element('#jqlite').html('Manipulated by angular.element()'); 
                $scope.attacheAnimation = function(){
                  angular.element('#jqlite').addClass('left')
                }
                
              });
          });      
      
        </script>
      </head>
     
      <body>
        <div ng-controller="jQueryCtrl">
          <h2 id="jquery"></h2>
          <button ng-click="attacheAnimation()">Right!</button>
        </div>
        <div ng-controller="jQLiteCtrl">
          <h2 id="jqlite"></h2>
          <button ng-click="attacheAnimation()">Left!</button>      
        </div>    
    
  	</body>
 
	</html>
    
style.css

	.right{
    -webkit-transition-duration: 850ms;
    -moz-transition-duration: 850ms;
    -o-transition-duration: 850ms;
    transition-duration: 850ms;
    -webkit-animation-timing-function:cubic-bezier(0.9, 0.04, 0.98, 0.335);
    animation-timing-function:   cubic-bezier(0.9, 0.04, 0.98, 0.335);
 
      -webkit-transform: translate3d(50%, 0, 0);
  	  transform: translate3d(50%, 0, 0);    
	}
 
	.left{
    -webkit-transition-duration: 850ms;
    -moz-transition-duration: 850ms;
    -o-transition-duration: 850ms;
    transition-duration:850ms;
    -webkit-animation-timing-function:cubic-bezier(0.9, 0.04, 0.98, 0.335);
    animation-timing-function:   cubic-bezier(0.9, 0.04, 0.98, 0.335);
 
      -webkit-transform: translate3d(-50%, 0, 0);
    transform: translate3d(-50%, 0, 0);     
	}
    
That's all for today, and thank you for reading. In the next part, we will learn how to share data and functions between controllers by using AngularJS services.
