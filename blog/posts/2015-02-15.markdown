---
author: fran
date: 2015-02-15
id: onsenui-1-2-2-new-components-lazy-repeat
title: "Sneak Peeking 1.2.2: Lazy Repeat (or Infinite Scrolling)"
tags: onsen ui
---

![OnsenUI lazy-repeat](/blog/content/images/2015/Feb/lazy_repeat.jpg)

One of the features that the upcoming release of OnsenUI provides is the `ons-lazy-repeat` component. Frequently we need to load lists of elements that are large enough to slow down the app or even freeze it until the loading is finished, worsening the user experience. Here is where the new `ons-lazy-repeat` comes in.

`ons-lazy-repeat` will consider the item heights in order to **display enough elements on the screen but wait to load the rest of them**, thus improving the loading times and the user experience while avoiding possible problems for slower devices or connections. Further, at the same time it loads new elements that come into view, `ons-lazy-repeat` will also **unload items when they are not visible** anymore. With this approach, a list with millions of items can be rendered without a drop in performance.

<!-- more -->

This feature becomes quite handy for many use cases, such as navigating through a list of items with a lot of images, animations or, for example, **a list of items generated by asynchronous calls**, so that these **items are created or retrieved from a database only when strictly needed**.

Let's see now an example application using `ons-lazy-repeat`. This app generates <big>10 million</big> (10,000,000) random items with images and text:

<iframe style="background-image: url('/blog/content/images/2015/Feb/nexus5-1.png'); padding: 65px 9px 58px 11px;  display:block; margin:auto;margin-top:30px; border:none;" src="https://frankdiox.github.io/OnsenUI-LazyRepeat/"  width="359" height="640" scrolling="no"></iframe>

### How to use lazy-repeat
We need a `delegate` object that will held all the required information for `ons-lazy-repeat`. Notice that most of the functions receive an `index` parameter that contains the order of the item in the list. Here is our `delegate` object:

```
$scope.MyDelegate = {
  calculateItemHeight: function(index) {
    return 91;
  },
  countItems: function() {
    return 10000000;
  },
  destroyItemScope: function(index, scope) {
    console.log("Destroyed item #" + index);
  },
  configureItemScope: function(index, itemScope) {
    ...
  }
};
```
In detail:

* `calculateItemHeight(index)` should return the height of an item, either static as in this example or dynamically.
* `countItems()` returns the total length of the list we want to display.
* `destroyItemScope(index, childScope)` is an optional method that will be triggered everytime an item is unloaded, so we can handle any related functionality.
* `configureItemScope(index, childScope)` contains the information about the items themselves, which can be dynamically created or loaded from a preset array of items:

```
configureItemScope: function(index, itemScope) {
  if (!itemScope.item) {
    console.log("Created item #" + index);
        
    itemScope.item = {
      title: 'Item #' + (index + 1),
      label: '',
      desc: '',
      rand: Math.random()
    };
        
    $http.get('https://baconipsum.com/api/?type=meat-and-filler&paras=1')
        .success(function(data) {
      itemScope.item.desc = data[0];
      itemScope.item.label = data[0].substr(0, data[0].indexOf(" ")) + 'bacon';
    })
        .error(function() {
      itemScope.item.desc = 'No bacon lorem ipsum';
      itemScope.item.label = 'No bacon';
    });
        
  }
}
```

In this example we define every item as an object containing four different attributes, and one of them, `item.desc`, will be **asynchronously loaded from an HTTP request** when `ons-lazy-repeat` sees fit. As mentioned before, `ons-lazy-repeat` will help to avoid excessive HTTP requests (or database requests) by just making the requests that the user really needs.

In the HTML, we just need add `ons-lazy-repeat` to our traditional tags, such as `<ons-list-item>`, specifying the `delegate` previously created:

```
<ons-list>
  <ons-list-item modifier="chevron" class="item" ons-lazy-repeat="MyDelegate">
    <ons-row>
      <ons-col width="80px"> 
        <img ng-src="http://lorempixel.com/60/60/?{{item.rand}}" class="item-thum"></img>
      </ons-col>
      <ons-col>
        <header>
          <span class="item-title">{{item.title}}</span>
          <span class="item-label">{{item.label}}</span>
        </header>
        <div ng-show="item.desc==''">
                  <p>
                        <span style='opacity: 0.7;'>
                            <ons-icon icon='fa-spinner' spin='true'></ons-icon>
                            Loading bacon...
                        </span>
                  </p>
        </div>
        <p class="item-desc">{{ item.desc }}</p>
      </ons-col>
    </ons-row>
  </ons-list-item>
</ons-list>
```

Remember that `MyDelegate` object must be attached to the scope of the same controller as the `<ons-list-item>` element is in. Also notice that this is a genereal attribute, which means that it is not limited to `<ons-list>`, but **works with any tag where we can figure out the height of the items**, such as `<div>` tags.

That's all about the new `ons-lazy-repeat` feature, surely you will find original ways to use it. You can check the [code of this project on Github](https://github.com/frankdiox/OnsenUI-LazyRepeat) and leave any question or feedback in the comments. Stay tuned for the next update!
