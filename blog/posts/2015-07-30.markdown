---
author: andreas
date: 2015-07-30
id: charts-angularjs-hybrid-app-nvd3
title: "Integrate Charts in your AngularJS Hybrid Apps with NVD3"
tags: tutorial, angular, onsen ui
category: tutorial
---

![D3.js](/blog/content/images/2015/Jul/d3.png)

There are many options out there if you want to display charts in hybrid apps. Since a hybrid app is basically a web application running HTML, JavaScript and CSS, you can use any JavaScript charting library or you can even generate charts in a backend and display them as static images.

In this article we will take a look at [NVD3](http://nvd3.org/) which are reusable charts based on the D3 data visualization library. We will see how it can be used to create a chart using pure JavaScript and also how the chart can be wrapped in an AngularJS directive.

<!-- more -->

Some other popular JavaScript libraries are:

* [D3.js](http://d3js.org/) - D3 stands for _Data-Driven Documents_. It's a very powerful library for data visualization that uses SVG. It's quite low-level so even making a simple chart can be a quite complex task, but the end result is stunning.
* [Chart.js](http://www.chartjs.org/) - Simpler to use than D3.js but still very customizable. Instead of SVG it's using canvas, so it's a very good option if you need to support older browsers or WebViews.
* [n3-charts](http://n3-charts.github.io/line-chart/#/) - This library is built on top of AngularJS and D3.js. It makes displaying charts in an AngularJS a breeze.

We've recently been discussing if we should support a charting library in Onsen UI and if so which one we should choose. One of the best candidates is NVD3 since it provides a good combination of ease-of-use and the powerful data visualization of D3.js. It's also very simple to integrate in AngularJS apps, as we will see in this article.

Some good things about NVD3:

* Responsive - Charts created using NVD3 will be rendered differently depending on the size of the screen and the orientation.
* Dynamic - Charts can be refreshed easily when the data changes.

Below is a simple app using NVD3 and Onsen UI that shows the population for all the countries on Earth.

<iframe style="background-image: url('/blog/content/images/2015/Feb/nexus5-1.png'); padding: 65px 9px 58px 11px;  display:block; margin:auto;margin-top:30px; border:none;" src="https://argelius.github.io/onsen-world-pop/" width="359" height="640" scrolling="no" class="lazy-hidden"></iframe>

The population data in the app is fetched from the [World Population API](http://api.population.io/).

### Creating a chart with NVD3

First create a new HTML file and load the following resources:

* `d3.js`
* `nv.d3.js`
* `nv.d3.css`

They are all available on CDN, so we can do:

```html
<html>
  <head>
    <title>My chart</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.1/nv.d3.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.1/nv.d3.min.css">
    <script src="chart.js"></script>
  </head>
  <body>
    <!-- D3 will use this "svg" tag to render the chart! -->
    <svg></svg>
  </body>
</html>
```

Let's first make a chart and render it on the screen. Create a file called `chart.js` and add the following code:

```javacript
var data = []; // We'll leave this empty for now.

nv.addGraph(function() {
  // Creates a new Line chart.
  var chart = nv.models.lineChart()
    .showLegend(false)
    .showYAxis(true)
    .showXAxis(true);

  // Tells NVD3 to display values with two decimal places.
  chart.xAxis
    .axisLabel('x')
    .tickFormat(d3.format('.2f'));

  chart.yAxis
    .axisLabel('y')
    .tickFormat(d3.format('.2f'));

  // Select the "svg" tag and render the chart.
  d3.select('svg')
    .datum(data)
    .call(chart);

  // This will render the chart every time the
  // window is resized, so it will always fit the
  // screen.
  nv.utils.windowResize(function() {
    chart.update()
  });

  return chart;
});
```

If you run this code in the browser it will display the text "No Data Available.". Which makes sense since we haven't added any data yet. The data should be defined with the following format:

```
var data = [{
  key: 'Label',
  values: [{x: 0, y: 0}, {x: 1, y: 1}, ...]
}];
```

So let's go ahead and generate some simple data and plug it into the chart:

```javascript
var data = []

// Generate y = ln(x) for x = [0..e].
for (var i = 1; i <= Math.E; i += 0.01) {
  data.push({x: i, y: Math.log(i)});
}
```

Saving and reloading the browser will show something like this:

<p data-height="266" data-theme-id="13819" data-slug-hash="JdeOLd" data-default-tab="result" data-user="argelius" class='codepen'>See the Pen <a href='http://codepen.io/argelius/pen/JdeOLd/'>JdeOLd</a> by Andreas Argelius (<a href='http://codepen.io/argelius'>@argelius</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

### Wrapping a NVD3 chart with an AngularJS directive

One of the strength of AngularJS is data-binding, so let's make an AngularJS directive where we can bind the chart data to an HTML attribute. In this section we will create a `<line-chart>` component that can be used in the following way:

```html
<line-chart data="data" height="200px" width="120px"></line-chart>
```

We also add some `<input>` tags so the user can change the data. The final markup will look like this:

```html
<div ng-app="app" ng-controller="MyController as main">
  <line-chart height="250px" data="main.data"></line-chart>

  <h3>Change the values: </h3>

  <p ng-repeat="datum in main.data[0].values">
    <input type="number" ng-model="datum.y">
  </p>
</div>
```

Quite short but it's all that's needed! We'll bootstrap the app and initialize the `data` array with some dummy data in the controller:

```javacript
angular.module('app', [])
  .controller('MyController', ['$scope', function($scope) {
    this.data = [{
      key: 'Data',
      values: [{
        x: 0,
        y: 0
      }, {
        x: 1,
        y: 1
      }, {
        x: 2,
        y: 4
      }, {
        x: 3,
        y: 9
      }, {
        x: 4,
        y: 16
      }, {
        x: 5,
        y: 25
      }]
    }];
  }]);
```

At this point we have not written any code for the directive so only the input elements will work. Implementing the directive is pretty straight forward and we'll borrow some code from the previous pure JavaScript example. I've used two services (`d3` and `nv`) that just return the respective objects.

```javascript
angular.module('app')
  .directive('lineChart', ['d3', 'nv', function(d3, nv) {
    return {
      restrict: 'E',
      scope: {
        // Bind the data to the directive scope.
        data: '=',
        // Allow the user to change the dimensions of the chart.
        height: '@',
        width: '@'
      },
      // The svg element is needed by D3.
      template: '<svg ng-attr-height="{{ height }}" ng-attr-width="{{ width }}"></svg>',
      link: function(scope, element) {
        var svg = element.find('svg'),
          chart;

        // This function is called when the data is changed.
        var update = function() {
          d3.select(svg[0])
            .datum(scope.data)
            .call(chart);
        };

        // Render the chart every time the data changes.
        // The data is serialized in order to easily check for changes.
        scope.$watch(function() { return angular.toJson(scope.data); }, function() {
          // The chart may not have been initialized at this point so we need
          // to account for that.
          if (chart) {
            update();
          }
        });

        // The chart can not be rendered at once, since the chart
        // creation is asynchronous.
        scope.$on('chartinit', update);

        nv.addGraph(function() {
          // This code is the same as the example before.
          chart = nv.models.lineChart()
            .showLegend(false)
            .showYAxis(true)
            .showXAxis(true);

          chart.xAxis
            .axisLabel('x')
            .tickFormat(d3.format('.2f'));

          chart.yAxis
            .axisLabel('y')
            .tickFormat(d3.format('.2f'));

          nv.utils.windowResize(function() {
            chart.update()
          });

          // Emit an event so we can know that the
          // chart has been initialized.
          scope.$emit('chartinit');

          return chart;
        });
      }
    }
  }]);
```

In the `$watch` callback we check if the chart has been initialized before calling the `update()` function. Since `nv.addGraph()` is asynchronous the callback might fire before the chart has been created, in which case we get the following error:

```
TypeError: Cannot read property 'apply' of undefined
```

You can play around with the chart below. Because of the data-binding the chart will be re-rendered every time the data changes.

<p data-height="580" data-theme-id="13819" data-slug-hash="VLVyjM" data-default-tab="result" data-user="argelius" class='codepen'>See the Pen <a href='http://codepen.io/argelius/pen/VLVyjM/'>NVD3 Line Chart Sample</a> by Andreas Argelius (<a href='http://codepen.io/argelius'>@argelius</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

A directive similar to this one was used in the example at the start of the article. The code can be found on my [GitHub page](https://github.com/argelius/onsen-world-pop).

### Conclusion

If you have any questions about the content of the article please write a comment below. In the case you found some mistakes or you would like to improve the content, feel free to make a pull request to the [website repository](https://github.com/OnsenUI/onsen.io/tree/master/blog/posts). We appreciate all kinds of feedback!
