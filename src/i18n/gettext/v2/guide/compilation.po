msgid ""
msgstr ""
"Project-Id-Version: \n"
"Language-Team: \n"
"PO-Revision-Date: 2018-08-24 12:15+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2018-08-20 04:18+0000\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.1.1\n"
"Last-Translator: \n"
"Language: ja\n"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:1
msgid ""
"title: 'Components Compilation'\n"
"order: 145\n"
"tocGroup: guide\n"
"layout: docs.html.eco"
msgstr ""
"title: 'コンパイル機能'\n"
"order: 145\n"
"tocGroup: guide\n"
"layout: docs.html.eco"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:2
msgid ""
"description: 'Learn what Onsen UI is all about in this advanced guide "
"series: component compilation'"
msgstr "description: 'Onsen UIのコンパイル機能の説明です。'"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:3
msgid "<%- @markdown => %>"
msgstr "<%- @markdown => %>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:4
msgid "Components Compilation"
msgstr "コンパイル機能"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:5
msgid ""
"In order to provide you with a very simple API, some Onsen UI components "
"need to automatically add \"boilerplate\" content upon creation. This "
"process is called component compilation, where an element and its "
"correspondent content is wrapped and moved around, or new classes are added "
"to it. In general, this process is transparent to developers and there's no "
"need to worry about. However, there are situations where knowing how to "
"bypass compilation might be useful (e.g. when implementing new framework "
"bindings). This section explains what kind of changes some Onsen UI "
"components automatically make to their inner content."
msgstr ""
"いくつかのOnsen UIのコンポーネントは、APIをシンプルにするために、コンポーネン"
"ト内に自動的に定型文（boilerplate）を挿入する機能を備えています。Onsen UIでは"
"このプロセスを**コンパイル**と呼びます。コンパイルの過程では、Onsen UIのコン"
"ポーネント内に配置された要素やその内容が移動されたり、ラップされたり、新しい"
"クラスが付加されたりします。コンパイルは裏で自動的に実行されるため（透過的で"
"あるため）、開発者は基本的にコンパイルを意識する必要はありません。しかし、場"
"合によってはコンパイルの影響を回避する方法を知っておいた方が便利です（例えば"
"新しいフレームワークバインディングを開発する時など）。この章ではOnsen UIのコ"
"ンポーネントがどんなコンパイルを行っているか、すなわちコンポーネント内に配置"
"された要素やその内容にどんな変更を加えているかを説明します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:6
msgid "Page Compilation"
msgstr "`ons-page`のコンパイル"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:7
msgid ""
"The most important changes perhaps occur during `ons-page` compilation. "
"There are basically 3 parts inside an `ons-page`:"
msgstr ""
"`ons-page`のコンパイル中にはいくつかの重要な変更が行われます。まず前提知識と"
"して、`ons-page`は3つの部分で構成されています:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:10
msgid "Background: Applies background color or image."
msgstr "背景コンテナ（background）: 背景色や背景画像を表示する部分です。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:13
msgid ""
"Scrollable content: Scrollable part where most of the content is included."
msgstr ""
"スクロール可能コンテナ（content）: スクロール可能な部分です。この部分にほとん"
"どの内容を入れることになります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:16
msgid "Fixed elements: Content that is fixed in the screen during scroll."
msgstr "固定要素: スクロールしても画面に固定表示される要素です。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:20
msgid ""
"Fixed elements can be natively implemented with `position: fixed` property, "
"bypassing Onsen UI's feature. However, this may cause too many troubles in "
"some mobile browsers when scrolling. Therefore, separating fixed content and "
"scrollable content in two different containers is recommended. You should "
"also be aware that `ons-page` filters fixed and scrollable content upon "
"creation, if you want to add extra content at a later time."
msgstr ""
"画面に何かを固定表示したいときは、固定したい要素に`position: fixed` プロパ"
"ティを付加すれば固定表示することができます。しかし、この方法はいくつかのモバ"
"イルブラウザでのスクロールにおいて、非常に多くのトラブルの原因になります。そ"
"のため、固定表示したい要素とスクロールさせたい要素は、後述する別々の場所に配"
"置することをお勧めします。その際、それらの要素は`ons-page`の初期化時に移動さ"
"れたりラップされたりすることがあるため、後からそれらの要素に内容を追加したり"
"する場合にはご注意ください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:21
msgid "Specifically, when you create a page like this:"
msgstr "具体例として、このようなページを作ったとします:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:22
msgid ""
"<ons-page>\n"
"  <ons-toolbar></ons-toolbar>\n"
"  Some content here\n"
"  <ons-input></ons-input>\n"
"  <ons-fab></ons-fab>\n"
"  <div>More content</div>\n"
"</ons-page>"
msgstr ""
"<ons-page>\n"
"  <ons-toolbar></ons-toolbar>\n"
"  コンテンツ\n"
"  <ons-input></ons-input>\n"
"  <ons-fab></ons-fab>\n"
"  <div>追加コンテンツ</div>\n"
"</ons-page>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:23
msgid "`ons-page` will compile in the following way:"
msgstr "このとき、`ons-page`は以下のようにコンパイルされます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:24
msgid ""
"<ons-page class=\"page\">\n"
"  <ons-toolbar></ons-toolbar>\n"
"  <div class=\"page__background\"></div>\n"
"  <div class=\"page__content\">\n"
"    Some content here\n"
"    <ons-input></ons-input>\n"
"    <div>More content</div>\n"
"  </div>\n"
"  <ons-fab></ons-fab>\n"
"</ons-page>"
msgstr ""
"<ons-page class=\"page\">\n"
"  <ons-toolbar></ons-toolbar>\n"
"  <div class=\"page__background\"></div>\n"
"  <div class=\"page__content\">\n"
"    コンテンツ\n"
"    <ons-input></ons-input>\n"
"    <div>追加コンテンツ</div>\n"
"  </div>\n"
"  <ons-fab></ons-fab>\n"
"</ons-page>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:25
msgid ""
"As you can see, it added `.page`, `div.page__background` and `div."
"page__content` automatically. `ons-toolbar` and `ons-fab` are fixed content "
"so they are left outside the previous wrappers. If you want to add an extra "
"`ons-fab` after all of this happens, you should add it as a direct child of "
"`ons-page`. However, other non-fixed elements like `ons-input` must be "
"appended inside `div.page__content`."
msgstr ""
"このように、`.page`や`div.page__background`、`div.page__content`が自動的に付"
"加されているのが分かると思います。一方で、`ons-toolbar`と`ons-fab`は固定要素"
"なので、前述のコンテナの外側に置かれたままになります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:26
msgid ""
"Knowing this, it is very easy to bypass the compilation process. If you "
"directly provide the previous structure, Onsen UI won't need to change "
"anything at all. You can also include `<div class=\"content\">` or `<div "
"class=\"background\">` and the other necessary classes (`page__content` and "
"`page__background`) will be added automatically. Example:"
msgstr ""
"コンパイルを迂回（bypass）するのはとても簡単です。コンパイル後の構造を最初か"
"ら書いておけば、Onsen UIは何も変更を行いません。その際、`<div class="
"\"page__content\">`や`<div class=\"page__background\">`の代わりに、`<div "
"class=\"content\">`や`<div class=\"background\">`といったクラス名も使うことが"
"できます。その場合、`page__content`や`page__background`などといったクラスが自"
"動的に付加されます。例:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:27
msgid ""
"<ons-page>\n"
"  <ons-toolbar></ons-toolbar>\n"
"  <div class=\"content\">\n"
"    Some content here\n"
"    <ons-input></ons-input>\n"
"    <div>More content</div>\n"
"  </div>\n"
"  <ons-fab></ons-fab>\n"
"</ons-page>"
msgstr ""
"<ons-page>\n"
"  <ons-toolbar></ons-toolbar>\n"
"  <div class=\"content\">\n"
"    コンテンツ\n"
"    <ons-input></ons-input>\n"
"    <div>追加コンテンツ</div>\n"
"  </div>\n"
"  <ons-fab></ons-fab>\n"
"</ons-page>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:28
msgid "Toolbar Compilation"
msgstr "`ons-toolbar`のコンパイル"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:29
msgid ""
"`ons-toolbar` divides its layout in three parts: `div.left`, `div.center` "
"and `div.right`. However, these classes are simple aliases for the real "
"classes. A normal toolbar will compile its content as follows:"
msgstr ""
"`ons-toolbar`は`div.left`と`div.center`、`div.right`の3つのコンテナに分かれて"
"います。`left`と`center`、`right`は本物のクラス（`toolbar__left`と"
"`toolbar__center`、`toolbar__right`）の別名（alias）です。一般的な`ons-"
"toolbar`は以下のようにコンパイルされます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:30
msgid ""
"<ons-toolbar class=\"toolbar\">\n"
"  <div class=\"left toolbar__left\">Left content</div>\n"
"  <div class=\"center toolbar__center\">Center content</div>\n"
"  <div class=\"right toolbar__right\">Right content</div>\n"
"</ons-toolbar>"
msgstr ""
"<ons-toolbar class=\"toolbar\">\n"
"  <div class=\"left toolbar__left\">左側のコンテンツ</div>\n"
"  <div class=\"center toolbar__center\">中央のコンテンツ</div>\n"
"  <div class=\"right toolbar__right\">右側のコンテンツ</div>\n"
"</ons-toolbar>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:31
msgid ""
"In addition, these containers are sorted automatically to always match "
"\"left - center - right\" order."
msgstr ""
"なお、これらの3つのコンテナは「left - center - right」の順番になるように自動"
"的にソートされます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:32
msgid "List Item Compilation"
msgstr "`ons-list-item`のコンパイル"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:33
msgid ""
"Similar to the toolbar example, `ons-list-item` also divides its layout in "
"left, center and right parts:"
msgstr ""
"`ons-toolbar`の例と同じく、`ons-list-item`も左・中央・右の3つのコンテナに分か"
"れます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:34
msgid ""
"<ons-list-item class=\"list-item\">\n"
"  <div class=\"left list-item__left\">Left content</div>\n"
"  <div class=\"center list-item__center\">Center content</div>\n"
"  <div class=\"right list-item__right\">Right content</div>\n"
"</ons-list-item>"
msgstr ""
"<ons-list-item class=\"list-item\">\n"
"  <div class=\"left list-item__left\">左側のコンテンツ</div>\n"
"  <div class=\"center list-item__center\">中央のコンテンツ</div>\n"
"  <div class=\"right list-item__right\">右側のコンテンツ</div>\n"
"</ons-list-item>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:35
msgid ""
"If none of those sections is provided, `ons-list-item` will wrap all its "
"content inside `div.list-item__center`."
msgstr ""
"コンパイル前の時点で`left`、`center`、`right`などのコンテナがない場合、`ons-"
"list-item`は自動的に`div.list-item__center`コンテナを追加して内容をラップしま"
"す。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:36
msgid "Select Compilation"
msgstr "`ons-select`のコンパイル"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:37
msgid ""
"`ons-select` component simply adds a native `select` element if none is "
"provided:"
msgstr "`ons-select`は必要に応じて`select`要素を自動で追加します:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:38
msgid ""
"<ons-select>\n"
"  <option>Opt 1</option>\n"
"  <option>Opt 2</option>\n"
"</ons-select>"
msgstr ""
"<ons-select>\n"
"  <option>オプション1</option>\n"
"  <option>オプション2</option>\n"
"</ons-select>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:39
msgid "Turns into:"
msgstr "上記のコードは以下のようにコンパイルされます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/compilation.html:40
msgid ""
"<ons-select class=\"select\">\n"
"  <select class=\"select-input\">\n"
"    <option>Opt 1</option>\n"
"    <option>Opt 2</option>\n"
"  </select>\n"
"</ons-select>"
msgstr ""
"<ons-select class=\"select\">\n"
"  <select class=\"select-input\">\n"
"    <option>オプション1</option>\n"
"    <option>オプション2</option>\n"
"  </select>\n"
"</ons-select>"
