msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2018-08-27 01:40+0000\n"
"PO-Revision-Date: 2018-08-28 12:06+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.1.1\n"
"X-Poedit-Basepath: .\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:1
msgid ""
"title: 'Page Lifecycle'\n"
"order: 150\n"
"tocGroup: guide\n"
"layout: docs.html.eco"
msgstr ""
"title: 'ページのライフサイクル'\n"
"order: 150\n"
"tocGroup: guide\n"
"layout: docs.html.eco"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:2
msgid ""
"description: 'Learn what Onsen UI is all about in this advanced guide "
"series: page lifecycle'"
msgstr "description: 'Onsen UIのページのライフサイクルについて説明します。'"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:3
msgid "<%- @markdown => %>"
msgstr "<%- @markdown => %>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:4
msgid "Page Lifecycle"
msgstr "ページのライフサイクル"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:5
msgid ""
"Due to the asynchronous nature of JavaScript and animations, Onsen UI "
"provides `ons-page` life cycle to perform actions at the right time. Loading "
"data, updating the view, saving data before destroying... all of these and "
"more actions are examples of what can be done thanks to page's life cycle."
msgstr ""
"JavaScriptの処理やアニメーションは非同期的に動作するため、Onsen UIは同期的に"
"（狙ったタイミングで）特定の処理を実行できるように`ons-page`のライフサイクル"
"を提供しています。ページのライフサイクルを使うと、データの事前読み込み、"
"ビューの更新、ページの破棄の前のデータ保存などができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:6
msgid "Events"
msgstr "イベント"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:7
msgid ""
"`<ons-page>` provides a set of DOM events that will be fired in unique and "
"set times of its life cycle. Use these events to alter the behavior on each "
"page."
msgstr ""
"`<ons-page>`はライフサイクルの中の決まったタイミングでいくつかのDOMイベントを"
"発火します。各ページの振る舞い（behavior）を調整したい場合にはこれらのイベン"
"トを使用します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:10
msgid ""
"**`init` event** is fired after `<ons-page>` is attached to DOM. Use this "
"event to initialize the code or dynamic content of a page when it is created "
"(before it is shown)."
msgstr ""
"**`init`イベント**は`<ons-page>`がDOMにアタッチされると発火します。ページが作"
"成されてから表示されるまでの間に、何らかの初期化処理を実行したり、ページに動"
"的な内容を追加したりしたい場合にはこのイベントを使ってください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:13
msgid ""
"**`destroy` event** is fired before `<ons-page>` is destroyed and prior to "
"DOM detachment. Use this event to clean up or save anything you need."
msgstr ""
"**`destroy`イベント**は`<ons-page>`がDOMからデアタッチされる直前に、ページが"
"破棄される際に発火します。状態をクリーンアップしたりデータを保存したりしたい"
"場合にはこのイベントを使ってください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:16
msgid ""
"**`show` event** is fired every time `<ons-page>` comes into view, i.e. when "
"a new page is created and shown immediately or when an existing page shows "
"up. Use this event to run code every time a page appears."
msgstr ""
"**`show`イベント**は`<ons-page>`が画面に現れるたびに発火します。例えば新しい"
"ページが作成されて表示されたり、既存のページが再び表示されたりした場合に発火"
"します。ページが表示された際に毎回行いたい処理がある場合にはこのイベントを"
"使ってください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:19
msgid ""
"**`hide` event** is fired every time `<ons-page>` disappears from view, i.e. "
"when a visible page is destroyed or is hidden but still exists in the page "
"stack. Use this event to run code every time a page disappears."
msgstr ""
"**`hide`イベント**は`<ons-page>`が画面から隠れた場合に発火します。例えば画面"
"に表示中のページが破棄されたり、ページスタックには残っているが画面からページ"
"が隠れてしまったりした場合に発火します。ページが隠れるたびに毎回行いたい処理"
"がある場合にはこのイベントを使ってください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:23
msgid ""
"Page lifecycle events will be propagated to the page’s descendants so they "
"are correspondingly shown, hidden, or destroyed. For example, destroying "
"`<ons-navigator>` will throw `hide` event only for the displayed page "
"(navigator’s top page) and destroy event for every page in navigator’s page "
"stack."
msgstr ""
"ページライフサイクルイベントは子孫ページに伝播し、子孫ページは連鎖的に"
"`show`、`hide`、`destroy`されます。例えば`<ons-navigator>`を破棄すると、画面"
"に表示中のページ（ナビゲーターの最上位のページ）に`hide`イベントが発火し、ナ"
"ビゲーターのページスタックの全ページに`destroy`イベントが発火します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:24
msgid ""
"Since lifecycle events are normal DOM events and bubble up, you can add a "
"listener to the document or any parent element of the page. The event object "
"contains a reference to the page itself (`event.target`)."
msgstr ""
"ライフサイクルイベントは通常のDOMイベントであり、バブリング（bubbling）するの"
"で、documentや任意の親要素にリスナーを追加することでイベントを捕捉することが"
"できます。その際、イベントオブジェクトには、ページへの参照が`event.target`に"
"格納されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:25
msgid ""
"<ons-page id=\"page1\">This is a blank page</ons-page>\n"
"\n"
"<script>\n"
"document.addEventListener('init', function(event) {\n"
"  if (event.target.matches('#page1')) {\n"
"    ons.notification.alert('Page 1 is initiated.');\n"
"    // Set up content...\n"
"  }\n"
"}, false);\n"
"</script>"
msgstr ""
"<ons-page id=\"page1\">空ページ</ons-page>\n"
"\n"
"<script>\n"
"document.addEventListener('init', function(event) {\n"
"  if (event.target.matches('#page1')) {\n"
"    ons.notification.alert('ページ1が初期化されました');\n"
"    // コンテンツを準備...\n"
"  }\n"
"}, false);\n"
"</script>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:26
msgid "Hooks"
msgstr "フック"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:27
msgid ""
" As the support for native `<template>` elements had been added since "
"v2.4.0, lifecycle hooks are also available. Hooks are run at the same time "
"as the corresponding events:"
msgstr ""
" v2.4.0 からの`<template>`要素のサポートにより、ライフサイクルイベントに加え"
"てライフサイクルフックが使えるようになりました。フックは対応するイベントと同"
"じタイミングで実行されます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:28
msgid ""
"<template id=\"page1.html\">\n"
"  <ons-page>\n"
"    <ons-toolbar>\n"
"      <div class=\"center\"></div>\n"
"    </ons-toolbar>\n"
"    <!-- More content here -->\n"
"\n"
"    <script>\n"
"      ons.getScriptPage().onInit = function() {\n"
"        // Set up page's content or anything else\n"
"        this.querySelector('ons-toolbar .center').innerHTML = 'Title';\n"
"\n"
"        this.onShow = function() { ... };\n"
"        this.onHide = function() { ... };\n"
"        this.onDestroy = function() { ... };\n"
"      };\n"
"    </script>\n"
"  </ons-page>\n"
"</template>"
msgstr ""
"<template id=\"page1.html\">\n"
"  <ons-page>\n"
"    <ons-toolbar>\n"
"      <div class=\"center\"></div>\n"
"    </ons-toolbar>\n"
"    <!-- 追加コンテンツ -->\n"
"\n"
"    <script>\n"
"      ons.getScriptPage().onInit = function() {\n"
"        // ページのコンテンツやその他の内容を準備\n"
"        this.querySelector('ons-toolbar .center').innerHTML = 'Title';\n"
"\n"
"        this.onShow = function() { ... };\n"
"        this.onHide = function() { ... };\n"
"        this.onDestroy = function() { ... };\n"
"      };\n"
"    </script>\n"
"  </ons-page>\n"
"</template>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:29
msgid ""
"Keep in mind that there can only be 1 root node per template (an `ons-"
"page`). Optionally, `<template>` elements allow synchronous `<script></"
"script>` tags inside that run when the element is created and attached to "
"the DOM."
msgstr ""
"ここで、テンプレート（`ons-page`）直下のノードは1つである必要があることに注意"
"してください。また、オプション機能として、`<template>`要素には`<script></"
"script>`タグを入れることができます。`<template>`要素に`<script></script>`タグ"
"を入れると、テンプレートが作成されてDOMにアタッチされたタイミングでスクリプト"
"が実行されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:31
msgid ""
" This script is evaluated in the global scope and anything that you write "
"here might affect any other part of your app. For example, variables "
"declared in this script will pollute the global scope unless it is wrapped "
"inside a closure."
msgstr ""
" スクリプトはグローバルスコープ内で評価されるため、書く内容によってはアプリの"
"他の部分に影響する可能性があります。例えば、スクリプト内で変数を宣言すると、"
"グローバルスコープが汚染されます。これを防ぐには、変数宣言をクロージャでラッ"
"プする必要があります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:33
msgid ""
"In the previous example, `ons.getScriptPage()` method simply gets the parent "
"`ons-page` that has just been attached. Notice that this method __only works "
"in this situation__ (inside `scritp` tags and direct child of `ons-page`) "
"and was included in `onsenui@2.5.2`. Another alternative is getting the page "
"element by class or id."
msgstr ""
"上述のサンプルコードのように、`ons.getScriptPage()`メソッドを使うと、"
"`<script></script>`タグの親の位置にある、DOMにアタッチされたばかりの`ons-"
"page`を取得することができます。このメソッドは__テンプレート内でのみ使える"
"__（`ons-page`の子の中で、かつ`script`タグの中で呼ぶ必要がある）ことに注意し"
"てください。また、`onsenui@2.5.2`で初めて追加されたメソッドであることにも注意"
"してください。このメソッドを使わない場合は、classやidを指定して直接`ons-page`"
"を取得する必要があります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/lifecycle.html:34
msgid ""
"  It is up to the developer choosing between events or hooks. Events allow "
"separating the view from the logic while hooks provide a more compact "
"approach."
msgstr ""
" イベントを使うかフックを使うかは自由です。イベントはビューとロジックを分離で"
"きるメリットがあり、フックはコードが短くなるメリットがあります。"
