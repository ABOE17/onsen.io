---
layout: 'docpad_en'
page: 'guide'
title: 'Onsen UI Guide'
needHelp: true
autotoc: true
---

## Onsen UI Guide

### Loading Onsen UI in Your Project

Note: For faster instructions to use Onsen UI in your project, please refer to [Getting Started](/guide/getting_started.html).

Even though Onsen UI uses AngularJS to provide custom elements, it is *not required* to understand AngularJS. Onsen UI can be used with any JS frameworks including jQuery or Backbone.js, or with AngularJS to have a tighter integration.

#### Using Onsen UI with jQuery, or with any JS frameworks

Onsen UI provides a way to use without understanding AngularJS. For instance, the example below describes a sample app that is using Onsen UI and jQuery:

```
<!doctype html>
<meta charset="utf-8">
<link rel="stylesheet" href="lib/onsen/css/onsenui.css">
<link rel="stylesheet" href="lib/onsen/css/onsen-css-components.css">
<script src="lib/onsen/js/angular/angular.js"></script>
<script src="lib/onsen/js/onsenui.js"></script>
<script>
  ons.bootstrap();
  ons.ready(function() {
    // Add another Onsen UI element
    var content = document.getElementById("#my-content");
    content.innerHTML="<ons-button>Another Button</ons-button>";
    ons.compile(content);
  });
</script>
<body>
  <ons-navigator title="Navigator" var="myNavigator">
    <ons-page>
      <ons-button onclick="myNavigator.pushPage('page2.html')">Next Page</ons-button>
      <div id="my-content"></div>
    </ons-page>
  </ons-navigator>
</body>
```

As you see in the code, it has two tricks. One is `var` attribute, the other is `ons.compile` function.

When you specify `var` attribute when defining a component, the object is also defined in a `window` object. For details, please see [access to the component object from your code](#from-code).

`ons.compile` function converts your custom elements based HTML to a normal DOM structure. Most browsers does not (yet) support custom elements by default, you need to call the function every time to make the magic happen.

#### Using Onsen UI with AngularJS

Onsen UI app is actually an AngularJS app. Here is the minimum boilerplate which should be very familiar to the AngularJS users.

```
<!doctype html>
<html lang="en" ng-app="my-app">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="lib/onsen/css/onsenui.css"/>
    <link rel="stylesheet" href="lib/onsen/css/onsen-css-components.css"/>
    <script src="lib/onsen/js/angular/angular.js"></script>
    <script src="lib/onsen/js/onsenui.js"></script>
    <script>
      var module = angular.module('my-app', ['onsen']);
      module.controller('AppController', function($scope) { });
      module.controller('PageController', function($scope) {
        ons.ready(function() {
          // Init code here
        });
      });
    </script>
  </head>
  <body ng-controller="AppController">
    <ons-navigator var="navigator">
      <ons-page ng-controller="PageController">
        <!-- Page content -->
      </ons-page>
    </ons-navigator>
  </body>
</html>
```

### Managing Multiple Pages

It is important to consider UI patterns before start implementation. Onsen UI supports 4 commonly used UI patterns. And remember, you can combine two or more patterns in your app. For example, a sliding menu app can also have page navigations.

#### Navigation pattern

This is the most common pattern if you want to have a parent-child relationship between pages. You can link to a child page from a button or a list item. In Onsen UI, you can follow navigation pattern by using [`<ons-navigator>`](components.html#ons-navigator) and [`<ons-toolbar>`](components.html#ons-toolbar).

#### Sliding menu pattern

Also referred to as a Menu pattern, it is useful if the app needs many pages in the same level. In Onsen UI, [`<ons-sliding-menu>`](components.html#ons-sliding-menu) component supports this pattern. It also has swipe support when displaying or hiding sliding menu.

#### Tab bar pattern

More commonly seen in iPhone and iPad apps, tab bar is displayed in the bottom of the page. Usually the tab bar items have an icon and a text. This pattern is frequently used when you want to provide several features in the app. Onsen UI way to display a tab bar is to use [`<ons-tabbar>`](components.html#ons-tabbar) component.

#### Split view pattern

This pattern is usually used for larger screen devices like tablets, or when rotating display in horizontal. It divides the screen into 2 columns, and displays two separate information. [`<ons-split-view>`](components.html#ons-split-view) component allows you to have this pattern. It also has capability to transform to a sliding menu pattern on smaller devices or displayed vertically.

### Page Navigation

In Onsen UI, a page navigation is done by the [`<ons-navigator>`](components.html#ons-navigator). Ons-navigator is a navigation controller that does not have displayed content. Therefore, you usually use a [`<ons-toolbar>`](components.html#ons-toolbar) and add a toolbar on top of the page. Navigator provides screen transitions with smooth animation, and is used to create a parent-child relationship.

#### `<ons-navigator>` overview

[`<ons-navigator>`](components.html#ons-navigator) is a page stack manager + transition animator. A new page added to the stack will have screen transition with animation. All pages in the stacks are the form of [`<ons-page>`](components.html#ons-page) elements; therefore only [`<ons-page>`](components.html#ons-page) components can be placed directly under a [`<ons-navigator>`](components.html#ons-navigator) element.

A page usually have a toolbar on top of the page. Therefore, [`<ons-toolbar>`](components.html#ons-toolbar) element is commonly placed under [`<ons-page>`](components.html#ons-page) element to provide a back button support and the page title.

<%- @partial('codepen', { id: "yrhtv" } ) %>

#### Display a new page

To add a new page to the stack, use `pushPage()` method in the navigator object. You can use `var` attribute of `<ons-navigator>` to refer the navigator object from JavaScript code.

```
<ons-navigator var="myNavigator"></ons-navigator>
<script>
var options = {
  animation: 'slide', // What animation to use
  onTransitionEnd: function() {} // Called when finishing transition animation
};
myNavigator.pushPage("page2.html", options);
</script>      
```

As seen in the code, the configuration options can be set in the second parameter of `pushPage()` method.

#### Returning from a page

Similarly, use `popPage()` method to remove the current foreground page from the stack.

```
<ons-navigator var="myNavigator"></ons-navigator>
<script>
myNavigator.popPage();
</script>
```

#### Transition animation

`popPage()` method can specify the following animation patterns: `slide`, `lift`, `fade` and `none`.

1. Slide animation (default)

  The animation effect differs between iOS and Android to correspond to the native transition.

  ```
  navigator.pushPage("page2.html", { animation: "slide" }):
  ```

2. Lift animation

  ```
  navigator.pushPage("page2.html", { animation: "lift" }):
  ```

3. Fade-in & fade-out animation

  ```
  navigator.pushPage("page2.html", { animation: "fade" }):
  ```

4. No animation

  ```
  navigator.pushPage("page2.html", { animation: "none" }):
  ```

<%- @partial('codepen', { id: "FLsIE" } ) %>

Furthermore, you can customize the transition animation by specifying a new `NavigatorTransitionAnimator` object to the `animation` parameter.

```
pushPage('page2.html', {animation: new MyCustomAnimator})
```

For more details, please see `NavigatorTransitionAnimator` source code located under `framework/view`.

#### Managing page stacks

Navigator has several other APIs to manage page stacks. It is useful to have a fine-grain control.

##### navigator.getCurrentPage()

Get a `page` object of the current page. A `page` object has following properties and functions.

- `destroy()` method

  When it is called, the page is removed from the page stack.

- `options` object

  An object that hold page configurations. See `pushPage()` method description for details.

```
myNavigator.pushPage("page2.html", { param1: "value1", param2: "value2" });
var page = myNavigator.getCurrentPage();
console.log(page.options.param1); // Will return "value1"
```

##### navigator.getPages()

Returns an array of `page` objects from the navigator. See `navigator.getCurrentPage()` method for the details how to use `page` object.

```
// Remove the 2nd topmost page from the page stack
var pages = navigator.getPages();
pages[1].destroy();
// Now a popPage() will display the 3rd page
```

##### navigator.resetToPage(page, options)

Clears page stack and add the specified page to the new stack. The `options` parameter corresponds to the `navigator.pushPage` API.

#### Adding a toolbar

A toolbar is defined as `<ons-toolbar>` component. Here is the typical example of a toolbar.

```
<ons-toolbar>
  <div class="left">
    <ons-back-button>Back</ons-back-button>
  </div>
  <div class="center">Title</div>
  <div class="right">
    <ons-toolbar-button>
      <ons-icon icon="bars">
    </ons-toolbar-button>
  </div>
 </ons-toolbar>
```

<%- @partial('codepen', { id: "aHmGL" } ) %>

The toolbar is divided into 3 sections (left, center, and right), and they can be specified as class names (`left`, `center`, and `right`). You can use [`<ons-icon>`](components.html#ons-icon) to display an icon, [`<ons-toolbar-button>`](components.html#ons-toolbar-button) or [`<ons-back-button>`](components.html#ons-back-button) to place an button, or insert any HTML content.

Here are several examples when using `<ons-toolbar>`.

1. Example with a button and an icon

  ```
  <ons-toolbar>
    <div class="left"><ons-toolbar-button>Button</ons-toolbar-button></div>
    <div class="center">Button and Icon</div>
    <div class="right"><ons-toolbar-button><ons-icon icon="bars"></ons-icon></ons-toolbar-button></div>
  </ons-toolbar>
  ```

2. Example with a search box

  ```
  <ons-toolbar>
	  <div class="left"><ons-back-button>Back</ons-back-button></div>
	  <div class="center">Search</div>
	  <div class="right"><input type="search" class="search-input" placeholder="Keyword"></input></div>
  </ons-toolbar>
  ```

3. Example with custom image

  ```
  <ons-toolbar>
    <div class="left"><ons-back-button>Back</ons-back-button></div>
    <div class="center"><img src="custom_title.png"></div>
    <div class="right"><ons-search-input></ons-search-input></div>
  </ons-toolbar>
  ```

#### Android back button

Onsen UI supports Android back button. So, if the app is running on an Android device and using Cordova, pressing the back button will trigger a navigator's `popPage()` method.

If you additionally want to only show a back button from iOS devices, [`<ons-if-platform>`](components.html#ons-if-platform) is the way.

```
<ons-toolbar>
  <div class="left"><ons-back-button ons-if-platform="ios">Back</ons-back-button></div>
  <div class="center">Page Title</div>
</ons-toolbar>
```

#### Navigation events

[`<ons-navigator>`](components.html#ons-navigator) has several events that can be hooked to do the specific jobs. For instance, you can cancel the page transition under some conditions.

There are several events defined in the navigator: `prepush`, `postpush`, `prepop`, `postpop`. They are called before or after the `pushPage` or `popPage` action.

The callback function will get an `event` object. The `event` object has several properties and methods for manipulation. For example, the following code cancels the `pushPage` behavior.

```
ons.ready(function() {
  myNavigator.on('prepush', function(event) {
    var page = event.currentPage; // Get current page object
    if (needsCancel) {
      event.cancel(); // Cancel operation
    }
  });
});
```

##### `prepush` and `prepop` event

These events are fired before pushPage and popPage. `event` object has the following parameters.

- `currentPage`: Page object. See [Managing Page Stacks](#managing-page-stacks) for details.
- `cancel()`: Call to cancel transition.
- `navigator`: The `<ons-navigator>` object.

##### `postpush` and `postpop` event

These events are fired before the pushPage and popPage. `event` object has the following parameters.

- `leavePage`: Page object of the current page.
- `enterPage`: Page object of the new page.
- `navigator`: `<ons-navigator>` object.

### Using Sliding Menu

Sliding menu consists of two pages, which are referred to as above page and behind page. The behind page is also called as a menu page, which is hidden and shown from the edge. A behind page can be displayed when tapping a button, or swiping from the edge of the screen.

A behind page may contain any content in HTML, and typically a menu with links to the different pages. A above page will display the main content. You can also place a [`<ons-navigator>`](components.html#ons-navigator) in the above page to allow navigation to even more pages.

#### `<Ons-sliding-menu>` Overview

[`<ons-sliding-menu>`](components.html#ons-sliding-menu) component has an `above-page` and a `behind-page`. Those pages should be specified as attributes. It also has `side` attribute to specify which side the behind page should be appeared.

```
<ons-sliding-menu
	above-page="page1.html"
	behind-page="menu.html"
	side="left"
	var="menu">
</ons-sliding-menu>

<script type="text/ons-template" id="page1.html">
  <ons-page>
    <ons-toolbar>
      <div class="left">
        <ons-toolbar-button ng-click="menu.toggleMenu()"><ons-icon icon="bars"></ons-icon></ons-toolbar-button>
      </div>
      <div class="center">Page 1</div>
    </ons-toolbar>

    <h1 style="text-align: center">Page1</h1>
  </ons-page>
</script>

<script type="text/ons-template" id="page2.html">
  <ons-page>
    <ons-toolbar>
      <div class="left">
        <ons-toolbar-button onclick="menu.toggleMenu()"><ons-icon icon="bars"></ons-icon></ons-toolbar-button>
      </div>
      <div class="center">Page 2</div>
    </ons-toolbar>

    <h1 style="text-align: center">Page2</h1>
  </ons-page>
</script>

<script type="text/ons-template" id="menu.html">
  <ons-list>
    <ons-list-item modifier="chevron" onclick="menu.setAbovePage('page1.html', {closeMenu: true})">
      page1.html
    </ons-list-item>
    <ons-list-item modifier="chevron" onclick="menu.setAbovePage('page2.html', {closeMenu: true})">
      page2.html
    </ons-list-item>
  </ons-list>
</script>
```
<%- @partial('codepen', { id: "IDvFJ" } ) %>

#### Opening / closing menu

[`<ons-sliding-menu>`](components.html#ons-sliding-menu) provides following methods to handle menu actions: `openMenu()`, `closeMenu()`, and `toggleMenu()`.

#### Setting above and behind page by JavaScript

To change the above and behind page manually, use `setAbovePage()` and `setBehindPage()` methods. These methods can specify parameters in the second argument.

  - `closeMenu`: Set `true` to close the page after execution.
  - `callback`: Specify a callback function after the animation is finished.

#### Swipe support

If you set `swipable` attribute in [`<ons-sliding-menu>`](components.html#ons-sliding-menu), it detects swipe actions and opens/closes the menu. Please be aware that you also need to specify `swipe-target-width` and `max-slide-distance` to enable swipe support.

#### Animation type

You can specify the animation effect in `type` attribute. The available values are `reveal`(default), `push` and `overlay`.

#### Sliding menu events

There are 4 events where you can attach to the sliding menu object: `preopen`, `postopen`, `preclose`, `postclose`.

```
<script>
ons.ready(function() {
  mySlidingMenu.on('preopen', function() {
    console.log("Menu page is going to open");
  });
});
</script>
<ons-sliding-menu var="mySlidingMenu">
```

### Using Tab Bar

A tab bar is composed from a [`<ons-tabbar>`](components.html#ons-tabbar) component and [`<ons-tabbar-item>`](components.html#ons-tabbar-item) components. Usually a tab bar has three to five items, and they are displayed with icons and labels. Each tab bar item is assigned to the different page.

#### `<ons-tabbar>` overview

To place a tab bar into your app, place a [`<ons-tabbar>`](components.html#ons-tabbar) element. A [`<ons-tabbar>`](components.html#ons-tabbar) element only accepts [`<ons-tabbar-item>`](components.html#ons-tabbar-item) under the element.

Tab bar items can have an `icon` attribute and a `label` attribute. For the icon attribute, please specify the same icon name used in [`<ons-icon>`](components.html#ons-icon) element.

```
<ons-tabbar>
  <ons-tabbar-item page="page1.html" label="Page 1" icon="square" active="true"></ons-tabbar-item>
  <ons-tabbar-item page="page2.html" label="Page 2" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page3.html" label="Page 3" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page4.html" label="Page 4" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page5.html" label="Page 5" icon="square"></ons-tabbar-item>
</ons-tabbar>
```

<%- @partial('codepen', { id: "pGuDL" } ) %>

#### Tab bar events

[`<ons-tabbar>`](components.html#ons-tabbar) has `prechange` and `postchange` events that are fired before or after the page switch. The event will get the following parameters.

- `index`: Next page index.
- `tabItem`: Object containing the next page.

### Using List

List is a very popular pattern to display a set of information in scrollable view. Onsen UI supports scrollable list by using [`<ons-list>`](components.html#ons-list) and [`<ons-list-item>`](components.html#ons-list-item) tags.

#### `<ons-list>` overview

To create a list, place a [`<ons-list>`](components.html#ons-list) tag and [`<ons-list-item>`](components.html#ons-list-item) tags.

Also, [`<ons-list-header>`](components.html#ons-list-header) can be used to represent a grouped list items.

#### Basic list

Here is the basic [`<ons-list>`](components.html#ons-list) example with scrollable content.

<%- @partial('codepen', { id: "yxcCt" } ) %>

#### List with right arrow icon

This type of list is usually used with [`<ons-navigator>`](components.html#ons-navigator) to provide screen transitions.

<%- @partial('codepen', { id: "nIEvm" } ) %>

#### List with forms

List is also frequently used in the setting page. Here is the example list with some form elements.

<%- @partial('codepen', { id: "ohqDk" } ) %>

### Using Form Components

Onsen UI provides various components for building forms.

#### Button

[`<ons-button>`](components.html#ons-button) renders a button with different face types. You can change the appearance by using `modifier`, `should-spin`, `animation` and `disabled` attributes. `modifier` attribute provides several predefined values to change the appearance.

To detect a tap event, you can use either `onclick` or `ng-click` attribute.

<%- @partial('codepen', { id: "hLayx" } ) %>

#### Switch

[`<ons-switch>`](components.html#ons-switch) is the element to display a switch. A switch has an off and on state, and the state can be accessed by the component's `isChecked()` method.

```
<script>
function changed() {
  alert(mySwitch.isChecked() ? 'ON' : 'OFF');
}
</script>
<ons-switch var="mySwitch" onchange="changed()"></ons-switch>
```

#### Text input

Text input and textarea do not have their own custom elements. However, you can specify a predefined class to display in Onsen UI styles.

- Text input

  ```
  <input class="text-input" id="my-input">
  ```

- Text area

  ```
  <textarea class="textarea" id="my-textarea"></textarea>
  ```

- Search input

  ```
  <input type="search" class="search-input">
  ```

In all cases, you can use `document.getElementById()` call or jQuery selector to obtain the component value.

```
alert(document.getElementById("my-input").value);
alert($("#my-input").val());
```

<%- @partial('codepen', { id: "qFbGp" } ) %>

#### Check box and radio button

Check box and radio button are provided as CSS components. Therefore, use the following HTML snippet to display each component.

```
<label class="checkbox">
  <input type="checkbox">
  <div class="checkbox__checkmark></div>
  <span class="ons-checkbox-inner"></span>
</label>
```

```
<label class="radio-button">
  <input type="radio">
  <div class="radio-button__checkmark></div>
</label>
```

### Layouting

Onsen UI provides a grid system to place your elements in the screen. The grid system divides the screen into rows and columns, just like a spreadsheet. The width and height of each grid is adjustable, and you can also condense two or more grids in a row or column, into one grid.

#### `<ons-row>` and `<ons-col>` overview

The layout can be performed by combining [`<ons-row>`](components.html#ons-row) and [`<ons-col>`](components.html#ons-col) components. The width and height can be adjusted in a flexible way.

By default, all [`<ons-col>`](components.html#ons-col) inside a [`<ons-row>`](components.html#ons-row) will have the same width. You can specify any `<ons-col>` elements to have a specific width and let others take the remaining width in a `<ons-row>`.

[`<ons-row>`](components.html#ons-row) has `align` attribute, and `<ons-col>` has `align`, `size`, and `offset` attributes. For the `size` attribute, you can specify either in `px` or `%`.

#### Layout example

You can see the following example to understand how [`<ons-row>`](components.html#ons-row) and [`<ons-col>`](components.html#ons-col) can provide flexible component placement.

<%- @partial('codepen', { id: "GgujC" } ) %>

### Using Icons

Onsen UI provides more than 400 icons provided by [Font Awesome](http://fontawesome.github.io/). The list of available icons can be found on the [Font Awesome Website]([http://fortawesome.github.io/Font-Awesome/icons/]).

#### `<ons-icon>` overview

When displaying an icon, a [`<ons-icon>`](components.html#ons-icon) component can be used. You can specify which icon to display by specifying to the icon attribute. Please remove the trailing `"fa-"` from the Font Awesome website.

Here are some examples.

```
<ons-icon icon="angle-left"></ons-icon>
<ons-icon icon="angle-left" size="40px"></ons-icon>
<ons-icon icon="angle-left" size="40px" rotate="90"></ons-icon>
<ons-icon icon="angle-left" spin="true"></ons-icon>
```

Also, you can specify the icon size to display by using size attribute.

```
<ons-icon icon="angle-left" size="40px">
```

Furthermore, you can rotate the icon.

```
<ons-icon icon="angle-left" size="40px" rotate="90deg">
```

Icon can have an animation effect. This is useful for displaying spinners.

```
<ons-icon icon="angle-left" spin="yes">
```

<%- @partial('codepen', { id: "xAhvg" } ) %>

### Multi-screen support

Onsen UI supports the responsive design, where you can apply different CSS styles for different screen sizes. To do so, you will use the CSS Media Query and separate CSS definitions based on your preference.

Furthermore, Onsen UI supports a Split View user interface, where you can have two columns in a larger or horizontal screen, and one column for a smaller screen. It provides an easy way for the developer to both support smartphones and tablets without defining particular CSS styles.

#### Using CSS Media Query

CSS Media Query can be used to separate CSS definition based on screen resolution, screen size, and/or aspect ratio.

For example, the following media queries is an example to separate various screen sizes.

```
<style>
@media (min-width:320px) { /* smartphones, iPhone, portrait 480x320 phones */ }
@media (min-width:641px) { /* portrait tablets, portrait iPad, landscape e-readers, landscape 800x480 or 854x480 phones */ }
@media (min-width:961px) { /* tablet, landscape iPad, lo-res laptops ands desktops */ }
@media (min-width:1025px) { /* big landscape tablets, laptops, and desktops */ }
@media (min-width:1281px) { /* hi-res laptops and desktops */ }
</style>
```

<%- @partial('codepen', { id: "lGbrB" } ) %>

#### Using `<ons-split-view>` component

[`<ons-split-view>`](components.html#ons-split-view) component is used to provide an interface that separates the screen into two parts.
Also, it has an option to hide the secondary page when the screen size is smaller. This is very useful when you want to support smartphones and tablets together.

[`<ons-split-view>`](components.html#ons-split-view) component has the following attributes:

- `main-page`: Specify a page to display on the main section.
- `secondary-page`: Specify a page to display on the side section.

<%- @partial('codepen', { id: "nKqfv" } ) %>

##### Specify when to collapse

[`<ons-split-view>`](components.html#ons-split-view) has `collapse` attribute to specify when to collapse. The possible values are `portrait`, `landscape`, or `width ##px` (i.e. `width 300px`). For example, if set as `portrait` and the device is in portrait orientation, the secondary page is hidden.

### Utility APIs

Onsen UI also provides several general purpose APIs to help make developing your app easier.

#### `ons.ready` function

`ons.ready()` function is called when Onsen UI initialization is done. If the app is running under Cordova or PhoneGap, it will also wait for its initialization (`ondeviceready` event).

This event is very useful to hide the splash screen to avoid a black screen during the page load. For example, the following code will hide the splash screen once Onsen UI is loaded completely.

```
ons.ready(function() {
  // Hide Cordova splash screen when Onsen UI is loaded completely
  // API reference: https://github.com/apache/cordova-plugin-splashscreen/blob/master/doc/index.md
  navigator.splashscreen.hide()
});
```

#### `ons.bootstrap` function

`ons.bootstrap()` function is a handy way to load Onsen UI with one line of code. What it really does is add the Onsen UI module to AngularJS, and make it callable from any scope in the app. It must be executed after `onsenui.js` is loaded.

#### Platform detection

[`<ons-if-platform>`](components.html#ons-if-platform) attribute is useful when only displaying contents under a specific platform. This attribute can be set within any tags.

```
<div ons-if-platform="ios">Content for only iPhone and iPad users</div>
```

#### Landscape / portrait detection

Similar to `ons-if-platform` attribute, [`<ons-if-orientation>`](components.html#ons-if-orientation) attribute can be used to switch content between portrait and landscape.

```
<div ons-if-orientation="portrait">Content only shown for portrait</div>
```

### Calling Component APIs from JavaScript

Some components have JavaScript functions to provide features that needs to be called after launching the program. For instance, `ons-navigator` has `pushPage()` and `popPage()` methods to display or hide a new page.

In order to call those APIs, you need to assign a variable to the component by using `var` attribute. For instance, you can assign a variable called `"myNavigator"` by the following code.

```
<ons-navigator var="myNavigator">
```

Now, `myNavigator` has become a variable that can be accessed from anywhere in your code. More precisely, `myNavigator` has defined as a `window` property, and also in the AngularJS global scope.

Therefore, if you are using a plain JavaScript or jQuery, you can refer the variable like the code below.

```
<script>
  myNavigator.pushPage('newpage.html');
</script>
```

Or, AngularJS way like the following code.

```
<script>
  module.controller("PageController", function($scope) {
    ons.ready(function() {
      // Actually myNavigator object sits in the root scope
      $scope.myNavigator.pushPage("newpage.html");
    });
  });
</script>
```


### Dealing with DOM APIs

Even though the Onsen UI components are custom elements based, you can query the component using the familiar DOM APIs.

```
<ons-navigator class="myNavigator"></ons-navigator>
<ons-button id="my-ons-button"</ons-button>
<ons-list>
  <ons-list-item class="item1"></ons-list-item>
</ons-list>
<script>
  // Using DOM API
  document.getElementById("my-ons-button");

  // Using jQuery
  $("ons-navigator.myNavigator");
  $("ons-list-item.item1");
  $("ons-button").onclick(function() {
    alert("Button is clicked!");
  });
</script>
```

### Event Handling

Some components supports events. By using those events, you can hook your code to a specific action in the component and customize the behavior.

To add a handler to a event, use `on()`, `off()` and `once()` method of the target component. Therefore, you need to define a variable of the component, as described in the previous section.

```
<script>
myNavigator.on("prepush", function() {
  // Add a handler for prepush event
});
</script>

<script>
// on and off usage
var callback = function(event) {
}
myNavigator.on("prepush", callback);
myNavigator.once("prepush", callback);
myNavigator.off("prepush", callback);
</script>
```

#### Tap & click event

The most frequently used action is a tap on the element, the event can be triggered by `onclick` handler.

```
<ons-button onclick="alert('You tapped me!')">Click Me</ons-button>
```

Also, if you are familiar with AngularJS events, you can also get the same event by `ng-click` handler.

```
<ons-button ng-click="alert('You tapped me!')">Click Me</ons-button>
```

In both cases, thanks to the fastclick library, there is no 300ms delay when detecting the event. This means the app responds much quicker to the user interactions.

#### Page init event

`pageinit` event is called after [`<ons-page>`](components.html#ons-page) is initialized. Use this event to alter the behavior on each pages.

```
<script>
$(document.body).on('pageinit', '#my-page', function() {
  $('.my-content', this).text("I am fine!");
})
</script>

<ons-page id="my-page">
  <div>Hello, how are you?</div>
  <div class="my-content">Change me</div>
</ons-page>
```

#### Component events

[`<ons-navigator>`](components.html#ons-navigator), [`<ons-sliding-menu>`](components.html#ons-sliding-menu) and [`<ons-tabbar>`](components.html#ons-tabbar) provides events to control the behavior before and after the user interaction. For more details, please see the document for each component.

### Defining Multiple Pages in Single HTML

Some components require you to specify another HTML page. For instance, a `<ons-sliding-menu>` needs to specify a start up page in following format.

```
<ons-sliding-menu
  behind-page="menu.html"
  above-page="content.html">
</ons-sliding-menu>
```

Instead of creating a menu.html and content.html separately, you can also define the page content in the same page. This can be done by creating a `script` tag and set type as `"text/ons-template"`.

```
<script type="text/ons-template" id="main.html">
  <!-- Here, we define the HTML content for main.html -->
  <div>
    Hello, this is the content of main.html
  </div>
</script>

<script type="text/ons-template" id="content.html">
  <!-- Here, we define the HTML content for content.html -->
  <div>
    Hello, this is the content of content.html
  </div>
</script>
```

This is a micro-templating technique, and is very useful when you want to maintain smaller amount of files.

### Customize Onsen UI components

You can customize Onsen UI components based on what you want to achieve. You can either customize its look & feel, or go more deeper into the component and modify its underlying JavaScript or HTML code.

#### Customizing its look and feel

Onsen UI styles are defined in a CSS file called `onsenui.css` and `onsen-css-components.css`. These files have all the definitions. All components are fully customizable by editing the file.

Or, you can also use [Onsen CSS Components](http://components.onsenui.io/) to customize pre-defined colors. After the customization, you can download and replace to the existing `onsenui-css-components.css` to reflect the changes.

#### Overriding CSS styles

There are some situations where you want to apply a different style to a specific component. In such case, you can use modifier attribute to override its style definition.

For example, if you want to apply a thick border only to a specific button, you can define like the one below.

```
<ons-button modifier="thick">Thick Button</ons-button>
```

Then, write the appropriate style code under the style tag or in the css file.

```
<style>
.button-thick {
  border: 10px;
}
</style>
```

#### Customizing underlying HTML

If you need to customize the underlying HTML code, you need to understand about AngularJS directive. AngularJS directive is a way to combine HTML code and JavaScript into a HTML tag.

HTML code for each components are located under the framework's `templates` directory. For instance, the HTML code for `<ons-button>` is found in `framework/templates/button.tpl`.

```
<button class="{{item.animation}} button--{{onsType}} effeckt-button button no-select {{modifierTemplater('button--*')}}">
  <span class="label ons-button-inner" ng-transclude></span>
  <span class="spinner button__spinner {{modifierTemplater('button--*__spinner')}}"></span>
</button>
```

After modifying the template files, you need to build Onsen UI because all the template files are cached and stored in `framework/directives/templates.js` file. See [Building Onsen UI]() section for more details.

#### Customizing JavaScript code

The JavaScript code for each component is located in the `directives` directory.

#### Building Onsen UI

If you need to build Onsen UI manually, there is a `gulp` task for that purpose. Please follow the instruction from the [project Website](https://github.com/OnsenUI/OnsenUI).

<script async src="//codepen.io/assets/embed/ei.js"></script>

<script>
$(function() {
  $(".resize-btn").on("click", function(elm) {
    var hash = $(elm.target).data("slug-hash");
    $(".codepen-content-" + hash).toggleClass("expanded");
  });
});
</script>
