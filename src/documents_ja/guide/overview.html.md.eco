---
layout: 'default'
page: 'guide'
title: 'Onsen UIガイド'
needHelp: true
autotoc: true
---

## Onsen UIガイド

<h3 id="LoadingOnsenUIinYourProject">Onsen UIをプロジェクトに組み込む</h3>

ヒント: Onsen UIの組み込み方法については、[Getting Startedガイド](/guide/getting_started.html)も参考にしてください。

Onsen UIはAngularJSを用いてHTML5のCustom Elements対応を行っていますが、AngularJSの理解は**必須ではありません**。Onsen UIは、jQueryやBackbone.jsといったすべてのJavaScriptフレームワークと共に利用することができます。一方で、AngularJSと組み合わせることで、より高度な連携を行うことも可能です。

<h4 id="UsingOnsenUIwithjQueryorwithanyJSframeworks">jQueryからOnsen UIを扱う</h4>

Onsen UIはAngularJS以外から使うことが可能です。下記のサンプルは、Onsen UIを通常のJavaScriptのような記述で利用しています。

```
<!doctype html>
<meta charset="utf-8">
<link rel="stylesheet" href="lib/onsen/css/onsenui.css">
<link rel="stylesheet" href="lib/onsen/css/onsen-css-components.css">
<script src="lib/onsen/js/angular/angular.js"></script>
<script src="lib/onsen/js/onsenui.js"></script>
<script>
  ons.bootstrap();
  ons.ready(function() {
    // Add another Onsen UI element
    var content = document.getElementById("#my-content");
    content.innerHTML="<ons-button>Another Button</ons-button>";
    ons.compile(content);
  });
</script>
<body>
  <ons-navigator title="Navigator" var="myNavigator">
    <ons-page>
      <ons-button onclick="myNavigator.pushPage('page2.html')">Next Page</ons-button>
      <div id="my-content"></div>
    </ons-page>
  </ons-navigator>
</body>
```

このコードでは、2つの特長があります。1つはOnsen UIコンポーネントに付与された`var`属性、そして`ons.compile`関数です。

コンポーネントを定義する時に`var`属性を指定すると、そのコンポーネントのオブジェクトは`window`オブジェクトのプロパティとして定義されます。詳細については[コードからコンポーネントオブジェクトにアクセスする](#from-code)を参照してください。

`ons.compile`関数を使うと、Onsen UIコンポーネントが定義されたHTMLコードを通常のDOM構造に変換します。（現状では）ほとんどのブラウザーはCustom Elementsをサポートしていないため、この関数を使ってOnsen UIコンポーネントをブラウザーに対応させることが必要です。

<h4 id="UsingOnsenUIwithAngularJS">AngularJSからOnsen UIを使う</h4>

Onsen UIはAngularJSの上に作られています。そのため、AngularJSのユーザーであれば、下記のようにしてOnsen UIを使うことができます。

```
<!doctype html>
<html lang="en" ng-app="my-app">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="lib/onsen/css/onsenui.css"/>
    <link rel="stylesheet" href="lib/onsen/css/onsen-css-components.css"/>
    <script src="lib/onsen/js/angular/angular.js"></script>
    <script src="lib/onsen/js/onsenui.js"></script>
    <script>
      var module = angular.module('my-app', ['onsen']);
      module.controller('AppController', function($scope) { });
      module.controller('PageController', function($scope) {
        ons.ready(function() {
          // Init code here
        });
      });
    </script>
  </head>
  <body ng-controller="AppController">
    <ons-navigator var="navigator">
      <ons-page ng-controller="PageController">
        <!-- Page content -->
      </ons-page>
    </ons-navigator>
  </body>
</html>
```

<h3 id="ManagingMultiplePages">複数のページを管理する</h3>

アプリ開発に着手する前に、UIパターンを検討することが重要となります。Onsen UIはよく使われる4種類の画面パターンに対応しています。もちろん、スライディングメニュー方式のアプリにページナビゲーションを組み込むなど、複数の画面パターンを組み合わせることも一般的です。

<h4 id="Navigationpattern">ナビゲーション型</h4>

ページが親子関係を持つ場合に一般的に用いられるパターンです。子ページへは、ボタンのタップや、リスト要素の選択などからリンクされます。ナビゲーションパターンを実装するためには、[`<ons-navigator>`](components.html#ons-navigator)と[`<ons-toolbar>`](components.html#ons-toolbar)を組み合わせます。

<h4 id="Slidingmenupattern">スライディングメニュー型</h4>

メニュー型とも呼ばれ、同じ階層に複数のページを配置するような場合に最適です。Onsen UIでは、[`<ons-sliding-menu>`](components.html#ons-sliding-menu)コンポーネントで実装します。スワイプ操作でメニューの表示/非表示を制御することもできます。

<h4 id="Tabbarpattern">タブバー型</h4>

iPhoneやiPadアプリでよく見られ、ページの下部にタブバーを配置したパターンになります。通常、タブバーにはいくつかの項目（アイテム）が並び、アイコンとテキストで表現されます。複数の機能を提供したいような場合に用いられます。Onsen UIでタブバーを実装するには、[`<ons-tabbar>`](components.html#ons-tabbar)コンポーネントを使用します。

<h4 id="Splitviewpattern">スプリットビュー型</h4>

タブレットのような大きな画面を持つデバイスや、画面を横向きにしたときに用いられます。スプリットビュー型では、画面を左と右に分割し、別々の情報を表示できます。[`<ons-split-view>`](components.html#ons-split-view)コンポーネントを用います。小さな画面を持つデバイスや、縦向きにした場合に、自動的にスライディングメニュー型に切り替える機能も有しています。

<h3 id="PageNavigation">ページナビゲーション</h3>

Onsen UIでは、[`<ons-navigator>`](components.html#ons-navigator)コンポーネントでページナビゲーションを実装します。`ons-navigator`は画面要素を持たない、ナビゲーションコントローラーです。そのため、一般的にはページ内にツールバーを表示するために[`<ons-toolbar>`](components.html#ons-toolbar)を組み合わせます。ナビゲーターは画面遷移をする際に自動的にアニメーションを適用し、親子関係を持つページを作成するために利用できます。

<h4 id="ons-navigatoroverview">`<ons-navigator>`の概要</h4>

[`<ons-navigator>`](components.html#ons-navigator)コンポーネントは、ページスタックの管理機能と、画面遷移時のアニメーション効果を提供します。ページスタックに新しいページが追加されると、自動的にアニメーションが行われ、ページが表示されます。スタック内のすべてのページは[`<ons-page>`](components.html#ons-page)要素で表されます。そのため、[`<ons-navigator>`](components.html#ons-navigator)コンポーネントの直下には[`<ons-page>`](components.html#ons-page)コンポーネントのみ配置できます。

通常は、ページ上部にツールバーを設置します。そのため、[`<ons-page>`](components.html#ons-page)の下には[`<ons-toolbar>`](components.html#ons-toolbar)コンポーネントを配置するのが一般的です。ツールバーには、戻るボタンを設置したり、ページタイトルを描画したりします。

<%- @partial('codepen', { id: "yrhtv" } ) %>

<h4 id="Displayanewpage">新しいページを表示</h4>

スタックに新しいページを追加するには、ナビゲーターオブジェクトの`pushPage()`メソッドを使用します。このメソッドを呼び出すために、`<ons-navigator>`の`var`属性を使用し、ナビゲーターオブジェクトをJavaScriptから呼び出せるように指定します。

```
<ons-navigator var="myNavigator"></ons-navigator>
<script>
var options = {
  animation: 'slide', // アニメーションの種類
  onTransitionEnd: function() {} // アニメーションが完了した際によばれるコールバック
};
myNavigator.pushPage("page2.html", options);
</script>      
```

上記のコードのように、遷移時のオプションを`pushPage()`メソッドに渡すことができます。

<h4 id="Returningfromapage">一つ前のページに戻る</h4>

`popPage()`メソッドを呼ぶと、ページスタックから最前面のページが削除され、一つ前のページに戻ります。

```
<ons-navigator var="myNavigator"></ons-navigator>
<script>
myNavigator.popPage();
</script>
```

<h4 id="Transitionanimation">遷移アニメーションの指定</h4>

`pushPage()`と`popPage()`メソッドでは、下記のアニメーションを選択できます: `slide`、`lift`、`fade`、`none`。

1. スライド（タイプ: `slide`、デフォルト）

  アニメーションの表現は、ネイティブ遷移と合わせるためにiOSとAndroidで異なるものとなります。

  ```
  navigator.pushPage("page2.html", { animation: "slide" }):
  ```

2. リフトアップ / リフトダウン（タイプ: `lift`）

  ```
  navigator.pushPage("page2.html", { animation: "lift" }):
  ```

3. フェードイン / フェードアウト（タイプ: `fade`）

  ```
  navigator.pushPage("page2.html", { animation: "fade" }):
  ```

4. アニメーションなし（タイプ: `none`）

  ```
  navigator.pushPage("page2.html", { animation: "none" }):
  ```

<%- @partial('codepen', { id: "FLsIE" } ) %>

さらに、遷移アニメーションはカスタマイズできます。その場合は`NavigatorTransitionAnimator`オブジェクトを作成し、`animation`パラメータに指定してください。

```
pushPage('page2.html', {animation: new MyCustomAnimator})
```

詳細については、`framework/view`ディレクトリ内にある`NavigatorTransitionAnimator`を参照してください。

<h4 id="Managingpagestacks">ページスタックの管理</h4>

ナビゲーターにはページスタックを管理するためのAPIが提供されます。これらのAPIを使うことで、より細かい挙動をカスタマイズできます。

<h5 id="navigatorgetCurrentPage">navigator.getCurrentPage()</h5>

現在のページの`page`オブジェクトを取得します。`page`オブジェクトは、下記のプロパティと関数を有しています。

- `destroy()`メソッド

  このメソッドを呼び出すと、ページスタックからページが削除されます。

- `options`オブジェクト

  ページの設定パラメータを保有するオブジェクトです。詳細については`pushPage()`メソッドの説明を参照してください。

```
myNavigator.pushPage("page2.html", { param1: "value1", param2: "value2" });
var page = myNavigator.getCurrentPage();
console.log(page.options.param1); // "value1"が戻ります
```

<h5 id="navigatorgetPages">navigator.getPages()</h5>

ナビゲーターが保有する`page`オブジェクトの一覧を返します。`page`オブジェクトの使い方については、`navigator.getCurrentPage()`メソッドの説明を参照してください。

```
// ページスタックの上から2番目のページを削除する例
var pages = navigator.getPages();
pages[1].destroy();
// popPage()を行うと3番目のページに戻ります
```

<h5 id="navigatorresetToPagepageoptions">navigator.resetToPage(page, options)</h5>

ページスタックをクリアし、指定した新しいページをスタックに追加します。`options`パラメータは`navigator.pushPage` APIと同様です。

<h4 id="Addingatoolbar">ツールバーの追加</h4>

ツールバーは`<ons-toolbar>`コンポーネントとして定義されます。下記にツールバーの例を掲載します。

```
<ons-toolbar>
  <div class="left">
    <ons-back-button>戻る</ons-back-button>
  </div>
  <div class="center">タイトル</div>
  <div class="right">
    <ons-toolbar-button>
      <ons-icon icon="bars">
    </ons-toolbar-button>
  </div>
 </ons-toolbar>
```

<%- @partial('codepen', { id: "aHmGL" } ) %>

ツールバーは左、中央、右の3つに分けられ、それぞれに対応したクラス名（`left`、`center`、`right`）として指定できます。[`<ons-icon>`](components.html#ons-icon)でアイコンを表示したり、[`<ons-toolbar-button>`](components.html#ons-toolbar-button)や[`<ons-back-button>`](components.html#ons-back-button)コンポーネントでボタンを配置できます。HTMLを直接記述することもできます。

`<ons-toolbar>`コンポーネントを用いた例を紹介します。

1. ボタンとアイコンを用いた例

  ```
  <ons-toolbar>
    <div class="left"><ons-toolbar-button>左ボタン</ons-toolbar-button></div>
    <div class="center">ボタンとアイコン</div>
    <div class="right"><ons-toolbar-button><ons-icon icon="bars"></ons-icon></ons-toolbar-button></div>
  </ons-toolbar>
  ```

2. 検索ボックスを用いた例

  ```
  <ons-toolbar>
    <div class="left"><ons-back-button>戻る</ons-back-button></div>
    <div class="center">検索</div>
    <div class="right"><input type="search" class="search-input" placeholder="キーワード"></input></div>
  </ons-toolbar>
  ```

3. カスタムなイメージを表示する例

  ```
  <ons-toolbar>
    <div class="left"><ons-back-button>戻る</ons-back-button></div>
    <div class="center"><img src="custom_title.png"></div>
    <div class="right"><ons-search-input></ons-search-input></div>
  </ons-toolbar>
  ```

<h4 id="Androidbackbutton">Androidの戻るボタンへの対応</h4>

Onsen UIではAndroidの戻るボタンにも対応します。アプリがAndroidデバイス上で実行されていて、Cordovaが用いられている場合は、戻るボタンをタップするとナビゲーターの`popPage()`メソッドが呼ばれます。

また、iOS端末に限ってツールバーに戻るボタンを表示したい場合は、[`<ons-if-platform>`](components.html#ons-if-platform)を使用すると良いでしょう。

```
<ons-toolbar>
  <div class="left"><ons-back-button ons-if-platform="ios">戻る</ons-back-button></div>
  <div class="center">ページタイトル</div>
</ons-toolbar>
```

<h4 id="Navigationevents">ナビゲーターのイベント</h4>

[`<ons-navigator>`](components.html#ons-navigator)には、特定の操作の際にイベントを発行する仕組みが備わっています。それを用いると、たとえば特定の条件においてはページ遷移をキャンセルするといった処理を記述することができます。

`prepush`、`postpush`、`prepop`、`postpop`の4つのイベントがナビゲーターに定義されています。これらは`pushPage`もしくは`popPage`の前あるいは後に発火され、コールバック関数が呼び出されます。

コールバック関数は、`event`オブジェクトを受け取ります。`event`オブジェクトでは、下記に説明するいくつかのプロパティとメソッドが提供されます。たとえば、下記のコードは`pushPage`の実行をキャンセルすることができます。

```
ons.ready(function() {
  myNavigator.on('prepush', function(event) {
    var page = event.currentPage; // 現在のページオブジェクトを取得する
    if (needsCancel) {
      event.cancel(); // 画面遷移をキャンセルする
    }
  });
});
```

<h5 id="prepushandprepopevent">``prepush`と`prepop`イベント</h5>

これらのイベントは、pushPageとpopPageの前に発火します。`event`オブジェクトには、下記のパラメータが備わっています。

- `currentPage`: 現在の`page`オブジェクト。詳細は、[ページスタックを管理する](#managing-page-stacks)を参照してください
- `cancel()`: 画面遷移をキャンセルする
- `navigator`: 保有する`<ons-navigator>`オブジェクト

<h5 id="postpushandpostpopevent">`postpush`と`postpop`イベント</h5>

これらのイベントは、pushPageとpopPageが実行された後に発火します。`event`オブジェクトには、下記のパラメータが備わっています。

- `leavePage`: 現在のページの`page`オブジェクト
- `enterPage`: 新しいページの`page`オブジェクト
- `navigator`: 保有する`<ons-navigator>`オブジェクト

<h3 id="UsingSlidingMenu">スライディングメニュー</h3>

スライディングメニューは2つのページで構成され、それぞれ`above-page`と`behind-page`という形で指定されます。`behind-page`はメニューページとも呼ばれ、通常は隠れており画面端から出現します。ボタンをタップしたり、画面端からスワイプすることで表示することができます。

`behind-page`には、任意のHTMLコンテンツを含むことができます。通常は、別のページへのリンクとなるメニュー画面が一般的です。`above-page`にはメインコンテンツが表示されます。[`<ons-navigator>`](components.html#ons-navigator)と組み合わせることで、さらに深い階層のページを持つことも可能です。

<h4 id="onsslidingmenuoverview">`<Ons-sliding-menu>`の概要</h4>

[`<ons-sliding-menu>`](components.html#ons-sliding-menu)コンポーネントでは`above-page`と`behind-page`を属性として指定します。また、`side`属性を用いると、`behind-page`を画面のどちら側に設置するかを指定できます。

```
<ons-sliding-menu
  above-page="page1.html"
  behind-page="menu.html"
  side="left"
  var="menu">
</ons-sliding-menu>

<script type="text/ons-template" id="page1.html">
  <ons-page>
    <ons-toolbar>
      <div class="left">
        <ons-toolbar-button ng-click="menu.toggleMenu()"><ons-icon icon="bars"></ons-icon></ons-toolbar-button>
      </div>
      <div class="center">Page 1</div>
    </ons-toolbar>

    <h1 style="text-align: center">Page1</h1>
  </ons-page>
</script>

<script type="text/ons-template" id="page2.html">
  <ons-page>
    <ons-toolbar>
      <div class="left">
        <ons-toolbar-button onclick="menu.toggleMenu()"><ons-icon icon="bars"></ons-icon></ons-toolbar-button>
      </div>
      <div class="center">Page 2</div>
    </ons-toolbar>

    <h1 style="text-align: center">Page2</h1>
  </ons-page>
</script>

<script type="text/ons-template" id="menu.html">
  <ons-list>
    <ons-list-item modifier="chevron" onclick="menu.setAbovePage('page1.html', {closeMenu: true})">
      page1.html
    </ons-list-item>
    <ons-list-item modifier="chevron" onclick="menu.setAbovePage('page2.html', {closeMenu: true})">
      page2.html
    </ons-list-item>
  </ons-list>
</script>
```
<%- @partial('codepen', { id: "IDvFJ" } ) %>

<h4 id="Openingclosingmenu">メニューの表示 / 非表示</h4>

[`<ons-sliding-menu>`](components.html#ons-sliding-menu)コンポーネントでは、メニュー開閉のために下記のメソッドを用意しています。それらは`openMenu()`、`closeMenu()`そして`toggleMenu()`です。

<h4 id="SettingaboveandbehindpagebyJavaScript">JavaScriptからページを指定する</h4>

プログラムからページを指定する場合は、`setAbovePage()`と`setBehindPage()`メソッドを使用します。これらのメソッドでは、2番目の引数にパラメータを指定できます。

  - `closeMenu`: 実行後にメニューを閉じる場合は`true`を指定します。
  - `callback`: アニメーションが完了したときにコールバック関数を実行します。

<h4 id="Swipesupport">スワイプの対応</h4>

[`<ons-sliding-menu>`](components.html#ons-sliding-menu)コンポーネントに`swipable`属性を指定すると、スワイプ操作でメニューを開いたり閉じたりする機能が追加されます。また、この機能を使う場合は、`swipe-target-width`と`max-slide-distance`もあわせて指定する必要があることに注意が必要です。

<h4 id="Animationtype">アニメーションの種類</h4>

`type`属性でアニメーションの種類を指定できます。現在は、`reveal`（デフォルト）、`push`、そして`overlay`に対応しています。

<h4 id="Slidingmenuevents">スライディングメニューのイベント</h4>

スライディングメニューには、`preopen`、`postopen`、`preclose`、`postclose`の4種類のイベントに対応します。

```
<script>
ons.ready(function() {
  mySlidingMenu.on('preopen', function() {
    console.log("メニューページを開きます");
  });
});
</script>
<ons-sliding-menu var="mySlidingMenu">
```

<h3 id="UsingTabBar">タブバーを使う</h3>

タブバーは[`<ons-tabbar>`](components.html#ons-tabbar)と[`<ons-tabbar-item>`](components.html#ons-tabbar-item)コンポーネントを組み合わせて表現します。通常、タブバーは3から5つ程度のアイテムを保有しており、アイコンやラベルで表現できます。各タブバーのアイテムをタップすると、別のページに切り替わります。

<h4 id="onstabbaroverview">`<ons-tabbar>`の概要</h4>

タブバーを設置するには、[`<ons-tabbar>`](components.html#ons-tabbar)コンポーネントを使用します。[`<ons-tabbar>`](components.html#ons-tabbar)要素の下には、[`<ons-tabbar-item>`](components.html#ons-tabbar-item)のみを配置できます。

タブバーアイテムでは`icon`属性と`label`属性が指定できます。アイコンを表示する場合は、[`<ons-icon>`](components.html#ons-icon)と同様にアイコン名を指定します。

```
<ons-tabbar>
  <ons-tabbar-item page="page1.html" label="Page 1" icon="square" active="true"></ons-tabbar-item>
  <ons-tabbar-item page="page2.html" label="Page 2" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page3.html" label="Page 3" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page4.html" label="Page 4" icon="square"></ons-tabbar-item>
  <ons-tabbar-item page="page5.html" label="Page 5" icon="square"></ons-tabbar-item>
</ons-tabbar>
```

<%- @partial('codepen', { id: "pGuDL" } ) %>

<h4 id="Tabbarevents">タブバーのイベント</h4>

[`<ons-tabbar>`](components.html#ons-tabbar)は`prechange`と`postchange`イベントを持ちます。これらのイベントは、ページが切り替わる前もしくは後に実行されます。イベントで使用できるパラメータは下記の通りです。

- `index`: 次ページのインデックス番号
- `tabItem`: ページを保有するオブジェクト

<h3 id="UsingList">リストを使う</h3>

リストは多用されるUIパターンで、ビューに複数のコレクションを表示するときに使用します。Onsen UIでは、[`<ons-list>`](components.html#ons-list)と[`<ons-list-item>`](components.html#ons-list-item)コンポーネントを用いて表現します。

<h4 id="onslistoverview">`<ons-list>`の概要</h4>

リストを作成するには、[`<ons-list>`](components.html#ons-list)と[`<ons-list-item>`](components.html#ons-list-item)コンポーネントを使用します。また、[`<ons-list-header>`](components.html#ons-list-header)を用いると、リスト要素のヘッダーを表現できます。

<h4 id="Basiclist">基本的なリスト</h4>

下記に、[`<ons-list>`](components.html#ons-list)の例を掲載します。

<%- @partial('codepen', { id: "yxcCt" } ) %>

<h4 id="Listwithrightarrowicon">右矢印付きのリスト</h4>

[`<ons-navigator>`](components.html#ons-navigator)と共に使用し、画面遷移を行う場合に使用します。

<%- @partial('codepen', { id: "nIEvm" } ) %>

<h4 id="Listwithforms">フォームと共に使用する</h4>

リストは設定ページ等でも良く用いられます。下記に、フォームの要素と組み合わせた例を掲載します。

<%- @partial('codepen', { id: "ohqDk" } ) %>

<h3 id="UsingFormComponents">フォームを使う</h3>

Onsen UIでは、フォームを構築するための様々なコンポーネントを用意しています。

<h4 id="Button">ボタン</h4>

[`<ons-button>`](components.html#ons-button)を用いて、さまざまな種類のボタンを表現できます。外見や挙動の変更には、`modifier`、`should-spin`、`animation`そして`disabled`属性で指定します。特に`modifier`属性を使用すると、あらかじめ定義されたいくつかの外見に合わせて見た目を変更できます。

タップされた場合の処理を記述するには、`onclick`もしくは`ng-click`属性を使用します。

<%- @partial('codepen', { id: "hLayx" } ) %>

<h4 id="Switch">スイッチ</h4>

スイッチを表示するには、[`<ons-switch>`](components.html#ons-switch)を使用します。スイッチにはONとOFFの状態があり、その状態は`isChecked()`メソッドで取得できます。

```
<script>
function changed() {
  alert(mySwitch.isChecked() ? 'ON' : 'OFF');
}
</script>
<ons-switch var="mySwitch" onchange="changed()"></ons-switch>
```

<h4 id="Textinput">テキスト入力</h4>

テキスト入力のためのコンポーネントはカスタムエレメント形式ではなく、あらかじめ定義されたクラス名を指定することでOnsen UIの外見に合わせることができます。

- テキスト入力

  ```
  <input class="text-input" id="my-input">
  ```

- テキストエリア

  ```
  <textarea class="textarea" id="my-textarea"></textarea>
  ```

- 検索ボックス

  ```
  <input type="search" class="search-input">
  ```

どの場合においても、`document.getElementById()`やjQueryのセレクターを用いて、その値を取得できます。

```
alert(document.getElementById("my-input").value);
alert($("#my-input").val());
```

<%- @partial('codepen', { id: "qFbGp" } ) %>

<h4 id="Checkboxandradiobutton">チェックボックスとラジオボタン</h4>

チェックボックスとラジオボタンはCSSコンポーネントとして提供されます。下記のようにして、それぞれのコンポーネントを表示できます。

```
<label class="checkbox">
  <input type="checkbox">
  <div class="checkbox__checkmark></div>
  <span class="ons-checkbox-inner"></span>
</label>
```

```
<label class="radio-button">
  <input type="radio">
  <div class="radio-button__checkmark></div>
</label>
```

<h3 id="Layouting">レイアウト調整</h3>

Onsen UIのグリッドシステムを使うと、手軽にコンポーネントを画面上に配置できます。グリッドシステムは、表計算ソフトのように、画面を行と列に分割します。各グリッドの幅と高さは調整することができ、複数のグリッドを1つに結合することもできます。

<h4 id="onsrowandonscoloverview">`<ons-row>`と`<ons-col>`の概要</h4>

レイアウトの調整は、[`<ons-row>`](components.html#ons-row)と[`<ons-col>`](components.html#ons-col)コンポーネントを使用します。横幅と高さは柔軟に調整できます。

デフォルトでは、[`<ons-row>`](components.html#ons-row)コンポーネント内にあるすべての[`<ons-col>`](components.html#ons-col)コンポーネントは、同じ幅で表現されます。`<ons-col>`要素に対しては、個別に横幅を指定することができます。

[`<ons-row>`](components.html#ons-row)には`align`属性を、`<ons-col>`には`align`、`size`、`offset`属性を指定できます。`size`属性については、`px`もしくは`%`で指定できます。

<h4 id="Layoutexample">レイアウトの例</h4>

下記の例では、[`<ons-row>`](components.html#ons-row)と[`<ons-col>`](components.html#ons-col)を用いて様々なレイアウトを表現しています。

<%- @partial('codepen', { id: "GgujC" } ) %>

<h3 id="UsingIcons">アイコンを使う</h3>

Onsen UIは、[Font Awesome](http://fontawesome.github.io/)の持つ400以上のアイコンを使用できます。すべてのアイコンを確認するには、[Font AwesomeのWebサイト]([http://fortawesome.github.io/Font-Awesome/icons/])を参照してください。

<h4 id="onsiconoverview">`<ons-icon>`の概要</h4>

アイコンを表示するには[`<ons-icon>`](components.html#ons-icon)コンポーネントを使用します。`icon`属性にアイコン名を指定します。アイコン名は、Font AwesomeのWebサイトにあるアイコン名から先頭の`"fa-"`を取り除いたものを使用します。

下記にいくつかの例を紹介します。

```
<ons-icon icon="angle-left"></ons-icon>
<ons-icon icon="angle-left" size="40px"></ons-icon>
<ons-icon icon="angle-left" size="40px" rotate="90"></ons-icon>
<ons-icon icon="angle-left" spin="true"></ons-icon>
```

アイコンの大きさは`size`属性で指定できます。

```
<ons-icon icon="angle-left" size="40px">
```

アイコンを回転させることもできます。

```
<ons-icon icon="angle-left" size="40px" rotate="90deg">
```

アイコンにアニメーションを適用することも可能です。スピナー画像等の表示に有効です。

```
<ons-icon icon="angle-left" spin="yes">
```

<%- @partial('codepen', { id: "xAhvg" } ) %>

<h3 id="Multiscreensupport">マルチスクリーンへの対応</h3>

Onsen UIはレスポンシブデザインに対応しているため、スクリーンサイズに応じてCSSスタイルの適用を切り替えることができます。ここではCSSメディアクエリーを用いる方法について紹介します。

また、Onsen UIではスプリットビューというコンポーネントも提供します。このコンポーネントを用いると、横向きや大画面のデバイスでは2カラムのレイアウトを、それ以外の場合は1カラムのレイアウトに自動的に切り替えます。CSSスタイルを定義することなく、スマートフォンとタブレットの両方に対応したアプリを簡単に開発できます。

<h4 id="UsingCSSMediaQuery">CSSメディアクエリーの概要</h4>

CSSメディアクエリーを用いることで、画面サイズやアスペクト比、解像度などに応じてCSS定義を切り替えることができます。

下記のCSSメディアクエリーは画面サイズに応じてCSSの定義を切り替える例となります。

```
<style>
@media (min-width:320px) { /* スマートフォン、iPhoneなど */ }
@media (min-width:641px) { /* iPad縦、大きな画面を持つスマートフォンなど */ }
@media (min-width:961px) { /* タブレットやiPad横向きなど */ }
@media (min-width:1025px) { /* より大きな画面サイズ */ }
@media (min-width:1281px) { /* デスクトップや高解像度のデバイス */ }
</style>
```

<%- @partial('codepen', { id: "lGbrB" } ) %>

<h4 id="Usingonssplitviewcomponent">`<ons-split-view>`コンポーネントを使う</h4>

[`<ons-split-view>`](components.html#ons-split-view)コンポーネントを用いると、画面を2分割して別々のページを表示することができます。

また、画面サイズが小さい時にはサイドページを非表示にすることができます。そうすることで、スマートフォンとタブレットの両方の端末に簡単に対応できます。

[`<ons-split-view>`](components.html#ons-split-view)コンポーネントでは下記の属性が提供されます。

- `main-page`: メイン側に表示するページを指定できます
- `secondary-page`: サイド側に表示するページを指定できます

<%- @partial('codepen', { id: "nKqfv" } ) %>

<h4 id="Specifywhentocollapse">サイドページの非表示設定</h4>

[`<ons-split-view>`](components.html#ons-split-view)の`collapse`属性を用いて、サイドページを非表示にする条件を指定できます。この属性が取り得る値として、`portrait`、`landscape`もしくは`width ##px`（例`width 300px`）などの指定方法があります。たとえば、`portrait`が指定されていて、かつ、端末が縦向きの画面になっていた場合は、サイドページは非表示になります。

<h3 id="UtilityAPIs">ユーティリティAPI</h3>

ほかにも、Onsen UIを用いた開発をしやすくするためのユーティリティAPIも提供しています。

<h4 id="onsreadyfunction">`ons.ready`関数</h4>

`ons.ready()`関数は、Onsen UIの初期化が完了したときに呼ばれます。CordovaやPhoneGapが使われている場合は、デバイスの初期化（`ondeviceready`イベント）の後に実行されます。

この関数を用いると、ページ読み込み中のブランクスクリーンを表示せずに、スプラッシュ画面を動的に非表示にすることができます。たとえば、下記の例はOnsen UIの読み込みが完了するまで、スプラッシュスクリーンを表示したままにするコードとなります。

```
ons.ready(function() {
  // Onsen UIが読み込み終わるまでスプラッシュ画像を表示したままにする
  // APIリファレンス: https://github.com/apache/cordova-plugin-splashscreen/blob/master/doc/index.md
  navigator.splashscreen.hide()
});
```

<h4 id="onsbootstrapfunction">`ons.bootstrap`関数</h4>

`ons.bootstrap()`関数を用いると、1行でOnsen UIの読み込みを行います。この関数は、AngularJSにOnsen UIのモジュールを追加し、どのスコープからでもOnsen UIを呼び出せるようにします。`onsenui.js`の読み込みが完了した後に呼び出してください。

<h4 id="onscompilefunction">`ons.compile`関数</h4>

`ons.compile()`関数は、Onsen UIコンポーネントが含まれているDOM要素をコンパイルするために使用します。JavaScriptでHTMLを組み立て、描画するときに使用します。

なお、`ons.compile()`関数の引数には、`HTMLElement`オブジェクトを指定する必要があります。また、指定する要素は、`ons.compile()`関数を呼び出す前にDOMツリー上に配置されていいなければなりません。下記の例を参照してください。

```
ons.ready(function() {
  var elm = $("<ons-button>新規ボタン</ons-button>");
  elm.appendTo($("body")); // DOMツリーに追加する
  ons.compile(elm[0]); // 引数はHTMLElementオブジェクトとして指定する
});
```

<h4 id="Platformdetection">プラットフォームの判定</h4>

[`<ons-if-platform>`](components.html#ons-if-platform)属性を使うと、特定のプレットフォームに応じたコンテンツのだし分けを記述できます。この属性は、どのタグにも指定できます。

```
<div ons-if-platform="ios">iPhoneとiPadユーザーだけのコンテンツ</div>
```

<h4 id="Landscapeportraitdetection">画面向きの判定</h4>

`ons-if-platform`属性と同様、[`<ons-if-orientation>`](components.html#ons-if-orientation)属性を用いると、画面の向きに応じて画面表示を切り替えられます。

```
<div ons-if-orientation="portrait">縦向きの時だけ表示するコンテンツ</div>
```

<h3 id="CallingComponentAPIsfromJavaScript">JavaScriptからコンポーネントのAPIを呼び出す</h3>

コンポーネントのなかには、JavaScript関数を備えているものがあります。たとえば、`ons-navigator`は`pushPage()`と`popPage()`メソッドが用意されており、それぞれページを追加したり削除したりする目的で使用します。

こういったAPIを呼び出す場合は、`var`属性でコンポーネントに変数を割り当てます。たとえば、下記のコードはナビゲーターに`"myNavigator"`という変数を割りあてています。

```
<ons-navigator var="myNavigator">
```

これで、`myNavigator`変数はJavaScriptコードのどこからでもアクセスできるようになりました。より正確には、`myNavigator`は`window`オブジェクトのプロパティとして、そして、AngularJSのグローバルスコープとして定義されています。

そのため、JavaScriptを直接用いたり、jQueryを使って変数を呼び出す場合は、下記のコードで動作します。

```
<script>
  myNavigator.pushPage('newpage.html');
</script>
```

AngularJSを用いる場合は、下記のようにして実行できます。

```
<script>
  module.controller("PageController", function($scope) {
    ons.ready(function() {
      // Actually myNavigator object sits in the root scope
      $scope.myNavigator.pushPage("newpage.html");
    });
  });
</script>
```

<h3 id="DealingwithDOMAPIs">DOM APIの利用</h3>

Onsen UIのコンポーネントはCustom Elements形式ではありますが、DOM APIを使って呼び出すこともできます。

```
<ons-navigator class="myNavigator"></ons-navigator>
<ons-button id="my-ons-button"</ons-button>
<ons-list>
  <ons-list-item class="item1"></ons-list-item>
</ons-list>
<script>
  // DOM APIの利用例
  document.getElementById("my-ons-button");

  // jQueryの利用例
  $("ons-navigator.myNavigator");
  $("ons-list-item.item1");
  $("ons-button").onclick(function() {
    alert("Buttonがクリックされました!");
  });
</script>
```

<h3 id="EventHandling">イベントの利用</h3>

コンポーネントのなかには、イベントに対応したものがあります。イベントを使うと、コンポーネントの挙動を上書きし、挙動をカスタマイズすることができます。

イベントにハンドラーを追加するには、コンポーネントの`on()`、`off()`および`once()`メソッドを使用します。そのために前述の通り、コンポーネントに変数を割り当てる必要があります。

```
<script>
myNavigator.on("prepush", function() {
  // prepushイベントのハンドラーを記述する
});
</script>

<script>
// on()とoff()メソッドの使用例
var callback = function(event) {
}
myNavigator.on("prepush", callback);
myNavigator.once("prepush", callback);
myNavigator.off("prepush", callback);
</script>
```

<h4 id="Tapclickevent">タップとクリックのイベント</h4>

コンポーネントに対するアクションとして、最も使われるのはタップの検出です。タップやクリックの検出には、`onclick`ハンドラーを使用します。

```
<ons-button onclick="alert('タップされました')">ここをタップ</ons-button>
```

AngularJSのイベント処理に精通している方は、`ng-click`ハンドラーも使用できます。

```
<ons-button ng-click="alert('タップされました')">ここをタップ</ons-button>
```

どちらの場合でも、fastclickライブラリーを用いることで、イベントの検出に300msの遅延は発生しません。そのため、すばやくユーザーの挙動に反応します。

<h4 id="Pageinitevent">ページ初期化のイベント</h4>

[`<ons-page>`](components.html#ons-page)の初期化が完了すると、`pageinit`イベントが発生します。このイベントを用いて、各ページの挙動を変更してください。

```
<script>
$(document.body).on('pageinit', '#my-page', function() {
  $('.my-content', this).text("私は元気です。");
})
</script>

<ons-page id="my-page">
  <div>ようこそ。元気ですか？</div>
  <div class="my-content">ここが変更されます</div>
</ons-page>
```

<h4 id="Componentevents">コンポーネントのイベント</h4>

[`<ons-navigator>`](components.html#ons-navigator)、[`<ons-sliding-menu>`](components.html#ons-sliding-menu)、[`<ons-tabbar>`](components.html#ons-tabbar)の3コンポーネントはユーザー処理の前後にイベントを提供します。詳細については、各コンポーネントのドキュメントを参照してください。

<h3 id="DefiningMultiplePagesinSingleHTML">複数のページを1つのHTMLに記述する</h3>

いくつかのコンポーネントは、別のHTMLページを指定する必要があります。たとえば、`<ons-sliding-menu>`コンポーネントは、下記のように別途定義されたページを指定します。

```
<ons-sliding-menu
  behind-page="menu.html"
  above-page="content.html">
</ons-sliding-menu>
```

この場合、menu.htmlとcontent.htmlを別途作成するのではなく、同じHTML内にコンテンツを記述することができます。そのためには、`script`タグを作成し、その`type`属性を`"text/ons-template"`と指定します。

```
<script type="text/ons-template" id="main.html">
  <!-- main.htmlのHTMLコンテンツを定義します -->
  <div>
    これはmain.htmlのコンテンツです
  </div>
</script>

<script type="text/ons-template" id="content.html">
  <!-- content.htmlのHTMLコンテンツを定義します -->
  <div>
    これはcontent.htmlのコンテンツです
  </div>
</script>
```

これはマイクロテンプレーティングとも言われ、ページ数を減らすことに貢献できます。

<h3 id="CustomizeOnsenUIcomponents">Onsen UIコンポーネントのカスタマイズ</h3>

Onsen UIコンポーネントには、いくつかのカスタマイズ方法が用意されています。たとえば、ルック＆フィールの変更や、コンポーネントのCSSの直接記述、そしてJavaScriptやHTMLコードの変更などです。

<h4 id="Customizingitslookandfeel">ルック＆フィールのカスタマイズ</h4>

Onsen UIのスタイルは`onsenui.css`と`onsen-css-components.css`という2つのファイルで定義されています。これらのファイルには、コンポーネントのすべての定義が記述されており、ファイルを直接変更することができます。

もしくは、[Onsen UIテーマローラー](http://components.onsenui.io/)を用いると、自由にカラースキームを変更できます。カスタマイズが完了したら、`onsenui-css-components.css`を上書きするだけで変更点を反映できます。

<h4 id="OverridingCSSstyles">CSSスタイルのオーバーライド</h4>

コンポーネントに対して、標準とは別のスタイルを割り当てたい場合があります。こういう場合には、`modifier`属性を用いることで、スタイル定義をオーバーライドすることができます。

たとえば、特定のボタンに対して太い枠をつけたい場合は、下記のようにして`modifier`属性を定義します。

```
<ons-button modifier="thick">Thick Button</ons-button>
```

次に`style`タグなどで、下記のように個別にスタイルを定義します。

```
<style>
.button--thick {
  border: 10px;
}
</style>
```

<h4 id="CustomizingunderlyingHTML">HTMLのカスタマイズ</h4>

コンポーネントが持つHTMLをカスタマイズする場合は、AngularJSについて理解する必要があります。AngularJSでは、ディレクティブという機能を用いて、HTMLとJavaScriptを組み合わせて1つのタグを形成します。

各コンポーネントのHTMLコードは、フレームワークの`templates`ディレクトリ以下に配置されます。たとえば、`<ons-button>`のHTMLコードは`framework/templates/button.tpl`にあります。

```
<button class="{{item.animation}} button--{{onsType}} effeckt-button button no-select {{modifierTemplater('button--*')}}">
  <span class="label ons-button-inner" ng-transclude></span>
  <span class="spinner button__spinner {{modifierTemplater('button--*__spinner')}}"></span>
</button>
```

テンプレートファイルを変更したら、Onsen UIをビルドし直す必要があります。なぜなら、すべてのテンプレートはキャッシュされ、`framework/directives/templates.js`ファイルに格納されているためです。詳しくは、[Onsen UIのビルド]()を参照してください。

<h4 id="CustomizingJavaScriptcode">JavaScriptコードのカスタマイズ</h4>

各コンポーネントのJavaScriptコードは、`directives`ディレクトリに配置されます。

<h4 id="BuildingOnsenUI">Onsen UIのビルド</h4>

Onsen UIでは、ビルドシステムとして`gulp`を使用しています。ビルド方法の詳細については、[プロジェクトのWebサイト](https://github.com/OnsenUI/OnsenUI)を参照してください。

<script src="<%= @rootUrl %>scripts/codepen.js"></script>

<script>
$(function() {
  $(".resize-btn").on("click", function(elm) {
    var hash = $(elm.target).data("slug-hash");
    $(".codepen-content-" + hash).toggleClass("expanded");
    return false;
  });
});
</script>

